
SAFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f8  00800060  00005174  00005208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800258  00800258  00005400  2**0
                  ALLOC
  3 .stab         00004e6c  00000000  00000000  00005400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001140  00000000  00000000  0000a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000b54c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000b73c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000db48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000eebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00010258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0001054b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__vector_1>
       8:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__vector_2>
       c:	0c 94 af 18 	jmp	0x315e	; 0x315e <__vector_3>
      10:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_4>
      14:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <__vector_10>
      2c:	0c 94 71 26 	jmp	0x4ce2	; 0x4ce2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 28 	call	0x5080	; 0x5080 <main>
      8a:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 28 	jmp	0x50f0	; 0x50f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 28 	jmp	0x5108	; 0x5108 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 28 	jmp	0x5108	; 0x5108 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 28 	jmp	0x50f0	; 0x50f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e2       	ldi	r22, 0x20	; 32
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9c 28 	jmp	0x5138	; 0x5138 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 84 28 	jmp	0x5108	; 0x5108 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 84 28 	jmp	0x5108	; 0x5108 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 84 28 	jmp	0x5108	; 0x5108 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 81 28 	jmp	0x5102	; 0x5102 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9d 28 	jmp	0x513a	; 0x513a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 88 28 	jmp	0x5110	; 0x5110 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a4 28 	jmp	0x5148	; 0x5148 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 5d       	subi	r30, 0xD8	; 216
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <ADC_Init>:
static U8 ADC_Value = 0;
#endif

/**/
void ADC_Init()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	/*Set the ADC ON*/
	SETBIT(ADCSRA,7);		//ADEN(ADC Enable) on
     e00:	a6 e2       	ldi	r26, 0x26	; 38
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e6 e2       	ldi	r30, 0x26	; 38
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
		SETBIT(ADCSRA,0);
		SETBIT(ADCSRA,1);
		CLRBIT(ADCSRA,2);
		break;
	case Freq_125 :
		CLRBIT(ADCSRA,0);
     e0e:	a6 e2       	ldi	r26, 0x26	; 38
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e6 e2       	ldi	r30, 0x26	; 38
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	8c 93       	st	X, r24
		SETBIT(ADCSRA,1);
     e1c:	a6 e2       	ldi	r26, 0x26	; 38
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	8c 93       	st	X, r24
		CLRBIT(ADCSRA,2);
     e2a:	a6 e2       	ldi	r26, 0x26	; 38
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8b 7f       	andi	r24, 0xFB	; 251
     e36:	8c 93       	st	X, r24

	/*MODE SELECT*/
	switch (ADC_Mode)
	{
	case Single_Polling :
		CLRBIT(ADCSRA,5);		//ADATE(Auto Triggering Enable) OFF
     e38:	a6 e2       	ldi	r26, 0x26	; 38
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e6 e2       	ldi	r30, 0x26	; 38
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7d       	andi	r24, 0xDF	; 223
     e44:	8c 93       	st	X, r24

	/*Reference*/
	switch(Ref_Volt)
	{
	case VCC :
		SETBIT(ADMUX,6);
     e46:	a7 e2       	ldi	r26, 0x27	; 39
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e2       	ldi	r30, 0x27	; 39
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 64       	ori	r24, 0x40	; 64
     e52:	8c 93       	st	X, r24
		CLRBIT(ADMUX,7);
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	8c 93       	st	X, r24

	/*SIZE*/
	switch(Size)
	{
	case bit_8 :
		SETBIT(ADMUX,5); 	// ADLAR Left adjust result
     e62:	a7 e2       	ldi	r26, 0x27	; 39
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e2       	ldi	r30, 0x27	; 39
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 62       	ori	r24, 0x20	; 32
     e6e:	8c 93       	st	X, r24
		break;
	default :
		break;
	}

}
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <ADC_Read>:
/**************************************************************************************/

#if Size == bit_8
U8 ADC_Read(U8 Pin_Number)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <ADC_Read+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <ADC_Read+0x8>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	8a 83       	std	Y+2, r24	; 0x02
	U8 RetVal ;

	/*Set the Reading BIT*/
	switch (Pin_Number)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3c 83       	std	Y+4, r19	; 0x04
     e8c:	2b 83       	std	Y+3, r18	; 0x03
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	91 05       	cpc	r25, r1
     e96:	09 f4       	brne	.+2      	; 0xe9a <ADC_Read+0x24>
     e98:	9b c0       	rjmp	.+310    	; 0xfd0 <ADC_Read+0x15a>
     e9a:	2b 81       	ldd	r18, Y+3	; 0x03
     e9c:	3c 81       	ldd	r19, Y+4	; 0x04
     e9e:	24 30       	cpi	r18, 0x04	; 4
     ea0:	31 05       	cpc	r19, r1
     ea2:	8c f4       	brge	.+34     	; 0xec6 <ADC_Read+0x50>
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <ADC_Read+0x3a>
     eae:	48 c0       	rjmp	.+144    	; 0xf40 <ADC_Read+0xca>
     eb0:	2b 81       	ldd	r18, Y+3	; 0x03
     eb2:	3c 81       	ldd	r19, Y+4	; 0x04
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	0c f0       	brlt	.+2      	; 0xebc <ADC_Read+0x46>
     eba:	66 c0       	rjmp	.+204    	; 0xf88 <ADC_Read+0x112>
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	d1 f0       	breq	.+52     	; 0xef8 <ADC_Read+0x82>
     ec4:	38 c1       	rjmp	.+624    	; 0x1136 <ADC_Read+0x2c0>
     ec6:	2b 81       	ldd	r18, Y+3	; 0x03
     ec8:	3c 81       	ldd	r19, Y+4	; 0x04
     eca:	25 30       	cpi	r18, 0x05	; 5
     ecc:	31 05       	cpc	r19, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <ADC_Read+0x5c>
     ed0:	c7 c0       	rjmp	.+398    	; 0x1060 <ADC_Read+0x1ea>
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	85 30       	cpi	r24, 0x05	; 5
     ed8:	91 05       	cpc	r25, r1
     eda:	0c f4       	brge	.+2      	; 0xede <ADC_Read+0x68>
     edc:	9d c0       	rjmp	.+314    	; 0x1018 <ADC_Read+0x1a2>
     ede:	2b 81       	ldd	r18, Y+3	; 0x03
     ee0:	3c 81       	ldd	r19, Y+4	; 0x04
     ee2:	26 30       	cpi	r18, 0x06	; 6
     ee4:	31 05       	cpc	r19, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <ADC_Read+0x74>
     ee8:	df c0       	rjmp	.+446    	; 0x10a8 <ADC_Read+0x232>
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	87 30       	cpi	r24, 0x07	; 7
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <ADC_Read+0x80>
     ef4:	fd c0       	rjmp	.+506    	; 0x10f0 <ADC_Read+0x27a>
     ef6:	1f c1       	rjmp	.+574    	; 0x1136 <ADC_Read+0x2c0>
	{
	case PIN0 :
		CLRBIT(ADMUX,0);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8e 7f       	andi	r24, 0xFE	; 254
     f04:	8c 93       	st	X, r24
		CLRBIT(ADMUX,1);
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e2       	ldi	r30, 0x27	; 39
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8d 7f       	andi	r24, 0xFD	; 253
     f12:	8c 93       	st	X, r24
		CLRBIT(ADMUX,2);
     f14:	a7 e2       	ldi	r26, 0x27	; 39
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e2       	ldi	r30, 0x27	; 39
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8b 7f       	andi	r24, 0xFB	; 251
     f20:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
     f22:	a7 e2       	ldi	r26, 0x27	; 39
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e2       	ldi	r30, 0x27	; 39
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
     f30:	a7 e2       	ldi	r26, 0x27	; 39
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e2       	ldi	r30, 0x27	; 39
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	8c 93       	st	X, r24
     f3e:	fb c0       	rjmp	.+502    	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN1 :
		SETBIT(ADMUX,0);
     f40:	a7 e2       	ldi	r26, 0x27	; 39
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e7 e2       	ldi	r30, 0x27	; 39
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	81 60       	ori	r24, 0x01	; 1
     f4c:	8c 93       	st	X, r24
		CLRBIT(ADMUX,1);
     f4e:	a7 e2       	ldi	r26, 0x27	; 39
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e7 e2       	ldi	r30, 0x27	; 39
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8d 7f       	andi	r24, 0xFD	; 253
     f5a:	8c 93       	st	X, r24
		CLRBIT(ADMUX,2);
     f5c:	a7 e2       	ldi	r26, 0x27	; 39
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e7 e2       	ldi	r30, 0x27	; 39
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8b 7f       	andi	r24, 0xFB	; 251
     f68:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
     f6a:	a7 e2       	ldi	r26, 0x27	; 39
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e7 e2       	ldi	r30, 0x27	; 39
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
     f78:	a7 e2       	ldi	r26, 0x27	; 39
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e7 e2       	ldi	r30, 0x27	; 39
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 7e       	andi	r24, 0xEF	; 239
     f84:	8c 93       	st	X, r24
     f86:	d7 c0       	rjmp	.+430    	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN2 :
		CLRBIT(ADMUX,0);
     f88:	a7 e2       	ldi	r26, 0x27	; 39
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e7 e2       	ldi	r30, 0x27	; 39
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	8c 93       	st	X, r24
		SETBIT(ADMUX,1);
     f96:	a7 e2       	ldi	r26, 0x27	; 39
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e2       	ldi	r30, 0x27	; 39
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	82 60       	ori	r24, 0x02	; 2
     fa2:	8c 93       	st	X, r24
		CLRBIT(ADMUX,2);
     fa4:	a7 e2       	ldi	r26, 0x27	; 39
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e2       	ldi	r30, 0x27	; 39
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8b 7f       	andi	r24, 0xFB	; 251
     fb0:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	87 7f       	andi	r24, 0xF7	; 247
     fbe:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
     fc0:	a7 e2       	ldi	r26, 0x27	; 39
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e2       	ldi	r30, 0x27	; 39
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7e       	andi	r24, 0xEF	; 239
     fcc:	8c 93       	st	X, r24
     fce:	b3 c0       	rjmp	.+358    	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN3 :
		SETBIT(ADMUX,0);
     fd0:	a7 e2       	ldi	r26, 0x27	; 39
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e7 e2       	ldi	r30, 0x27	; 39
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	8c 93       	st	X, r24
		SETBIT(ADMUX,1);
     fde:	a7 e2       	ldi	r26, 0x27	; 39
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e7 e2       	ldi	r30, 0x27	; 39
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	8c 93       	st	X, r24
		CLRBIT(ADMUX,2);
     fec:	a7 e2       	ldi	r26, 0x27	; 39
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e2       	ldi	r30, 0x27	; 39
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8b 7f       	andi	r24, 0xFB	; 251
     ff8:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
     ffa:	a7 e2       	ldi	r26, 0x27	; 39
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e7 e2       	ldi	r30, 0x27	; 39
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	87 7f       	andi	r24, 0xF7	; 247
    1006:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
    1008:	a7 e2       	ldi	r26, 0x27	; 39
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e2       	ldi	r30, 0x27	; 39
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8f 7e       	andi	r24, 0xEF	; 239
    1014:	8c 93       	st	X, r24
    1016:	8f c0       	rjmp	.+286    	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN4 :
		CLRBIT(ADMUX,0);
    1018:	a7 e2       	ldi	r26, 0x27	; 39
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e2       	ldi	r30, 0x27	; 39
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
		CLRBIT(ADMUX,1);
    1026:	a7 e2       	ldi	r26, 0x27	; 39
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e7 e2       	ldi	r30, 0x27	; 39
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8d 7f       	andi	r24, 0xFD	; 253
    1032:	8c 93       	st	X, r24
		SETBIT(ADMUX,2);
    1034:	a7 e2       	ldi	r26, 0x27	; 39
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e2       	ldi	r30, 0x27	; 39
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	84 60       	ori	r24, 0x04	; 4
    1040:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
    1042:	a7 e2       	ldi	r26, 0x27	; 39
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	87 7f       	andi	r24, 0xF7	; 247
    104e:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
    1050:	a7 e2       	ldi	r26, 0x27	; 39
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e7 e2       	ldi	r30, 0x27	; 39
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7e       	andi	r24, 0xEF	; 239
    105c:	8c 93       	st	X, r24
    105e:	6b c0       	rjmp	.+214    	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN5 :
		SETBIT(ADMUX,0);
    1060:	a7 e2       	ldi	r26, 0x27	; 39
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e7 e2       	ldi	r30, 0x27	; 39
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	8c 93       	st	X, r24
		CLRBIT(ADMUX,1);
    106e:	a7 e2       	ldi	r26, 0x27	; 39
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e7 e2       	ldi	r30, 0x27	; 39
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8d 7f       	andi	r24, 0xFD	; 253
    107a:	8c 93       	st	X, r24
		SETBIT(ADMUX,2);
    107c:	a7 e2       	ldi	r26, 0x27	; 39
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e2       	ldi	r30, 0x27	; 39
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
    108a:	a7 e2       	ldi	r26, 0x27	; 39
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e7 e2       	ldi	r30, 0x27	; 39
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	87 7f       	andi	r24, 0xF7	; 247
    1096:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
    1098:	a7 e2       	ldi	r26, 0x27	; 39
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e2       	ldi	r30, 0x27	; 39
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 7e       	andi	r24, 0xEF	; 239
    10a4:	8c 93       	st	X, r24
    10a6:	47 c0       	rjmp	.+142    	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN6 :
		CLRBIT(ADMUX,0);
    10a8:	a7 e2       	ldi	r26, 0x27	; 39
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e7 e2       	ldi	r30, 0x27	; 39
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8e 7f       	andi	r24, 0xFE	; 254
    10b4:	8c 93       	st	X, r24
		SETBIT(ADMUX,1);
    10b6:	a7 e2       	ldi	r26, 0x27	; 39
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e7 e2       	ldi	r30, 0x27	; 39
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	8c 93       	st	X, r24
		SETBIT(ADMUX,2);
    10c4:	a7 e2       	ldi	r26, 0x27	; 39
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e7 e2       	ldi	r30, 0x27	; 39
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	84 60       	ori	r24, 0x04	; 4
    10d0:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
    10d2:	a7 e2       	ldi	r26, 0x27	; 39
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e2       	ldi	r30, 0x27	; 39
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	87 7f       	andi	r24, 0xF7	; 247
    10de:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
    10e0:	a7 e2       	ldi	r26, 0x27	; 39
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e7 e2       	ldi	r30, 0x27	; 39
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7e       	andi	r24, 0xEF	; 239
    10ec:	8c 93       	st	X, r24
    10ee:	23 c0       	rjmp	.+70     	; 0x1136 <ADC_Read+0x2c0>
		break;
	case PIN7 :
		SETBIT(ADMUX,0);
    10f0:	a7 e2       	ldi	r26, 0x27	; 39
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e2       	ldi	r30, 0x27	; 39
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	81 60       	ori	r24, 0x01	; 1
    10fc:	8c 93       	st	X, r24
		SETBIT(ADMUX,1);
    10fe:	a7 e2       	ldi	r26, 0x27	; 39
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e2       	ldi	r30, 0x27	; 39
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	82 60       	ori	r24, 0x02	; 2
    110a:	8c 93       	st	X, r24
		SETBIT(ADMUX,2);
    110c:	a7 e2       	ldi	r26, 0x27	; 39
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e2       	ldi	r30, 0x27	; 39
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	84 60       	ori	r24, 0x04	; 4
    1118:	8c 93       	st	X, r24
		CLRBIT(ADMUX,3);
    111a:	a7 e2       	ldi	r26, 0x27	; 39
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e2       	ldi	r30, 0x27	; 39
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	8c 93       	st	X, r24
		CLRBIT(ADMUX,4);
    1128:	a7 e2       	ldi	r26, 0x27	; 39
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e2       	ldi	r30, 0x27	; 39
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8f 7e       	andi	r24, 0xEF	; 239
    1134:	8c 93       	st	X, r24
		break;
	default :
		break;
	}

	SETBIT(ADCSRA,6); //ADSC (Start Conversion)
    1136:	a6 e2       	ldi	r26, 0x26	; 38
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e6 e2       	ldi	r30, 0x26	; 38
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 64       	ori	r24, 0x40	; 64
    1142:	8c 93       	st	X, r24
	while(GETBIT(ADCSRA,6) == (U8)1)
    1144:	e6 e2       	ldi	r30, 0x26	; 38
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	82 95       	swap	r24
    114c:	86 95       	lsr	r24
    114e:	86 95       	lsr	r24
    1150:	83 70       	andi	r24, 0x03	; 3
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	90 70       	andi	r25, 0x00	; 0
    115a:	88 23       	and	r24, r24
    115c:	99 f7       	brne	.-26     	; 0x1144 <ADC_Read+0x2ce>
	{

	}

	/*Reading the ADC Value*/
	RetVal = ADCH ;
    115e:	e5 e2       	ldi	r30, 0x25	; 37
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	89 83       	std	Y+1, r24	; 0x01
	return RetVal ;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <ADC_Getter>:
U8 ADC_Getter(void)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	U8 RetVal ;
	RetVal = ADC_Value ;
    1180:	80 91 58 02 	lds	r24, 0x0258
    1184:	89 83       	std	Y+1, r24	; 0x01
	return RetVal ;
    1186:	89 81       	ldd	r24, Y+1	; 0x01
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_SetPinDirection>:
#include "Bit_Operations.h"
#include "Registers.h"
#include "DIO.h"

void DIO_SetPinDirection (U8 Port_number , U8 Pin_number ,U8 Direction)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	2d 97       	sbiw	r28, 0x0d	; 13
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	6a 83       	std	Y+2, r22	; 0x02
    11a8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port_number)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3d 87       	std	Y+13, r19	; 0x0d
    11b2:	2c 87       	std	Y+12, r18	; 0x0c
    11b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 05       	cpc	r25, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <DIO_SetPinDirection+0x30>
    11be:	e8 c0       	rjmp	.+464    	; 0x1390 <DIO_SetPinDirection+0x200>
    11c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <DIO_SetPinDirection+0x44>
    11ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    11cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	71 f0       	breq	.+28     	; 0x11ee <DIO_SetPinDirection+0x5e>
    11d2:	50 c3       	rjmp	.+1696   	; 0x1874 <DIO_SetPinDirection+0x6e4>
    11d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <DIO_SetPinDirection+0x50>
    11de:	a9 c1       	rjmp	.+850    	; 0x1532 <DIO_SetPinDirection+0x3a2>
    11e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <DIO_SetPinDirection+0x5c>
    11ea:	74 c2       	rjmp	.+1256   	; 0x16d4 <DIO_SetPinDirection+0x544>
    11ec:	43 c3       	rjmp	.+1670   	; 0x1874 <DIO_SetPinDirection+0x6e4>
	{
	case PORT0 :
		switch(Pin_number)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3b 87       	std	Y+11, r19	; 0x0b
    11f6:	2a 87       	std	Y+10, r18	; 0x0a
    11f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_SetPinDirection+0x74>
    1202:	67 c0       	rjmp	.+206    	; 0x12d2 <DIO_SetPinDirection+0x142>
    1204:	2a 85       	ldd	r18, Y+10	; 0x0a
    1206:	3b 85       	ldd	r19, Y+11	; 0x0b
    1208:	24 30       	cpi	r18, 0x04	; 4
    120a:	31 05       	cpc	r19, r1
    120c:	84 f4       	brge	.+32     	; 0x122e <DIO_SetPinDirection+0x9e>
    120e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1210:	9b 85       	ldd	r25, Y+11	; 0x0b
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	b9 f1       	breq	.+110    	; 0x1286 <DIO_SetPinDirection+0xf6>
    1218:	2a 85       	ldd	r18, Y+10	; 0x0a
    121a:	3b 85       	ldd	r19, Y+11	; 0x0b
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	0c f0       	brlt	.+2      	; 0x1224 <DIO_SetPinDirection+0x94>
    1222:	44 c0       	rjmp	.+136    	; 0x12ac <DIO_SetPinDirection+0x11c>
    1224:	8a 85       	ldd	r24, Y+10	; 0x0a
    1226:	9b 85       	ldd	r25, Y+11	; 0x0b
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	d1 f0       	breq	.+52     	; 0x1260 <DIO_SetPinDirection+0xd0>
    122c:	23 c3       	rjmp	.+1606   	; 0x1874 <DIO_SetPinDirection+0x6e4>
    122e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1230:	3b 85       	ldd	r19, Y+11	; 0x0b
    1232:	25 30       	cpi	r18, 0x05	; 5
    1234:	31 05       	cpc	r19, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <DIO_SetPinDirection+0xaa>
    1238:	72 c0       	rjmp	.+228    	; 0x131e <DIO_SetPinDirection+0x18e>
    123a:	8a 85       	ldd	r24, Y+10	; 0x0a
    123c:	9b 85       	ldd	r25, Y+11	; 0x0b
    123e:	85 30       	cpi	r24, 0x05	; 5
    1240:	91 05       	cpc	r25, r1
    1242:	0c f4       	brge	.+2      	; 0x1246 <DIO_SetPinDirection+0xb6>
    1244:	59 c0       	rjmp	.+178    	; 0x12f8 <DIO_SetPinDirection+0x168>
    1246:	2a 85       	ldd	r18, Y+10	; 0x0a
    1248:	3b 85       	ldd	r19, Y+11	; 0x0b
    124a:	26 30       	cpi	r18, 0x06	; 6
    124c:	31 05       	cpc	r19, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <DIO_SetPinDirection+0xc2>
    1250:	79 c0       	rjmp	.+242    	; 0x1344 <DIO_SetPinDirection+0x1b4>
    1252:	8a 85       	ldd	r24, Y+10	; 0x0a
    1254:	9b 85       	ldd	r25, Y+11	; 0x0b
    1256:	87 30       	cpi	r24, 0x07	; 7
    1258:	91 05       	cpc	r25, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <DIO_SetPinDirection+0xce>
    125c:	86 c0       	rjmp	.+268    	; 0x136a <DIO_SetPinDirection+0x1da>
    125e:	0a c3       	rjmp	.+1556   	; 0x1874 <DIO_SetPinDirection+0x6e4>
		{
		case PIN0 :
			if (Direction == OUTPUT)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	41 f4       	brne	.+16     	; 0x1276 <DIO_SetPinDirection+0xe6>
			{
				SETBIT(DDRA,PIN0);
    1266:	aa e3       	ldi	r26, 0x3A	; 58
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ea e3       	ldi	r30, 0x3A	; 58
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	81 60       	ori	r24, 0x01	; 1
    1272:	8c 93       	st	X, r24
    1274:	ff c2       	rjmp	.+1534   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN0);
    1276:	aa e3       	ldi	r26, 0x3A	; 58
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	ea e3       	ldi	r30, 0x3A	; 58
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8e 7f       	andi	r24, 0xFE	; 254
    1282:	8c 93       	st	X, r24
    1284:	f7 c2       	rjmp	.+1518   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN1 :
			if (Direction == OUTPUT)
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	41 f4       	brne	.+16     	; 0x129c <DIO_SetPinDirection+0x10c>
			{
				SETBIT(DDRA,PIN1);
    128c:	aa e3       	ldi	r26, 0x3A	; 58
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ea e3       	ldi	r30, 0x3A	; 58
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	8c 93       	st	X, r24
    129a:	ec c2       	rjmp	.+1496   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN1);
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8d 7f       	andi	r24, 0xFD	; 253
    12a8:	8c 93       	st	X, r24
    12aa:	e4 c2       	rjmp	.+1480   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN2 :
			if (Direction == OUTPUT)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	41 f4       	brne	.+16     	; 0x12c2 <DIO_SetPinDirection+0x132>
			{
				SETBIT(DDRA,PIN2);
    12b2:	aa e3       	ldi	r26, 0x3A	; 58
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ea e3       	ldi	r30, 0x3A	; 58
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	84 60       	ori	r24, 0x04	; 4
    12be:	8c 93       	st	X, r24
    12c0:	d9 c2       	rjmp	.+1458   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN2);
    12c2:	aa e3       	ldi	r26, 0x3A	; 58
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ea e3       	ldi	r30, 0x3A	; 58
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8b 7f       	andi	r24, 0xFB	; 251
    12ce:	8c 93       	st	X, r24
    12d0:	d1 c2       	rjmp	.+1442   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN3 :
			if (Direction == OUTPUT)
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	41 f4       	brne	.+16     	; 0x12e8 <DIO_SetPinDirection+0x158>
			{
				SETBIT(DDRA,PIN3);
    12d8:	aa e3       	ldi	r26, 0x3A	; 58
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ea e3       	ldi	r30, 0x3A	; 58
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
    12e6:	c6 c2       	rjmp	.+1420   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN3);
    12e8:	aa e3       	ldi	r26, 0x3A	; 58
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ea e3       	ldi	r30, 0x3A	; 58
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	87 7f       	andi	r24, 0xF7	; 247
    12f4:	8c 93       	st	X, r24
    12f6:	be c2       	rjmp	.+1404   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN4 :
			if (Direction == OUTPUT)
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	41 f4       	brne	.+16     	; 0x130e <DIO_SetPinDirection+0x17e>
			{
				SETBIT(DDRA,PIN4);
    12fe:	aa e3       	ldi	r26, 0x3A	; 58
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	80 61       	ori	r24, 0x10	; 16
    130a:	8c 93       	st	X, r24
    130c:	b3 c2       	rjmp	.+1382   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN4);
    130e:	aa e3       	ldi	r26, 0x3A	; 58
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ea e3       	ldi	r30, 0x3A	; 58
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7e       	andi	r24, 0xEF	; 239
    131a:	8c 93       	st	X, r24
    131c:	ab c2       	rjmp	.+1366   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN5 :
			if (Direction == OUTPUT)
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	41 f4       	brne	.+16     	; 0x1334 <DIO_SetPinDirection+0x1a4>
			{
				SETBIT(DDRA,PIN5);
    1324:	aa e3       	ldi	r26, 0x3A	; 58
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ea e3       	ldi	r30, 0x3A	; 58
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 62       	ori	r24, 0x20	; 32
    1330:	8c 93       	st	X, r24
    1332:	a0 c2       	rjmp	.+1344   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN5);
    1334:	aa e3       	ldi	r26, 0x3A	; 58
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ea e3       	ldi	r30, 0x3A	; 58
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7d       	andi	r24, 0xDF	; 223
    1340:	8c 93       	st	X, r24
    1342:	98 c2       	rjmp	.+1328   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN6 :
			if (Direction == OUTPUT)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	41 f4       	brne	.+16     	; 0x135a <DIO_SetPinDirection+0x1ca>
			{
				SETBIT(DDRA,PIN6);
    134a:	aa e3       	ldi	r26, 0x3A	; 58
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	ea e3       	ldi	r30, 0x3A	; 58
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 64       	ori	r24, 0x40	; 64
    1356:	8c 93       	st	X, r24
    1358:	8d c2       	rjmp	.+1306   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN6);
    135a:	aa e3       	ldi	r26, 0x3A	; 58
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ea e3       	ldi	r30, 0x3A	; 58
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8f 7b       	andi	r24, 0xBF	; 191
    1366:	8c 93       	st	X, r24
    1368:	85 c2       	rjmp	.+1290   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN7 :
			if (Direction == OUTPUT)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	41 f4       	brne	.+16     	; 0x1380 <DIO_SetPinDirection+0x1f0>
			{
				SETBIT(DDRA,PIN7);
    1370:	aa e3       	ldi	r26, 0x3A	; 58
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ea e3       	ldi	r30, 0x3A	; 58
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 68       	ori	r24, 0x80	; 128
    137c:	8c 93       	st	X, r24
    137e:	7a c2       	rjmp	.+1268   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRA,PIN7);
    1380:	aa e3       	ldi	r26, 0x3A	; 58
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 77       	andi	r24, 0x7F	; 127
    138c:	8c 93       	st	X, r24
    138e:	72 c2       	rjmp	.+1252   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		}
		break;
	case PORT1 :
		switch(Pin_number)
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	39 87       	std	Y+9, r19	; 0x09
    1398:	28 87       	std	Y+8, r18	; 0x08
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	99 85       	ldd	r25, Y+9	; 0x09
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	91 05       	cpc	r25, r1
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <DIO_SetPinDirection+0x216>
    13a4:	67 c0       	rjmp	.+206    	; 0x1474 <DIO_SetPinDirection+0x2e4>
    13a6:	28 85       	ldd	r18, Y+8	; 0x08
    13a8:	39 85       	ldd	r19, Y+9	; 0x09
    13aa:	24 30       	cpi	r18, 0x04	; 4
    13ac:	31 05       	cpc	r19, r1
    13ae:	84 f4       	brge	.+32     	; 0x13d0 <DIO_SetPinDirection+0x240>
    13b0:	88 85       	ldd	r24, Y+8	; 0x08
    13b2:	99 85       	ldd	r25, Y+9	; 0x09
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	b9 f1       	breq	.+110    	; 0x1428 <DIO_SetPinDirection+0x298>
    13ba:	28 85       	ldd	r18, Y+8	; 0x08
    13bc:	39 85       	ldd	r19, Y+9	; 0x09
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	0c f0       	brlt	.+2      	; 0x13c6 <DIO_SetPinDirection+0x236>
    13c4:	44 c0       	rjmp	.+136    	; 0x144e <DIO_SetPinDirection+0x2be>
    13c6:	88 85       	ldd	r24, Y+8	; 0x08
    13c8:	99 85       	ldd	r25, Y+9	; 0x09
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <DIO_SetPinDirection+0x272>
    13ce:	52 c2       	rjmp	.+1188   	; 0x1874 <DIO_SetPinDirection+0x6e4>
    13d0:	28 85       	ldd	r18, Y+8	; 0x08
    13d2:	39 85       	ldd	r19, Y+9	; 0x09
    13d4:	25 30       	cpi	r18, 0x05	; 5
    13d6:	31 05       	cpc	r19, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_SetPinDirection+0x24c>
    13da:	72 c0       	rjmp	.+228    	; 0x14c0 <DIO_SetPinDirection+0x330>
    13dc:	88 85       	ldd	r24, Y+8	; 0x08
    13de:	99 85       	ldd	r25, Y+9	; 0x09
    13e0:	85 30       	cpi	r24, 0x05	; 5
    13e2:	91 05       	cpc	r25, r1
    13e4:	0c f4       	brge	.+2      	; 0x13e8 <DIO_SetPinDirection+0x258>
    13e6:	59 c0       	rjmp	.+178    	; 0x149a <DIO_SetPinDirection+0x30a>
    13e8:	28 85       	ldd	r18, Y+8	; 0x08
    13ea:	39 85       	ldd	r19, Y+9	; 0x09
    13ec:	26 30       	cpi	r18, 0x06	; 6
    13ee:	31 05       	cpc	r19, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <DIO_SetPinDirection+0x264>
    13f2:	79 c0       	rjmp	.+242    	; 0x14e6 <DIO_SetPinDirection+0x356>
    13f4:	88 85       	ldd	r24, Y+8	; 0x08
    13f6:	99 85       	ldd	r25, Y+9	; 0x09
    13f8:	87 30       	cpi	r24, 0x07	; 7
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <DIO_SetPinDirection+0x270>
    13fe:	86 c0       	rjmp	.+268    	; 0x150c <DIO_SetPinDirection+0x37c>
    1400:	39 c2       	rjmp	.+1138   	; 0x1874 <DIO_SetPinDirection+0x6e4>
		{
		case PIN0 :
			if (Direction == OUTPUT)
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	41 f4       	brne	.+16     	; 0x1418 <DIO_SetPinDirection+0x288>
			{
				SETBIT(DDRB,PIN0);
    1408:	a7 e3       	ldi	r26, 0x37	; 55
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e7 e3       	ldi	r30, 0x37	; 55
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
    1416:	2e c2       	rjmp	.+1116   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN0);
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8e 7f       	andi	r24, 0xFE	; 254
    1424:	8c 93       	st	X, r24
    1426:	26 c2       	rjmp	.+1100   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN1 :
			if (Direction == OUTPUT)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	41 f4       	brne	.+16     	; 0x143e <DIO_SetPinDirection+0x2ae>
			{
				SETBIT(DDRB,PIN1);
    142e:	a7 e3       	ldi	r26, 0x37	; 55
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e7 e3       	ldi	r30, 0x37	; 55
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	8c 93       	st	X, r24
    143c:	1b c2       	rjmp	.+1078   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN1);
    143e:	a7 e3       	ldi	r26, 0x37	; 55
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e7 e3       	ldi	r30, 0x37	; 55
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8d 7f       	andi	r24, 0xFD	; 253
    144a:	8c 93       	st	X, r24
    144c:	13 c2       	rjmp	.+1062   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN2 :
			if (Direction == OUTPUT)
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	41 f4       	brne	.+16     	; 0x1464 <DIO_SetPinDirection+0x2d4>
			{
				SETBIT(DDRB,PIN2);
    1454:	a7 e3       	ldi	r26, 0x37	; 55
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e7 e3       	ldi	r30, 0x37	; 55
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	8c 93       	st	X, r24
    1462:	08 c2       	rjmp	.+1040   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN2);
    1464:	a7 e3       	ldi	r26, 0x37	; 55
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e7 e3       	ldi	r30, 0x37	; 55
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8b 7f       	andi	r24, 0xFB	; 251
    1470:	8c 93       	st	X, r24
    1472:	00 c2       	rjmp	.+1024   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN3 :
			if (Direction == OUTPUT)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	41 f4       	brne	.+16     	; 0x148a <DIO_SetPinDirection+0x2fa>
			{
				SETBIT(DDRB,PIN3);
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	88 60       	ori	r24, 0x08	; 8
    1486:	8c 93       	st	X, r24
    1488:	f5 c1       	rjmp	.+1002   	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN3);
    148a:	a7 e3       	ldi	r26, 0x37	; 55
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e7 e3       	ldi	r30, 0x37	; 55
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	87 7f       	andi	r24, 0xF7	; 247
    1496:	8c 93       	st	X, r24
    1498:	ed c1       	rjmp	.+986    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN4 :
			if (Direction == OUTPUT)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	41 f4       	brne	.+16     	; 0x14b0 <DIO_SetPinDirection+0x320>
			{
				SETBIT(DDRB,PIN4);
    14a0:	a7 e3       	ldi	r26, 0x37	; 55
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e7 e3       	ldi	r30, 0x37	; 55
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	80 61       	ori	r24, 0x10	; 16
    14ac:	8c 93       	st	X, r24
    14ae:	e2 c1       	rjmp	.+964    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN4);
    14b0:	a7 e3       	ldi	r26, 0x37	; 55
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e7 e3       	ldi	r30, 0x37	; 55
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	8f 7e       	andi	r24, 0xEF	; 239
    14bc:	8c 93       	st	X, r24
    14be:	da c1       	rjmp	.+948    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN5 :
			if (Direction == OUTPUT)
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	41 f4       	brne	.+16     	; 0x14d6 <DIO_SetPinDirection+0x346>
			{
				SETBIT(DDRB,PIN5);
    14c6:	a7 e3       	ldi	r26, 0x37	; 55
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e7 e3       	ldi	r30, 0x37	; 55
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 62       	ori	r24, 0x20	; 32
    14d2:	8c 93       	st	X, r24
    14d4:	cf c1       	rjmp	.+926    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN5);
    14d6:	a7 e3       	ldi	r26, 0x37	; 55
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7d       	andi	r24, 0xDF	; 223
    14e2:	8c 93       	st	X, r24
    14e4:	c7 c1       	rjmp	.+910    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN6 :
			if (Direction == OUTPUT)
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	41 f4       	brne	.+16     	; 0x14fc <DIO_SetPinDirection+0x36c>
			{
				SETBIT(DDRB,PIN6);
    14ec:	a7 e3       	ldi	r26, 0x37	; 55
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e7 e3       	ldi	r30, 0x37	; 55
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	8c 93       	st	X, r24
    14fa:	bc c1       	rjmp	.+888    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN6);
    14fc:	a7 e3       	ldi	r26, 0x37	; 55
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e7 e3       	ldi	r30, 0x37	; 55
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 7b       	andi	r24, 0xBF	; 191
    1508:	8c 93       	st	X, r24
    150a:	b4 c1       	rjmp	.+872    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			break;
		case PIN7 :
			if (Direction == OUTPUT)
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	41 f4       	brne	.+16     	; 0x1522 <DIO_SetPinDirection+0x392>
			{
				SETBIT(DDRB,PIN7);
    1512:	a7 e3       	ldi	r26, 0x37	; 55
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e7 e3       	ldi	r30, 0x37	; 55
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	8c 93       	st	X, r24
    1520:	a9 c1       	rjmp	.+850    	; 0x1874 <DIO_SetPinDirection+0x6e4>
			}
			else
			{
				CLRBIT(DDRB,PIN7);
    1522:	a7 e3       	ldi	r26, 0x37	; 55
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	8c 93       	st	X, r24
    1530:	a1 c1       	rjmp	.+834    	; 0x1874 <DIO_SetPinDirection+0x6e4>
		default :
			break;
				}
			break;
	case PORT2 :
		switch(Pin_number)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3f 83       	std	Y+7, r19	; 0x07
    153a:	2e 83       	std	Y+6, r18	; 0x06
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <DIO_SetPinDirection+0x3b8>
    1546:	67 c0       	rjmp	.+206    	; 0x1616 <DIO_SetPinDirection+0x486>
    1548:	2e 81       	ldd	r18, Y+6	; 0x06
    154a:	3f 81       	ldd	r19, Y+7	; 0x07
    154c:	24 30       	cpi	r18, 0x04	; 4
    154e:	31 05       	cpc	r19, r1
    1550:	84 f4       	brge	.+32     	; 0x1572 <DIO_SetPinDirection+0x3e2>
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	b9 f1       	breq	.+110    	; 0x15ca <DIO_SetPinDirection+0x43a>
    155c:	2e 81       	ldd	r18, Y+6	; 0x06
    155e:	3f 81       	ldd	r19, Y+7	; 0x07
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	0c f0       	brlt	.+2      	; 0x1568 <DIO_SetPinDirection+0x3d8>
    1566:	44 c0       	rjmp	.+136    	; 0x15f0 <DIO_SetPinDirection+0x460>
    1568:	8e 81       	ldd	r24, Y+6	; 0x06
    156a:	9f 81       	ldd	r25, Y+7	; 0x07
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	d1 f0       	breq	.+52     	; 0x15a4 <DIO_SetPinDirection+0x414>
    1570:	81 c1       	rjmp	.+770    	; 0x1874 <DIO_SetPinDirection+0x6e4>
    1572:	2e 81       	ldd	r18, Y+6	; 0x06
    1574:	3f 81       	ldd	r19, Y+7	; 0x07
    1576:	25 30       	cpi	r18, 0x05	; 5
    1578:	31 05       	cpc	r19, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <DIO_SetPinDirection+0x3ee>
    157c:	72 c0       	rjmp	.+228    	; 0x1662 <DIO_SetPinDirection+0x4d2>
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	85 30       	cpi	r24, 0x05	; 5
    1584:	91 05       	cpc	r25, r1
    1586:	0c f4       	brge	.+2      	; 0x158a <DIO_SetPinDirection+0x3fa>
    1588:	59 c0       	rjmp	.+178    	; 0x163c <DIO_SetPinDirection+0x4ac>
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	3f 81       	ldd	r19, Y+7	; 0x07
    158e:	26 30       	cpi	r18, 0x06	; 6
    1590:	31 05       	cpc	r19, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <DIO_SetPinDirection+0x406>
    1594:	79 c0       	rjmp	.+242    	; 0x1688 <DIO_SetPinDirection+0x4f8>
    1596:	8e 81       	ldd	r24, Y+6	; 0x06
    1598:	9f 81       	ldd	r25, Y+7	; 0x07
    159a:	87 30       	cpi	r24, 0x07	; 7
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <DIO_SetPinDirection+0x412>
    15a0:	86 c0       	rjmp	.+268    	; 0x16ae <DIO_SetPinDirection+0x51e>
    15a2:	68 c1       	rjmp	.+720    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				{
				case PIN0 :
					if (Direction == OUTPUT)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	41 f4       	brne	.+16     	; 0x15ba <DIO_SetPinDirection+0x42a>
					{
						SETBIT(DDRC,PIN0);
    15aa:	a4 e3       	ldi	r26, 0x34	; 52
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	8c 93       	st	X, r24
    15b8:	5d c1       	rjmp	.+698    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN0);
    15ba:	a4 e3       	ldi	r26, 0x34	; 52
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e4 e3       	ldi	r30, 0x34	; 52
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8e 7f       	andi	r24, 0xFE	; 254
    15c6:	8c 93       	st	X, r24
    15c8:	55 c1       	rjmp	.+682    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN1 :
					if (Direction == OUTPUT)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	41 f4       	brne	.+16     	; 0x15e0 <DIO_SetPinDirection+0x450>
					{
						SETBIT(DDRC,PIN1);
    15d0:	a4 e3       	ldi	r26, 0x34	; 52
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e4 e3       	ldi	r30, 0x34	; 52
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	82 60       	ori	r24, 0x02	; 2
    15dc:	8c 93       	st	X, r24
    15de:	4a c1       	rjmp	.+660    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN1);
    15e0:	a4 e3       	ldi	r26, 0x34	; 52
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e4 e3       	ldi	r30, 0x34	; 52
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8d 7f       	andi	r24, 0xFD	; 253
    15ec:	8c 93       	st	X, r24
    15ee:	42 c1       	rjmp	.+644    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN2 :
					if (Direction == OUTPUT)
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	41 f4       	brne	.+16     	; 0x1606 <DIO_SetPinDirection+0x476>
					{
						SETBIT(DDRC,PIN2);
    15f6:	a4 e3       	ldi	r26, 0x34	; 52
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e4 e3       	ldi	r30, 0x34	; 52
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8c 93       	st	X, r24
    1604:	37 c1       	rjmp	.+622    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN2);
    1606:	a4 e3       	ldi	r26, 0x34	; 52
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e4 e3       	ldi	r30, 0x34	; 52
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8b 7f       	andi	r24, 0xFB	; 251
    1612:	8c 93       	st	X, r24
    1614:	2f c1       	rjmp	.+606    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN3 :
					if (Direction == OUTPUT)
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	41 f4       	brne	.+16     	; 0x162c <DIO_SetPinDirection+0x49c>
					{
						SETBIT(DDRC,PIN3);
    161c:	a4 e3       	ldi	r26, 0x34	; 52
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e4 e3       	ldi	r30, 0x34	; 52
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	88 60       	ori	r24, 0x08	; 8
    1628:	8c 93       	st	X, r24
    162a:	24 c1       	rjmp	.+584    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN3);
    162c:	a4 e3       	ldi	r26, 0x34	; 52
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e4 e3       	ldi	r30, 0x34	; 52
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	87 7f       	andi	r24, 0xF7	; 247
    1638:	8c 93       	st	X, r24
    163a:	1c c1       	rjmp	.+568    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN4 :
					if (Direction == OUTPUT)
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	41 f4       	brne	.+16     	; 0x1652 <DIO_SetPinDirection+0x4c2>
					{
						SETBIT(DDRC,PIN4);
    1642:	a4 e3       	ldi	r26, 0x34	; 52
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e4 e3       	ldi	r30, 0x34	; 52
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 61       	ori	r24, 0x10	; 16
    164e:	8c 93       	st	X, r24
    1650:	11 c1       	rjmp	.+546    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN4);
    1652:	a4 e3       	ldi	r26, 0x34	; 52
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e4 e3       	ldi	r30, 0x34	; 52
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 7e       	andi	r24, 0xEF	; 239
    165e:	8c 93       	st	X, r24
    1660:	09 c1       	rjmp	.+530    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN5 :
					if (Direction == OUTPUT)
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	41 f4       	brne	.+16     	; 0x1678 <DIO_SetPinDirection+0x4e8>
					{
						SETBIT(DDRC,PIN5);
    1668:	a4 e3       	ldi	r26, 0x34	; 52
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e4 e3       	ldi	r30, 0x34	; 52
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 62       	ori	r24, 0x20	; 32
    1674:	8c 93       	st	X, r24
    1676:	fe c0       	rjmp	.+508    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN5);
    1678:	a4 e3       	ldi	r26, 0x34	; 52
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e4 e3       	ldi	r30, 0x34	; 52
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24
    1686:	f6 c0       	rjmp	.+492    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN6 :
					if (Direction == OUTPUT)
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	41 f4       	brne	.+16     	; 0x169e <DIO_SetPinDirection+0x50e>
					{
						SETBIT(DDRC,PIN6);
    168e:	a4 e3       	ldi	r26, 0x34	; 52
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e4 e3       	ldi	r30, 0x34	; 52
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 64       	ori	r24, 0x40	; 64
    169a:	8c 93       	st	X, r24
    169c:	eb c0       	rjmp	.+470    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN6);
    169e:	a4 e3       	ldi	r26, 0x34	; 52
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e4 e3       	ldi	r30, 0x34	; 52
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8f 7b       	andi	r24, 0xBF	; 191
    16aa:	8c 93       	st	X, r24
    16ac:	e3 c0       	rjmp	.+454    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					break;
				case PIN7 :
					if (Direction == OUTPUT)
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	41 f4       	brne	.+16     	; 0x16c4 <DIO_SetPinDirection+0x534>
					{
						SETBIT(DDRC,PIN7);
    16b4:	a4 e3       	ldi	r26, 0x34	; 52
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e4 e3       	ldi	r30, 0x34	; 52
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	80 68       	ori	r24, 0x80	; 128
    16c0:	8c 93       	st	X, r24
    16c2:	d8 c0       	rjmp	.+432    	; 0x1874 <DIO_SetPinDirection+0x6e4>
					}
					else
					{
						CLRBIT(DDRC,PIN7);
    16c4:	a4 e3       	ldi	r26, 0x34	; 52
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e4 e3       	ldi	r30, 0x34	; 52
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
    16d2:	d0 c0       	rjmp	.+416    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				default :
					break;
				}
				break;
	case PORT3 :
		switch(Pin_number)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3d 83       	std	Y+5, r19	; 0x05
    16dc:	2c 83       	std	Y+4, r18	; 0x04
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <DIO_SetPinDirection+0x55a>
    16e8:	67 c0       	rjmp	.+206    	; 0x17b8 <DIO_SetPinDirection+0x628>
    16ea:	2c 81       	ldd	r18, Y+4	; 0x04
    16ec:	3d 81       	ldd	r19, Y+5	; 0x05
    16ee:	24 30       	cpi	r18, 0x04	; 4
    16f0:	31 05       	cpc	r19, r1
    16f2:	84 f4       	brge	.+32     	; 0x1714 <DIO_SetPinDirection+0x584>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	b9 f1       	breq	.+110    	; 0x176c <DIO_SetPinDirection+0x5dc>
    16fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1700:	3d 81       	ldd	r19, Y+5	; 0x05
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	0c f0       	brlt	.+2      	; 0x170a <DIO_SetPinDirection+0x57a>
    1708:	44 c0       	rjmp	.+136    	; 0x1792 <DIO_SetPinDirection+0x602>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	d1 f0       	breq	.+52     	; 0x1746 <DIO_SetPinDirection+0x5b6>
    1712:	b0 c0       	rjmp	.+352    	; 0x1874 <DIO_SetPinDirection+0x6e4>
    1714:	2c 81       	ldd	r18, Y+4	; 0x04
    1716:	3d 81       	ldd	r19, Y+5	; 0x05
    1718:	25 30       	cpi	r18, 0x05	; 5
    171a:	31 05       	cpc	r19, r1
    171c:	09 f4       	brne	.+2      	; 0x1720 <DIO_SetPinDirection+0x590>
    171e:	72 c0       	rjmp	.+228    	; 0x1804 <DIO_SetPinDirection+0x674>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	85 30       	cpi	r24, 0x05	; 5
    1726:	91 05       	cpc	r25, r1
    1728:	0c f4       	brge	.+2      	; 0x172c <DIO_SetPinDirection+0x59c>
    172a:	59 c0       	rjmp	.+178    	; 0x17de <DIO_SetPinDirection+0x64e>
    172c:	2c 81       	ldd	r18, Y+4	; 0x04
    172e:	3d 81       	ldd	r19, Y+5	; 0x05
    1730:	26 30       	cpi	r18, 0x06	; 6
    1732:	31 05       	cpc	r19, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <DIO_SetPinDirection+0x5a8>
    1736:	79 c0       	rjmp	.+242    	; 0x182a <DIO_SetPinDirection+0x69a>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	87 30       	cpi	r24, 0x07	; 7
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <DIO_SetPinDirection+0x5b4>
    1742:	86 c0       	rjmp	.+268    	; 0x1850 <DIO_SetPinDirection+0x6c0>
    1744:	97 c0       	rjmp	.+302    	; 0x1874 <DIO_SetPinDirection+0x6e4>
		{
			case PIN0 :
				if (Direction == OUTPUT)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	41 f4       	brne	.+16     	; 0x175c <DIO_SetPinDirection+0x5cc>
				{
					SETBIT(DDRD,PIN0);
    174c:	a1 e3       	ldi	r26, 0x31	; 49
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e1 e3       	ldi	r30, 0x31	; 49
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	8c 93       	st	X, r24
    175a:	8c c0       	rjmp	.+280    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN0);
    175c:	a1 e3       	ldi	r26, 0x31	; 49
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e1 e3       	ldi	r30, 0x31	; 49
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8e 7f       	andi	r24, 0xFE	; 254
    1768:	8c 93       	st	X, r24
    176a:	84 c0       	rjmp	.+264    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN1 :
				if (Direction == OUTPUT)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	41 f4       	brne	.+16     	; 0x1782 <DIO_SetPinDirection+0x5f2>
				{
					SETBIT(DDRD,PIN1);
    1772:	a1 e3       	ldi	r26, 0x31	; 49
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e1 e3       	ldi	r30, 0x31	; 49
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	82 60       	ori	r24, 0x02	; 2
    177e:	8c 93       	st	X, r24
    1780:	79 c0       	rjmp	.+242    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN1);
    1782:	a1 e3       	ldi	r26, 0x31	; 49
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e1 e3       	ldi	r30, 0x31	; 49
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8d 7f       	andi	r24, 0xFD	; 253
    178e:	8c 93       	st	X, r24
    1790:	71 c0       	rjmp	.+226    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN2 :
				if (Direction == OUTPUT)
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	41 f4       	brne	.+16     	; 0x17a8 <DIO_SetPinDirection+0x618>
				{
					SETBIT(DDRD,PIN2);
    1798:	a1 e3       	ldi	r26, 0x31	; 49
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e1 e3       	ldi	r30, 0x31	; 49
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	84 60       	ori	r24, 0x04	; 4
    17a4:	8c 93       	st	X, r24
    17a6:	66 c0       	rjmp	.+204    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN2);
    17a8:	a1 e3       	ldi	r26, 0x31	; 49
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8b 7f       	andi	r24, 0xFB	; 251
    17b4:	8c 93       	st	X, r24
    17b6:	5e c0       	rjmp	.+188    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN3 :
				if (Direction == OUTPUT)
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	41 f4       	brne	.+16     	; 0x17ce <DIO_SetPinDirection+0x63e>
				{
					SETBIT(DDRD,PIN3);
    17be:	a1 e3       	ldi	r26, 0x31	; 49
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e1 e3       	ldi	r30, 0x31	; 49
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	88 60       	ori	r24, 0x08	; 8
    17ca:	8c 93       	st	X, r24
    17cc:	53 c0       	rjmp	.+166    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN3);
    17ce:	a1 e3       	ldi	r26, 0x31	; 49
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e1 e3       	ldi	r30, 0x31	; 49
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	87 7f       	andi	r24, 0xF7	; 247
    17da:	8c 93       	st	X, r24
    17dc:	4b c0       	rjmp	.+150    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN4 :
				if (Direction == OUTPUT)
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <DIO_SetPinDirection+0x664>
				{
					SETBIT(DDRD,PIN4);
    17e4:	a1 e3       	ldi	r26, 0x31	; 49
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e1 e3       	ldi	r30, 0x31	; 49
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 61       	ori	r24, 0x10	; 16
    17f0:	8c 93       	st	X, r24
    17f2:	40 c0       	rjmp	.+128    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN4);
    17f4:	a1 e3       	ldi	r26, 0x31	; 49
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e1 e3       	ldi	r30, 0x31	; 49
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8f 7e       	andi	r24, 0xEF	; 239
    1800:	8c 93       	st	X, r24
    1802:	38 c0       	rjmp	.+112    	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN5 :
				if (Direction == OUTPUT)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	41 f4       	brne	.+16     	; 0x181a <DIO_SetPinDirection+0x68a>
				{
					SETBIT(DDRD,PIN5);
    180a:	a1 e3       	ldi	r26, 0x31	; 49
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e3       	ldi	r30, 0x31	; 49
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 62       	ori	r24, 0x20	; 32
    1816:	8c 93       	st	X, r24
    1818:	2d c0       	rjmp	.+90     	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN5);
    181a:	a1 e3       	ldi	r26, 0x31	; 49
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e1 e3       	ldi	r30, 0x31	; 49
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8f 7d       	andi	r24, 0xDF	; 223
    1826:	8c 93       	st	X, r24
    1828:	25 c0       	rjmp	.+74     	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN6 :
				if (Direction == OUTPUT)
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	41 f4       	brne	.+16     	; 0x1840 <DIO_SetPinDirection+0x6b0>
				{
					SETBIT(DDRD,PIN6);
    1830:	a1 e3       	ldi	r26, 0x31	; 49
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e1 e3       	ldi	r30, 0x31	; 49
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 64       	ori	r24, 0x40	; 64
    183c:	8c 93       	st	X, r24
    183e:	1a c0       	rjmp	.+52     	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN6);
    1840:	a1 e3       	ldi	r26, 0x31	; 49
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e1 e3       	ldi	r30, 0x31	; 49
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 7b       	andi	r24, 0xBF	; 191
    184c:	8c 93       	st	X, r24
    184e:	12 c0       	rjmp	.+36     	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				break;
			case PIN7 :
				if (Direction == OUTPUT)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	41 f4       	brne	.+16     	; 0x1866 <DIO_SetPinDirection+0x6d6>
				{
					SETBIT(DDRD,PIN7);
    1856:	a1 e3       	ldi	r26, 0x31	; 49
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e1 e3       	ldi	r30, 0x31	; 49
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	8c 93       	st	X, r24
    1864:	07 c0       	rjmp	.+14     	; 0x1874 <DIO_SetPinDirection+0x6e4>
				}
				else
				{
					CLRBIT(DDRD,PIN7);
    1866:	a1 e3       	ldi	r26, 0x31	; 49
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e1 e3       	ldi	r30, 0x31	; 49
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 77       	andi	r24, 0x7F	; 127
    1872:	8c 93       	st	X, r24
				break;
		}
		break;
	break;
	}
}
    1874:	2d 96       	adiw	r28, 0x0d	; 13
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <DIO_SetPinPullUp>:
void DIO_SetPinPullUp    (U8 Port_number , U8 Pin_number)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	2c 97       	sbiw	r28, 0x0c	; 12
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port_number)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 87       	std	Y+12, r19	; 0x0c
    18a6:	2b 87       	std	Y+11, r18	; 0x0b
    18a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <DIO_SetPinPullUp+0x2e>
    18b2:	8b c0       	rjmp	.+278    	; 0x19ca <DIO_SetPinPullUp+0x144>
    18b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    18b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <DIO_SetPinPullUp+0x42>
    18be:	8b 85       	ldd	r24, Y+11	; 0x0b
    18c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	71 f0       	breq	.+28     	; 0x18e2 <DIO_SetPinPullUp+0x5c>
    18c6:	dc c1       	rjmp	.+952    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
    18c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    18ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <DIO_SetPinPullUp+0x4e>
    18d2:	ef c0       	rjmp	.+478    	; 0x1ab2 <DIO_SetPinPullUp+0x22c>
    18d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <DIO_SetPinPullUp+0x5a>
    18de:	5d c1       	rjmp	.+698    	; 0x1b9a <DIO_SetPinPullUp+0x314>
    18e0:	cf c1       	rjmp	.+926    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
	{
	case PORT0 :
		switch(Pin_number)
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3a 87       	std	Y+10, r19	; 0x0a
    18ea:	29 87       	std	Y+9, r18	; 0x09
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <DIO_SetPinPullUp+0x72>
    18f6:	41 c0       	rjmp	.+130    	; 0x197a <DIO_SetPinPullUp+0xf4>
    18f8:	29 85       	ldd	r18, Y+9	; 0x09
    18fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    18fc:	24 30       	cpi	r18, 0x04	; 4
    18fe:	31 05       	cpc	r19, r1
    1900:	7c f4       	brge	.+30     	; 0x1920 <DIO_SetPinPullUp+0x9a>
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	39 f1       	breq	.+78     	; 0x195a <DIO_SetPinPullUp+0xd4>
    190c:	29 85       	ldd	r18, Y+9	; 0x09
    190e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	54 f5       	brge	.+84     	; 0x196a <DIO_SetPinPullUp+0xe4>
    1916:	89 85       	ldd	r24, Y+9	; 0x09
    1918:	9a 85       	ldd	r25, Y+10	; 0x0a
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	b1 f0       	breq	.+44     	; 0x194a <DIO_SetPinPullUp+0xc4>
    191e:	b0 c1       	rjmp	.+864    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
    1920:	29 85       	ldd	r18, Y+9	; 0x09
    1922:	3a 85       	ldd	r19, Y+10	; 0x0a
    1924:	25 30       	cpi	r18, 0x05	; 5
    1926:	31 05       	cpc	r19, r1
    1928:	c1 f1       	breq	.+112    	; 0x199a <DIO_SetPinPullUp+0x114>
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	85 30       	cpi	r24, 0x05	; 5
    1930:	91 05       	cpc	r25, r1
    1932:	5c f1       	brlt	.+86     	; 0x198a <DIO_SetPinPullUp+0x104>
    1934:	29 85       	ldd	r18, Y+9	; 0x09
    1936:	3a 85       	ldd	r19, Y+10	; 0x0a
    1938:	26 30       	cpi	r18, 0x06	; 6
    193a:	31 05       	cpc	r19, r1
    193c:	b1 f1       	breq	.+108    	; 0x19aa <DIO_SetPinPullUp+0x124>
    193e:	89 85       	ldd	r24, Y+9	; 0x09
    1940:	9a 85       	ldd	r25, Y+10	; 0x0a
    1942:	87 30       	cpi	r24, 0x07	; 7
    1944:	91 05       	cpc	r25, r1
    1946:	c9 f1       	breq	.+114    	; 0x19ba <DIO_SetPinPullUp+0x134>
    1948:	9b c1       	rjmp	.+822    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
		{
		case PIN0 :
			SETBIT(PORTA,PIN0);
    194a:	ab e3       	ldi	r26, 0x3B	; 59
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	eb e3       	ldi	r30, 0x3B	; 59
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	81 60       	ori	r24, 0x01	; 1
    1956:	8c 93       	st	X, r24
    1958:	93 c1       	rjmp	.+806    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN1 :
			SETBIT(PORTA,PIN1);
    195a:	ab e3       	ldi	r26, 0x3B	; 59
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	eb e3       	ldi	r30, 0x3B	; 59
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	82 60       	ori	r24, 0x02	; 2
    1966:	8c 93       	st	X, r24
    1968:	8b c1       	rjmp	.+790    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
		case PIN2 :
			SETBIT(PORTA,PIN2);
    196a:	ab e3       	ldi	r26, 0x3B	; 59
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb e3       	ldi	r30, 0x3B	; 59
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	84 60       	ori	r24, 0x04	; 4
    1976:	8c 93       	st	X, r24
    1978:	83 c1       	rjmp	.+774    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN3 :
			SETBIT(PORTA,PIN3);
    197a:	ab e3       	ldi	r26, 0x3B	; 59
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	eb e3       	ldi	r30, 0x3B	; 59
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 60       	ori	r24, 0x08	; 8
    1986:	8c 93       	st	X, r24
    1988:	7b c1       	rjmp	.+758    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN4 :
			SETBIT(PORTA,PIN4);
    198a:	ab e3       	ldi	r26, 0x3B	; 59
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb e3       	ldi	r30, 0x3B	; 59
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 61       	ori	r24, 0x10	; 16
    1996:	8c 93       	st	X, r24
    1998:	73 c1       	rjmp	.+742    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN5 :
			SETBIT(PORTA,PIN5);
    199a:	ab e3       	ldi	r26, 0x3B	; 59
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	eb e3       	ldi	r30, 0x3B	; 59
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	8c 93       	st	X, r24
    19a8:	6b c1       	rjmp	.+726    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN6 :
			SETBIT(PORTA,PIN6);
    19aa:	ab e3       	ldi	r26, 0x3B	; 59
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	eb e3       	ldi	r30, 0x3B	; 59
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 64       	ori	r24, 0x40	; 64
    19b6:	8c 93       	st	X, r24
    19b8:	63 c1       	rjmp	.+710    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN7 :
			SETBIT(PORTA,PIN7);
    19ba:	ab e3       	ldi	r26, 0x3B	; 59
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	eb e3       	ldi	r30, 0x3B	; 59
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 68       	ori	r24, 0x80	; 128
    19c6:	8c 93       	st	X, r24
    19c8:	5b c1       	rjmp	.+694    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		}
		break;
	case PORT1 :
		switch(Pin_number)
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	38 87       	std	Y+8, r19	; 0x08
    19d2:	2f 83       	std	Y+7, r18	; 0x07
    19d4:	8f 81       	ldd	r24, Y+7	; 0x07
    19d6:	98 85       	ldd	r25, Y+8	; 0x08
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	91 05       	cpc	r25, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <DIO_SetPinPullUp+0x15a>
    19de:	41 c0       	rjmp	.+130    	; 0x1a62 <DIO_SetPinPullUp+0x1dc>
    19e0:	2f 81       	ldd	r18, Y+7	; 0x07
    19e2:	38 85       	ldd	r19, Y+8	; 0x08
    19e4:	24 30       	cpi	r18, 0x04	; 4
    19e6:	31 05       	cpc	r19, r1
    19e8:	7c f4       	brge	.+30     	; 0x1a08 <DIO_SetPinPullUp+0x182>
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	39 f1       	breq	.+78     	; 0x1a42 <DIO_SetPinPullUp+0x1bc>
    19f4:	2f 81       	ldd	r18, Y+7	; 0x07
    19f6:	38 85       	ldd	r19, Y+8	; 0x08
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	54 f5       	brge	.+84     	; 0x1a52 <DIO_SetPinPullUp+0x1cc>
    19fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1a00:	98 85       	ldd	r25, Y+8	; 0x08
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	b1 f0       	breq	.+44     	; 0x1a32 <DIO_SetPinPullUp+0x1ac>
    1a06:	3c c1       	rjmp	.+632    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
    1a08:	2f 81       	ldd	r18, Y+7	; 0x07
    1a0a:	38 85       	ldd	r19, Y+8	; 0x08
    1a0c:	25 30       	cpi	r18, 0x05	; 5
    1a0e:	31 05       	cpc	r19, r1
    1a10:	c1 f1       	breq	.+112    	; 0x1a82 <DIO_SetPinPullUp+0x1fc>
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	85 30       	cpi	r24, 0x05	; 5
    1a18:	91 05       	cpc	r25, r1
    1a1a:	5c f1       	brlt	.+86     	; 0x1a72 <DIO_SetPinPullUp+0x1ec>
    1a1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1e:	38 85       	ldd	r19, Y+8	; 0x08
    1a20:	26 30       	cpi	r18, 0x06	; 6
    1a22:	31 05       	cpc	r19, r1
    1a24:	b1 f1       	breq	.+108    	; 0x1a92 <DIO_SetPinPullUp+0x20c>
    1a26:	8f 81       	ldd	r24, Y+7	; 0x07
    1a28:	98 85       	ldd	r25, Y+8	; 0x08
    1a2a:	87 30       	cpi	r24, 0x07	; 7
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	c9 f1       	breq	.+114    	; 0x1aa2 <DIO_SetPinPullUp+0x21c>
    1a30:	27 c1       	rjmp	.+590    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
				{
				case PIN0 :
					SETBIT(PORTB,PIN0);
    1a32:	a8 e3       	ldi	r26, 0x38	; 56
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	81 60       	ori	r24, 0x01	; 1
    1a3e:	8c 93       	st	X, r24
    1a40:	1f c1       	rjmp	.+574    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN1 :
					SETBIT(PORTB,PIN1);
    1a42:	a8 e3       	ldi	r26, 0x38	; 56
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	82 60       	ori	r24, 0x02	; 2
    1a4e:	8c 93       	st	X, r24
    1a50:	17 c1       	rjmp	.+558    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
							break;
				case PIN2 :
					SETBIT(PORTB,PIN2);
    1a52:	a8 e3       	ldi	r26, 0x38	; 56
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e8 e3       	ldi	r30, 0x38	; 56
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	84 60       	ori	r24, 0x04	; 4
    1a5e:	8c 93       	st	X, r24
    1a60:	0f c1       	rjmp	.+542    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN3 :
					SETBIT(PORTB,PIN3);
    1a62:	a8 e3       	ldi	r26, 0x38	; 56
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e8 e3       	ldi	r30, 0x38	; 56
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 60       	ori	r24, 0x08	; 8
    1a6e:	8c 93       	st	X, r24
    1a70:	07 c1       	rjmp	.+526    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN4 :
					SETBIT(PORTB,PIN4);
    1a72:	a8 e3       	ldi	r26, 0x38	; 56
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e8 e3       	ldi	r30, 0x38	; 56
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 61       	ori	r24, 0x10	; 16
    1a7e:	8c 93       	st	X, r24
    1a80:	ff c0       	rjmp	.+510    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN5 :
					SETBIT(PORTB,PIN5);
    1a82:	a8 e3       	ldi	r26, 0x38	; 56
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e8 e3       	ldi	r30, 0x38	; 56
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 62       	ori	r24, 0x20	; 32
    1a8e:	8c 93       	st	X, r24
    1a90:	f7 c0       	rjmp	.+494    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN6 :
					SETBIT(PORTB,PIN6);
    1a92:	a8 e3       	ldi	r26, 0x38	; 56
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 64       	ori	r24, 0x40	; 64
    1a9e:	8c 93       	st	X, r24
    1aa0:	ef c0       	rjmp	.+478    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN7 :
					SETBIT(PORTB,PIN7);
    1aa2:	a8 e3       	ldi	r26, 0x38	; 56
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	8c 93       	st	X, r24
    1ab0:	e7 c0       	rjmp	.+462    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				}
		break;
	case PORT2 :
		switch(Pin_number)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3e 83       	std	Y+6, r19	; 0x06
    1aba:	2d 83       	std	Y+5, r18	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	83 30       	cpi	r24, 0x03	; 3
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <DIO_SetPinPullUp+0x242>
    1ac6:	41 c0       	rjmp	.+130    	; 0x1b4a <DIO_SetPinPullUp+0x2c4>
    1ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aca:	3e 81       	ldd	r19, Y+6	; 0x06
    1acc:	24 30       	cpi	r18, 0x04	; 4
    1ace:	31 05       	cpc	r19, r1
    1ad0:	7c f4       	brge	.+30     	; 0x1af0 <DIO_SetPinPullUp+0x26a>
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	39 f1       	breq	.+78     	; 0x1b2a <DIO_SetPinPullUp+0x2a4>
    1adc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ade:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	54 f5       	brge	.+84     	; 0x1b3a <DIO_SetPinPullUp+0x2b4>
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	b1 f0       	breq	.+44     	; 0x1b1a <DIO_SetPinPullUp+0x294>
    1aee:	c8 c0       	rjmp	.+400    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
    1af0:	2d 81       	ldd	r18, Y+5	; 0x05
    1af2:	3e 81       	ldd	r19, Y+6	; 0x06
    1af4:	25 30       	cpi	r18, 0x05	; 5
    1af6:	31 05       	cpc	r19, r1
    1af8:	c1 f1       	breq	.+112    	; 0x1b6a <DIO_SetPinPullUp+0x2e4>
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	85 30       	cpi	r24, 0x05	; 5
    1b00:	91 05       	cpc	r25, r1
    1b02:	5c f1       	brlt	.+86     	; 0x1b5a <DIO_SetPinPullUp+0x2d4>
    1b04:	2d 81       	ldd	r18, Y+5	; 0x05
    1b06:	3e 81       	ldd	r19, Y+6	; 0x06
    1b08:	26 30       	cpi	r18, 0x06	; 6
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	b1 f1       	breq	.+108    	; 0x1b7a <DIO_SetPinPullUp+0x2f4>
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	87 30       	cpi	r24, 0x07	; 7
    1b14:	91 05       	cpc	r25, r1
    1b16:	c9 f1       	breq	.+114    	; 0x1b8a <DIO_SetPinPullUp+0x304>
    1b18:	b3 c0       	rjmp	.+358    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
				{
				case PIN0 :
					SETBIT(PORTC,PIN0);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	81 60       	ori	r24, 0x01	; 1
    1b26:	8c 93       	st	X, r24
    1b28:	ab c0       	rjmp	.+342    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN1 :
					SETBIT(PORTC,PIN1);
    1b2a:	a5 e3       	ldi	r26, 0x35	; 53
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e3       	ldi	r30, 0x35	; 53
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	8c 93       	st	X, r24
    1b38:	a3 c0       	rjmp	.+326    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
							break;
				case PIN2 :
					SETBIT(PORTC,PIN2);
    1b3a:	a5 e3       	ldi	r26, 0x35	; 53
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	84 60       	ori	r24, 0x04	; 4
    1b46:	8c 93       	st	X, r24
    1b48:	9b c0       	rjmp	.+310    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN3 :
					SETBIT(PORTC,PIN3);
    1b4a:	a5 e3       	ldi	r26, 0x35	; 53
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e3       	ldi	r30, 0x35	; 53
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	88 60       	ori	r24, 0x08	; 8
    1b56:	8c 93       	st	X, r24
    1b58:	93 c0       	rjmp	.+294    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN4 :
					SETBIT(PORTC,PIN4);
    1b5a:	a5 e3       	ldi	r26, 0x35	; 53
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e5 e3       	ldi	r30, 0x35	; 53
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 61       	ori	r24, 0x10	; 16
    1b66:	8c 93       	st	X, r24
    1b68:	8b c0       	rjmp	.+278    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN5 :
					SETBIT(PORTC,PIN5);
    1b6a:	a5 e3       	ldi	r26, 0x35	; 53
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e5 e3       	ldi	r30, 0x35	; 53
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	80 62       	ori	r24, 0x20	; 32
    1b76:	8c 93       	st	X, r24
    1b78:	83 c0       	rjmp	.+262    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN6 :
					SETBIT(PORTC,PIN6);
    1b7a:	a5 e3       	ldi	r26, 0x35	; 53
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e3       	ldi	r30, 0x35	; 53
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	80 64       	ori	r24, 0x40	; 64
    1b86:	8c 93       	st	X, r24
    1b88:	7b c0       	rjmp	.+246    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				case PIN7 :
					SETBIT(PORTC,PIN7);
    1b8a:	a5 e3       	ldi	r26, 0x35	; 53
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 68       	ori	r24, 0x80	; 128
    1b96:	8c 93       	st	X, r24
    1b98:	73 c0       	rjmp	.+230    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
					break;
				}
		break;
	case PORT3 :
		switch(Pin_number)
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3c 83       	std	Y+4, r19	; 0x04
    1ba2:	2b 83       	std	Y+3, r18	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <DIO_SetPinPullUp+0x32a>
    1bae:	41 c0       	rjmp	.+130    	; 0x1c32 <DIO_SetPinPullUp+0x3ac>
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb4:	24 30       	cpi	r18, 0x04	; 4
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	7c f4       	brge	.+30     	; 0x1bd8 <DIO_SetPinPullUp+0x352>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	39 f1       	breq	.+78     	; 0x1c12 <DIO_SetPinPullUp+0x38c>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	54 f5       	brge	.+84     	; 0x1c22 <DIO_SetPinPullUp+0x39c>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	b1 f0       	breq	.+44     	; 0x1c02 <DIO_SetPinPullUp+0x37c>
    1bd6:	54 c0       	rjmp	.+168    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	25 30       	cpi	r18, 0x05	; 5
    1bde:	31 05       	cpc	r19, r1
    1be0:	c1 f1       	breq	.+112    	; 0x1c52 <DIO_SetPinPullUp+0x3cc>
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	85 30       	cpi	r24, 0x05	; 5
    1be8:	91 05       	cpc	r25, r1
    1bea:	5c f1       	brlt	.+86     	; 0x1c42 <DIO_SetPinPullUp+0x3bc>
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	26 30       	cpi	r18, 0x06	; 6
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	b1 f1       	breq	.+108    	; 0x1c62 <DIO_SetPinPullUp+0x3dc>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	87 30       	cpi	r24, 0x07	; 7
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	c9 f1       	breq	.+114    	; 0x1c72 <DIO_SetPinPullUp+0x3ec>
    1c00:	3f c0       	rjmp	.+126    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
		{
		case PIN0 :
			SETBIT(PORTD,PIN0);
    1c02:	a2 e3       	ldi	r26, 0x32	; 50
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e2 e3       	ldi	r30, 0x32	; 50
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	81 60       	ori	r24, 0x01	; 1
    1c0e:	8c 93       	st	X, r24
    1c10:	37 c0       	rjmp	.+110    	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN1 :
			SETBIT(PORTD,PIN1);
    1c12:	a2 e3       	ldi	r26, 0x32	; 50
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e2 e3       	ldi	r30, 0x32	; 50
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	82 60       	ori	r24, 0x02	; 2
    1c1e:	8c 93       	st	X, r24
    1c20:	2f c0       	rjmp	.+94     	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN2 :
			SETBIT(PORTD,PIN2);
    1c22:	a2 e3       	ldi	r26, 0x32	; 50
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e2 e3       	ldi	r30, 0x32	; 50
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	84 60       	ori	r24, 0x04	; 4
    1c2e:	8c 93       	st	X, r24
    1c30:	27 c0       	rjmp	.+78     	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN3 :
			SETBIT(PORTD,PIN3);
    1c32:	a2 e3       	ldi	r26, 0x32	; 50
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e2 e3       	ldi	r30, 0x32	; 50
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 60       	ori	r24, 0x08	; 8
    1c3e:	8c 93       	st	X, r24
    1c40:	1f c0       	rjmp	.+62     	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN4 :
			SETBIT(PORTD,PIN4);
    1c42:	a2 e3       	ldi	r26, 0x32	; 50
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e2 e3       	ldi	r30, 0x32	; 50
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 61       	ori	r24, 0x10	; 16
    1c4e:	8c 93       	st	X, r24
    1c50:	17 c0       	rjmp	.+46     	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN5 :
			SETBIT(PORTD,PIN5);
    1c52:	a2 e3       	ldi	r26, 0x32	; 50
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e2 e3       	ldi	r30, 0x32	; 50
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 62       	ori	r24, 0x20	; 32
    1c5e:	8c 93       	st	X, r24
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN6 :
			SETBIT(PORTD,PIN6);
    1c62:	a2 e3       	ldi	r26, 0x32	; 50
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e2 e3       	ldi	r30, 0x32	; 50
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 64       	ori	r24, 0x40	; 64
    1c6e:	8c 93       	st	X, r24
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <DIO_SetPinPullUp+0x3fa>
			break;
		case PIN7 :
			SETBIT(PORTD,PIN7);
    1c72:	a2 e3       	ldi	r26, 0x32	; 50
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e2 e3       	ldi	r30, 0x32	; 50
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 68       	ori	r24, 0x80	; 128
    1c7e:	8c 93       	st	X, r24
			break;
		}
		break;
	}
}
    1c80:	2c 96       	adiw	r28, 0x0c	; 12
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <DIO_SetPinValue>:
void DIO_SetPinValue 	 (U8 Port_number , U8 Pin_number,U8 Value)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	2d 97       	sbiw	r28, 0x0d	; 13
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	6a 83       	std	Y+2, r22	; 0x02
    1caa:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port_number)
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	3d 87       	std	Y+13, r19	; 0x0d
    1cb4:	2c 87       	std	Y+12, r18	; 0x0c
    1cb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <DIO_SetPinValue+0x30>
    1cc0:	e8 c0       	rjmp	.+464    	; 0x1e92 <DIO_SetPinValue+0x200>
    1cc2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cc4:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <DIO_SetPinValue+0x44>
    1ccc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cce:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	71 f0       	breq	.+28     	; 0x1cf0 <DIO_SetPinValue+0x5e>
    1cd4:	50 c3       	rjmp	.+1696   	; 0x2376 <DIO_SetPinValue+0x6e4>
    1cd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cd8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <DIO_SetPinValue+0x50>
    1ce0:	a9 c1       	rjmp	.+850    	; 0x2034 <DIO_SetPinValue+0x3a2>
    1ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ce4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <DIO_SetPinValue+0x5c>
    1cec:	74 c2       	rjmp	.+1256   	; 0x21d6 <DIO_SetPinValue+0x544>
    1cee:	43 c3       	rjmp	.+1670   	; 0x2376 <DIO_SetPinValue+0x6e4>
	{
	case PORT0 :
		switch(Pin_number)
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3b 87       	std	Y+11, r19	; 0x0b
    1cf8:	2a 87       	std	Y+10, r18	; 0x0a
    1cfa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cfc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <DIO_SetPinValue+0x74>
    1d04:	67 c0       	rjmp	.+206    	; 0x1dd4 <DIO_SetPinValue+0x142>
    1d06:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d08:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d0a:	24 30       	cpi	r18, 0x04	; 4
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	84 f4       	brge	.+32     	; 0x1d30 <DIO_SetPinValue+0x9e>
    1d10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	91 05       	cpc	r25, r1
    1d18:	b9 f1       	breq	.+110    	; 0x1d88 <DIO_SetPinValue+0xf6>
    1d1a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d1c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d1e:	22 30       	cpi	r18, 0x02	; 2
    1d20:	31 05       	cpc	r19, r1
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <DIO_SetPinValue+0x94>
    1d24:	44 c0       	rjmp	.+136    	; 0x1dae <DIO_SetPinValue+0x11c>
    1d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	d1 f0       	breq	.+52     	; 0x1d62 <DIO_SetPinValue+0xd0>
    1d2e:	23 c3       	rjmp	.+1606   	; 0x2376 <DIO_SetPinValue+0x6e4>
    1d30:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d32:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d34:	25 30       	cpi	r18, 0x05	; 5
    1d36:	31 05       	cpc	r19, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <DIO_SetPinValue+0xaa>
    1d3a:	72 c0       	rjmp	.+228    	; 0x1e20 <DIO_SetPinValue+0x18e>
    1d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d40:	85 30       	cpi	r24, 0x05	; 5
    1d42:	91 05       	cpc	r25, r1
    1d44:	0c f4       	brge	.+2      	; 0x1d48 <DIO_SetPinValue+0xb6>
    1d46:	59 c0       	rjmp	.+178    	; 0x1dfa <DIO_SetPinValue+0x168>
    1d48:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d4c:	26 30       	cpi	r18, 0x06	; 6
    1d4e:	31 05       	cpc	r19, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <DIO_SetPinValue+0xc2>
    1d52:	79 c0       	rjmp	.+242    	; 0x1e46 <DIO_SetPinValue+0x1b4>
    1d54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d58:	87 30       	cpi	r24, 0x07	; 7
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <DIO_SetPinValue+0xce>
    1d5e:	86 c0       	rjmp	.+268    	; 0x1e6c <DIO_SetPinValue+0x1da>
    1d60:	0a c3       	rjmp	.+1556   	; 0x2376 <DIO_SetPinValue+0x6e4>
		{
		case PIN0 :
			if(Value == 0)
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	88 23       	and	r24, r24
    1d66:	41 f4       	brne	.+16     	; 0x1d78 <DIO_SetPinValue+0xe6>
			{
				CLRBIT(PORTA,PIN0);
    1d68:	ab e3       	ldi	r26, 0x3B	; 59
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	eb e3       	ldi	r30, 0x3B	; 59
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	8e 7f       	andi	r24, 0xFE	; 254
    1d74:	8c 93       	st	X, r24
    1d76:	ff c2       	rjmp	.+1534   	; 0x2376 <DIO_SetPinValue+0x6e4>
			}
			else
			{
				SETBIT(PORTA,PIN0);
    1d78:	ab e3       	ldi	r26, 0x3B	; 59
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	eb e3       	ldi	r30, 0x3B	; 59
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	81 60       	ori	r24, 0x01	; 1
    1d84:	8c 93       	st	X, r24
    1d86:	f7 c2       	rjmp	.+1518   	; 0x2376 <DIO_SetPinValue+0x6e4>
			}
			break;
		case PIN1 :
			if(Value == 0)
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	88 23       	and	r24, r24
    1d8c:	41 f4       	brne	.+16     	; 0x1d9e <DIO_SetPinValue+0x10c>
				{
					CLRBIT(PORTA,PIN1);
    1d8e:	ab e3       	ldi	r26, 0x3B	; 59
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	eb e3       	ldi	r30, 0x3B	; 59
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8d 7f       	andi	r24, 0xFD	; 253
    1d9a:	8c 93       	st	X, r24
    1d9c:	ec c2       	rjmp	.+1496   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				else
				{
					SETBIT(PORTA,PIN1);
    1d9e:	ab e3       	ldi	r26, 0x3B	; 59
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	eb e3       	ldi	r30, 0x3B	; 59
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	82 60       	ori	r24, 0x02	; 2
    1daa:	8c 93       	st	X, r24
    1dac:	e4 c2       	rjmp	.+1480   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
			break;
		case PIN2 :
			if(Value == 0)
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	88 23       	and	r24, r24
    1db2:	41 f4       	brne	.+16     	; 0x1dc4 <DIO_SetPinValue+0x132>
				{
					CLRBIT(PORTA,PIN2);
    1db4:	ab e3       	ldi	r26, 0x3B	; 59
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	eb e3       	ldi	r30, 0x3B	; 59
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8b 7f       	andi	r24, 0xFB	; 251
    1dc0:	8c 93       	st	X, r24
    1dc2:	d9 c2       	rjmp	.+1458   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				else
				{
					SETBIT(PORTA,PIN2);
    1dc4:	ab e3       	ldi	r26, 0x3B	; 59
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e3       	ldi	r30, 0x3B	; 59
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	84 60       	ori	r24, 0x04	; 4
    1dd0:	8c 93       	st	X, r24
    1dd2:	d1 c2       	rjmp	.+1442   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				break;
		case PIN3 :
			if(Value == 0)
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	88 23       	and	r24, r24
    1dd8:	41 f4       	brne	.+16     	; 0x1dea <DIO_SetPinValue+0x158>
				{
					CLRBIT(PORTA,PIN3);
    1dda:	ab e3       	ldi	r26, 0x3B	; 59
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	eb e3       	ldi	r30, 0x3B	; 59
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	87 7f       	andi	r24, 0xF7	; 247
    1de6:	8c 93       	st	X, r24
    1de8:	c6 c2       	rjmp	.+1420   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				else
				{
				SETBIT(PORTA,PIN3);
    1dea:	ab e3       	ldi	r26, 0x3B	; 59
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb e3       	ldi	r30, 0x3B	; 59
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	88 60       	ori	r24, 0x08	; 8
    1df6:	8c 93       	st	X, r24
    1df8:	be c2       	rjmp	.+1404   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				break;
		case PIN4 :
			if(Value == 0)
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 23       	and	r24, r24
    1dfe:	41 f4       	brne	.+16     	; 0x1e10 <DIO_SetPinValue+0x17e>
				{
					CLRBIT(PORTA,PIN4);
    1e00:	ab e3       	ldi	r26, 0x3B	; 59
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	eb e3       	ldi	r30, 0x3B	; 59
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8f 7e       	andi	r24, 0xEF	; 239
    1e0c:	8c 93       	st	X, r24
    1e0e:	b3 c2       	rjmp	.+1382   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				else
				{
					SETBIT(PORTA,PIN4);
    1e10:	ab e3       	ldi	r26, 0x3B	; 59
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	eb e3       	ldi	r30, 0x3B	; 59
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 61       	ori	r24, 0x10	; 16
    1e1c:	8c 93       	st	X, r24
    1e1e:	ab c2       	rjmp	.+1366   	; 0x2376 <DIO_SetPinValue+0x6e4>
				}
				break;
		case PIN5 :
			if(Value == 0)
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	88 23       	and	r24, r24
    1e24:	41 f4       	brne	.+16     	; 0x1e36 <DIO_SetPinValue+0x1a4>
						{
							CLRBIT(PORTA,PIN5);
    1e26:	ab e3       	ldi	r26, 0x3B	; 59
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	eb e3       	ldi	r30, 0x3B	; 59
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8f 7d       	andi	r24, 0xDF	; 223
    1e32:	8c 93       	st	X, r24
    1e34:	a0 c2       	rjmp	.+1344   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTA,PIN5);
    1e36:	ab e3       	ldi	r26, 0x3B	; 59
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	eb e3       	ldi	r30, 0x3B	; 59
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 62       	ori	r24, 0x20	; 32
    1e42:	8c 93       	st	X, r24
    1e44:	98 c2       	rjmp	.+1328   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
					break;
		case PIN6 :
			if(Value == 0)
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	88 23       	and	r24, r24
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <DIO_SetPinValue+0x1ca>
						{
							CLRBIT(PORTA,PIN6);
    1e4c:	ab e3       	ldi	r26, 0x3B	; 59
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e3       	ldi	r30, 0x3B	; 59
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8f 7b       	andi	r24, 0xBF	; 191
    1e58:	8c 93       	st	X, r24
    1e5a:	8d c2       	rjmp	.+1306   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTA,PIN6);
    1e5c:	ab e3       	ldi	r26, 0x3B	; 59
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	80 64       	ori	r24, 0x40	; 64
    1e68:	8c 93       	st	X, r24
    1e6a:	85 c2       	rjmp	.+1290   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
					break;
		case PIN7 :
			if(Value == 0)
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	88 23       	and	r24, r24
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <DIO_SetPinValue+0x1f0>
						{
							CLRBIT(PORTA,PIN7);
    1e72:	ab e3       	ldi	r26, 0x3B	; 59
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	eb e3       	ldi	r30, 0x3B	; 59
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8f 77       	andi	r24, 0x7F	; 127
    1e7e:	8c 93       	st	X, r24
    1e80:	7a c2       	rjmp	.+1268   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTA,PIN7);
    1e82:	ab e3       	ldi	r26, 0x3B	; 59
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	eb e3       	ldi	r30, 0x3B	; 59
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 68       	ori	r24, 0x80	; 128
    1e8e:	8c 93       	st	X, r24
    1e90:	72 c2       	rjmp	.+1252   	; 0x2376 <DIO_SetPinValue+0x6e4>
					break;

		}
		break;
	case PORT1 :
		switch(Pin_number)
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	39 87       	std	Y+9, r19	; 0x09
    1e9a:	28 87       	std	Y+8, r18	; 0x08
    1e9c:	88 85       	ldd	r24, Y+8	; 0x08
    1e9e:	99 85       	ldd	r25, Y+9	; 0x09
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <DIO_SetPinValue+0x216>
    1ea6:	67 c0       	rjmp	.+206    	; 0x1f76 <DIO_SetPinValue+0x2e4>
    1ea8:	28 85       	ldd	r18, Y+8	; 0x08
    1eaa:	39 85       	ldd	r19, Y+9	; 0x09
    1eac:	24 30       	cpi	r18, 0x04	; 4
    1eae:	31 05       	cpc	r19, r1
    1eb0:	84 f4       	brge	.+32     	; 0x1ed2 <DIO_SetPinValue+0x240>
    1eb2:	88 85       	ldd	r24, Y+8	; 0x08
    1eb4:	99 85       	ldd	r25, Y+9	; 0x09
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	b9 f1       	breq	.+110    	; 0x1f2a <DIO_SetPinValue+0x298>
    1ebc:	28 85       	ldd	r18, Y+8	; 0x08
    1ebe:	39 85       	ldd	r19, Y+9	; 0x09
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	0c f0       	brlt	.+2      	; 0x1ec8 <DIO_SetPinValue+0x236>
    1ec6:	44 c0       	rjmp	.+136    	; 0x1f50 <DIO_SetPinValue+0x2be>
    1ec8:	88 85       	ldd	r24, Y+8	; 0x08
    1eca:	99 85       	ldd	r25, Y+9	; 0x09
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <DIO_SetPinValue+0x272>
    1ed0:	52 c2       	rjmp	.+1188   	; 0x2376 <DIO_SetPinValue+0x6e4>
    1ed2:	28 85       	ldd	r18, Y+8	; 0x08
    1ed4:	39 85       	ldd	r19, Y+9	; 0x09
    1ed6:	25 30       	cpi	r18, 0x05	; 5
    1ed8:	31 05       	cpc	r19, r1
    1eda:	09 f4       	brne	.+2      	; 0x1ede <DIO_SetPinValue+0x24c>
    1edc:	72 c0       	rjmp	.+228    	; 0x1fc2 <DIO_SetPinValue+0x330>
    1ede:	88 85       	ldd	r24, Y+8	; 0x08
    1ee0:	99 85       	ldd	r25, Y+9	; 0x09
    1ee2:	85 30       	cpi	r24, 0x05	; 5
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	0c f4       	brge	.+2      	; 0x1eea <DIO_SetPinValue+0x258>
    1ee8:	59 c0       	rjmp	.+178    	; 0x1f9c <DIO_SetPinValue+0x30a>
    1eea:	28 85       	ldd	r18, Y+8	; 0x08
    1eec:	39 85       	ldd	r19, Y+9	; 0x09
    1eee:	26 30       	cpi	r18, 0x06	; 6
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <DIO_SetPinValue+0x264>
    1ef4:	79 c0       	rjmp	.+242    	; 0x1fe8 <DIO_SetPinValue+0x356>
    1ef6:	88 85       	ldd	r24, Y+8	; 0x08
    1ef8:	99 85       	ldd	r25, Y+9	; 0x09
    1efa:	87 30       	cpi	r24, 0x07	; 7
    1efc:	91 05       	cpc	r25, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <DIO_SetPinValue+0x270>
    1f00:	86 c0       	rjmp	.+268    	; 0x200e <DIO_SetPinValue+0x37c>
    1f02:	39 c2       	rjmp	.+1138   	; 0x2376 <DIO_SetPinValue+0x6e4>
				{
				case PIN0 :
					if(Value == 0)
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 23       	and	r24, r24
    1f08:	41 f4       	brne	.+16     	; 0x1f1a <DIO_SetPinValue+0x288>
					{
						CLRBIT(PORTB,PIN0);
    1f0a:	a8 e3       	ldi	r26, 0x38	; 56
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e8 e3       	ldi	r30, 0x38	; 56
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8e 7f       	andi	r24, 0xFE	; 254
    1f16:	8c 93       	st	X, r24
    1f18:	2e c2       	rjmp	.+1116   	; 0x2376 <DIO_SetPinValue+0x6e4>
					}
					else
					{
						SETBIT(PORTB,PIN0);
    1f1a:	a8 e3       	ldi	r26, 0x38	; 56
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e8 e3       	ldi	r30, 0x38	; 56
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	81 60       	ori	r24, 0x01	; 1
    1f26:	8c 93       	st	X, r24
    1f28:	26 c2       	rjmp	.+1100   	; 0x2376 <DIO_SetPinValue+0x6e4>
					}
					break;
				case PIN1 :
					if(Value == 0)
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	88 23       	and	r24, r24
    1f2e:	41 f4       	brne	.+16     	; 0x1f40 <DIO_SetPinValue+0x2ae>
						{
							CLRBIT(PORTB,PIN1);
    1f30:	a8 e3       	ldi	r26, 0x38	; 56
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8d 7f       	andi	r24, 0xFD	; 253
    1f3c:	8c 93       	st	X, r24
    1f3e:	1b c2       	rjmp	.+1078   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTB,PIN1);
    1f40:	a8 e3       	ldi	r26, 0x38	; 56
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e8 e3       	ldi	r30, 0x38	; 56
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	82 60       	ori	r24, 0x02	; 2
    1f4c:	8c 93       	st	X, r24
    1f4e:	13 c2       	rjmp	.+1062   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
					break;
				case PIN2 :
					if(Value == 0)
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	88 23       	and	r24, r24
    1f54:	41 f4       	brne	.+16     	; 0x1f66 <DIO_SetPinValue+0x2d4>
						{
							CLRBIT(PORTB,PIN2);
    1f56:	a8 e3       	ldi	r26, 0x38	; 56
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e8 e3       	ldi	r30, 0x38	; 56
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8b 7f       	andi	r24, 0xFB	; 251
    1f62:	8c 93       	st	X, r24
    1f64:	08 c2       	rjmp	.+1040   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTB,PIN2);
    1f66:	a8 e3       	ldi	r26, 0x38	; 56
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e8 e3       	ldi	r30, 0x38	; 56
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	84 60       	ori	r24, 0x04	; 4
    1f72:	8c 93       	st	X, r24
    1f74:	00 c2       	rjmp	.+1024   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN3 :
					if(Value == 0)
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 23       	and	r24, r24
    1f7a:	41 f4       	brne	.+16     	; 0x1f8c <DIO_SetPinValue+0x2fa>
						{
							CLRBIT(PORTB,PIN3);
    1f7c:	a8 e3       	ldi	r26, 0x38	; 56
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e8 e3       	ldi	r30, 0x38	; 56
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	87 7f       	andi	r24, 0xF7	; 247
    1f88:	8c 93       	st	X, r24
    1f8a:	f5 c1       	rjmp	.+1002   	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
						SETBIT(PORTB,PIN3);
    1f8c:	a8 e3       	ldi	r26, 0x38	; 56
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e8 e3       	ldi	r30, 0x38	; 56
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 60       	ori	r24, 0x08	; 8
    1f98:	8c 93       	st	X, r24
    1f9a:	ed c1       	rjmp	.+986    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN4 :
					if(Value == 0)
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	88 23       	and	r24, r24
    1fa0:	41 f4       	brne	.+16     	; 0x1fb2 <DIO_SetPinValue+0x320>
						{
							CLRBIT(PORTB,PIN4);
    1fa2:	a8 e3       	ldi	r26, 0x38	; 56
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e8 e3       	ldi	r30, 0x38	; 56
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8f 7e       	andi	r24, 0xEF	; 239
    1fae:	8c 93       	st	X, r24
    1fb0:	e2 c1       	rjmp	.+964    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTB,PIN4);
    1fb2:	a8 e3       	ldi	r26, 0x38	; 56
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e8 e3       	ldi	r30, 0x38	; 56
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 61       	ori	r24, 0x10	; 16
    1fbe:	8c 93       	st	X, r24
    1fc0:	da c1       	rjmp	.+948    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN5 :
					if(Value == 0)
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	88 23       	and	r24, r24
    1fc6:	41 f4       	brne	.+16     	; 0x1fd8 <DIO_SetPinValue+0x346>
								{
									CLRBIT(PORTB,PIN5);
    1fc8:	a8 e3       	ldi	r26, 0x38	; 56
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e8 e3       	ldi	r30, 0x38	; 56
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8f 7d       	andi	r24, 0xDF	; 223
    1fd4:	8c 93       	st	X, r24
    1fd6:	cf c1       	rjmp	.+926    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTB,PIN5);
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 62       	ori	r24, 0x20	; 32
    1fe4:	8c 93       	st	X, r24
    1fe6:	c7 c1       	rjmp	.+910    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
							break;
				case PIN6 :
					if(Value == 0)
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 23       	and	r24, r24
    1fec:	41 f4       	brne	.+16     	; 0x1ffe <DIO_SetPinValue+0x36c>
								{
									CLRBIT(PORTB,PIN6);
    1fee:	a8 e3       	ldi	r26, 0x38	; 56
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e8 e3       	ldi	r30, 0x38	; 56
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 7b       	andi	r24, 0xBF	; 191
    1ffa:	8c 93       	st	X, r24
    1ffc:	bc c1       	rjmp	.+888    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTB,PIN6);
    1ffe:	a8 e3       	ldi	r26, 0x38	; 56
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 64       	ori	r24, 0x40	; 64
    200a:	8c 93       	st	X, r24
    200c:	b4 c1       	rjmp	.+872    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
							break;
				case PIN7 :
					if(Value == 0)
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 23       	and	r24, r24
    2012:	41 f4       	brne	.+16     	; 0x2024 <DIO_SetPinValue+0x392>
								{
									CLRBIT(PORTB,PIN7);
    2014:	a8 e3       	ldi	r26, 0x38	; 56
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e8 e3       	ldi	r30, 0x38	; 56
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	8f 77       	andi	r24, 0x7F	; 127
    2020:	8c 93       	st	X, r24
    2022:	a9 c1       	rjmp	.+850    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTB,PIN7);
    2024:	a8 e3       	ldi	r26, 0x38	; 56
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e8 e3       	ldi	r30, 0x38	; 56
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	80 68       	ori	r24, 0x80	; 128
    2030:	8c 93       	st	X, r24
    2032:	a1 c1       	rjmp	.+834    	; 0x2376 <DIO_SetPinValue+0x6e4>
							break;

				}
		break;
	case PORT2 :
		switch(Pin_number)
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	3f 83       	std	Y+7, r19	; 0x07
    203c:	2e 83       	std	Y+6, r18	; 0x06
    203e:	8e 81       	ldd	r24, Y+6	; 0x06
    2040:	9f 81       	ldd	r25, Y+7	; 0x07
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <DIO_SetPinValue+0x3b8>
    2048:	67 c0       	rjmp	.+206    	; 0x2118 <DIO_SetPinValue+0x486>
    204a:	2e 81       	ldd	r18, Y+6	; 0x06
    204c:	3f 81       	ldd	r19, Y+7	; 0x07
    204e:	24 30       	cpi	r18, 0x04	; 4
    2050:	31 05       	cpc	r19, r1
    2052:	84 f4       	brge	.+32     	; 0x2074 <DIO_SetPinValue+0x3e2>
    2054:	8e 81       	ldd	r24, Y+6	; 0x06
    2056:	9f 81       	ldd	r25, Y+7	; 0x07
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	91 05       	cpc	r25, r1
    205c:	b9 f1       	breq	.+110    	; 0x20cc <DIO_SetPinValue+0x43a>
    205e:	2e 81       	ldd	r18, Y+6	; 0x06
    2060:	3f 81       	ldd	r19, Y+7	; 0x07
    2062:	22 30       	cpi	r18, 0x02	; 2
    2064:	31 05       	cpc	r19, r1
    2066:	0c f0       	brlt	.+2      	; 0x206a <DIO_SetPinValue+0x3d8>
    2068:	44 c0       	rjmp	.+136    	; 0x20f2 <DIO_SetPinValue+0x460>
    206a:	8e 81       	ldd	r24, Y+6	; 0x06
    206c:	9f 81       	ldd	r25, Y+7	; 0x07
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	d1 f0       	breq	.+52     	; 0x20a6 <DIO_SetPinValue+0x414>
    2072:	81 c1       	rjmp	.+770    	; 0x2376 <DIO_SetPinValue+0x6e4>
    2074:	2e 81       	ldd	r18, Y+6	; 0x06
    2076:	3f 81       	ldd	r19, Y+7	; 0x07
    2078:	25 30       	cpi	r18, 0x05	; 5
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <DIO_SetPinValue+0x3ee>
    207e:	72 c0       	rjmp	.+228    	; 0x2164 <DIO_SetPinValue+0x4d2>
    2080:	8e 81       	ldd	r24, Y+6	; 0x06
    2082:	9f 81       	ldd	r25, Y+7	; 0x07
    2084:	85 30       	cpi	r24, 0x05	; 5
    2086:	91 05       	cpc	r25, r1
    2088:	0c f4       	brge	.+2      	; 0x208c <DIO_SetPinValue+0x3fa>
    208a:	59 c0       	rjmp	.+178    	; 0x213e <DIO_SetPinValue+0x4ac>
    208c:	2e 81       	ldd	r18, Y+6	; 0x06
    208e:	3f 81       	ldd	r19, Y+7	; 0x07
    2090:	26 30       	cpi	r18, 0x06	; 6
    2092:	31 05       	cpc	r19, r1
    2094:	09 f4       	brne	.+2      	; 0x2098 <DIO_SetPinValue+0x406>
    2096:	79 c0       	rjmp	.+242    	; 0x218a <DIO_SetPinValue+0x4f8>
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	9f 81       	ldd	r25, Y+7	; 0x07
    209c:	87 30       	cpi	r24, 0x07	; 7
    209e:	91 05       	cpc	r25, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <DIO_SetPinValue+0x412>
    20a2:	86 c0       	rjmp	.+268    	; 0x21b0 <DIO_SetPinValue+0x51e>
    20a4:	68 c1       	rjmp	.+720    	; 0x2376 <DIO_SetPinValue+0x6e4>
				{
				case PIN0 :
					if(Value == 0)
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	88 23       	and	r24, r24
    20aa:	41 f4       	brne	.+16     	; 0x20bc <DIO_SetPinValue+0x42a>
					{
						CLRBIT(PORTC,PIN0);
    20ac:	a5 e3       	ldi	r26, 0x35	; 53
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e5 e3       	ldi	r30, 0x35	; 53
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8e 7f       	andi	r24, 0xFE	; 254
    20b8:	8c 93       	st	X, r24
    20ba:	5d c1       	rjmp	.+698    	; 0x2376 <DIO_SetPinValue+0x6e4>
					}
					else
					{
						SETBIT(PORTC,PIN0);
    20bc:	a5 e3       	ldi	r26, 0x35	; 53
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e5 e3       	ldi	r30, 0x35	; 53
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	81 60       	ori	r24, 0x01	; 1
    20c8:	8c 93       	st	X, r24
    20ca:	55 c1       	rjmp	.+682    	; 0x2376 <DIO_SetPinValue+0x6e4>
					}
					break;
				case PIN1 :
					if(Value == 0)
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	88 23       	and	r24, r24
    20d0:	41 f4       	brne	.+16     	; 0x20e2 <DIO_SetPinValue+0x450>
						{
							CLRBIT(PORTC,PIN1);
    20d2:	a5 e3       	ldi	r26, 0x35	; 53
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e5 e3       	ldi	r30, 0x35	; 53
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8d 7f       	andi	r24, 0xFD	; 253
    20de:	8c 93       	st	X, r24
    20e0:	4a c1       	rjmp	.+660    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTC,PIN1);
    20e2:	a5 e3       	ldi	r26, 0x35	; 53
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e5 e3       	ldi	r30, 0x35	; 53
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	82 60       	ori	r24, 0x02	; 2
    20ee:	8c 93       	st	X, r24
    20f0:	42 c1       	rjmp	.+644    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
					break;
				case PIN2 :
					if(Value == 0)
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	88 23       	and	r24, r24
    20f6:	41 f4       	brne	.+16     	; 0x2108 <DIO_SetPinValue+0x476>
						{
							CLRBIT(PORTC,PIN2);
    20f8:	a5 e3       	ldi	r26, 0x35	; 53
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e5 e3       	ldi	r30, 0x35	; 53
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8b 7f       	andi	r24, 0xFB	; 251
    2104:	8c 93       	st	X, r24
    2106:	37 c1       	rjmp	.+622    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTC,PIN2);
    2108:	a5 e3       	ldi	r26, 0x35	; 53
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e3       	ldi	r30, 0x35	; 53
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	84 60       	ori	r24, 0x04	; 4
    2114:	8c 93       	st	X, r24
    2116:	2f c1       	rjmp	.+606    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN3 :
					if(Value == 0)
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	88 23       	and	r24, r24
    211c:	41 f4       	brne	.+16     	; 0x212e <DIO_SetPinValue+0x49c>
						{
							CLRBIT(PORTC,PIN3);
    211e:	a5 e3       	ldi	r26, 0x35	; 53
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e5 e3       	ldi	r30, 0x35	; 53
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	87 7f       	andi	r24, 0xF7	; 247
    212a:	8c 93       	st	X, r24
    212c:	24 c1       	rjmp	.+584    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
						SETBIT(PORTC,PIN3);
    212e:	a5 e3       	ldi	r26, 0x35	; 53
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e3       	ldi	r30, 0x35	; 53
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	88 60       	ori	r24, 0x08	; 8
    213a:	8c 93       	st	X, r24
    213c:	1c c1       	rjmp	.+568    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN4 :
					if(Value == 0)
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	88 23       	and	r24, r24
    2142:	41 f4       	brne	.+16     	; 0x2154 <DIO_SetPinValue+0x4c2>
						{
							CLRBIT(PORTC,PIN4);
    2144:	a5 e3       	ldi	r26, 0x35	; 53
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e5 e3       	ldi	r30, 0x35	; 53
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7e       	andi	r24, 0xEF	; 239
    2150:	8c 93       	st	X, r24
    2152:	11 c1       	rjmp	.+546    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTC,PIN4);
    2154:	a5 e3       	ldi	r26, 0x35	; 53
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e5 e3       	ldi	r30, 0x35	; 53
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 61       	ori	r24, 0x10	; 16
    2160:	8c 93       	st	X, r24
    2162:	09 c1       	rjmp	.+530    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN5 :
					if(Value == 0)
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	88 23       	and	r24, r24
    2168:	41 f4       	brne	.+16     	; 0x217a <DIO_SetPinValue+0x4e8>
								{
									CLRBIT(PORTC,PIN5);
    216a:	a5 e3       	ldi	r26, 0x35	; 53
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e5 e3       	ldi	r30, 0x35	; 53
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8f 7d       	andi	r24, 0xDF	; 223
    2176:	8c 93       	st	X, r24
    2178:	fe c0       	rjmp	.+508    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTC,PIN5);
    217a:	a5 e3       	ldi	r26, 0x35	; 53
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e5 e3       	ldi	r30, 0x35	; 53
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 62       	ori	r24, 0x20	; 32
    2186:	8c 93       	st	X, r24
    2188:	f6 c0       	rjmp	.+492    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
							break;
				case PIN6 :
					if(Value == 0)
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 23       	and	r24, r24
    218e:	41 f4       	brne	.+16     	; 0x21a0 <DIO_SetPinValue+0x50e>
								{
									CLRBIT(PORTC,PIN6);
    2190:	a5 e3       	ldi	r26, 0x35	; 53
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e3       	ldi	r30, 0x35	; 53
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8f 7b       	andi	r24, 0xBF	; 191
    219c:	8c 93       	st	X, r24
    219e:	eb c0       	rjmp	.+470    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTC,PIN6);
    21a0:	a5 e3       	ldi	r26, 0x35	; 53
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e5 e3       	ldi	r30, 0x35	; 53
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	80 64       	ori	r24, 0x40	; 64
    21ac:	8c 93       	st	X, r24
    21ae:	e3 c0       	rjmp	.+454    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
							break;
				case PIN7 :
					if(Value == 0)
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	88 23       	and	r24, r24
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <DIO_SetPinValue+0x534>
								{
									CLRBIT(PORTC,PIN7);
    21b6:	a5 e3       	ldi	r26, 0x35	; 53
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e5 e3       	ldi	r30, 0x35	; 53
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8f 77       	andi	r24, 0x7F	; 127
    21c2:	8c 93       	st	X, r24
    21c4:	d8 c0       	rjmp	.+432    	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTC,PIN7);
    21c6:	a5 e3       	ldi	r26, 0x35	; 53
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e5 e3       	ldi	r30, 0x35	; 53
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	8c 93       	st	X, r24
    21d4:	d0 c0       	rjmp	.+416    	; 0x2376 <DIO_SetPinValue+0x6e4>
							break;

				}
		break;
	case PORT3 :
		switch(Pin_number)
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	3d 83       	std	Y+5, r19	; 0x05
    21de:	2c 83       	std	Y+4, r18	; 0x04
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	83 30       	cpi	r24, 0x03	; 3
    21e6:	91 05       	cpc	r25, r1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <DIO_SetPinValue+0x55a>
    21ea:	67 c0       	rjmp	.+206    	; 0x22ba <DIO_SetPinValue+0x628>
    21ec:	2c 81       	ldd	r18, Y+4	; 0x04
    21ee:	3d 81       	ldd	r19, Y+5	; 0x05
    21f0:	24 30       	cpi	r18, 0x04	; 4
    21f2:	31 05       	cpc	r19, r1
    21f4:	84 f4       	brge	.+32     	; 0x2216 <DIO_SetPinValue+0x584>
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	b9 f1       	breq	.+110    	; 0x226e <DIO_SetPinValue+0x5dc>
    2200:	2c 81       	ldd	r18, Y+4	; 0x04
    2202:	3d 81       	ldd	r19, Y+5	; 0x05
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	0c f0       	brlt	.+2      	; 0x220c <DIO_SetPinValue+0x57a>
    220a:	44 c0       	rjmp	.+136    	; 0x2294 <DIO_SetPinValue+0x602>
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	d1 f0       	breq	.+52     	; 0x2248 <DIO_SetPinValue+0x5b6>
    2214:	b0 c0       	rjmp	.+352    	; 0x2376 <DIO_SetPinValue+0x6e4>
    2216:	2c 81       	ldd	r18, Y+4	; 0x04
    2218:	3d 81       	ldd	r19, Y+5	; 0x05
    221a:	25 30       	cpi	r18, 0x05	; 5
    221c:	31 05       	cpc	r19, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <DIO_SetPinValue+0x590>
    2220:	72 c0       	rjmp	.+228    	; 0x2306 <DIO_SetPinValue+0x674>
    2222:	8c 81       	ldd	r24, Y+4	; 0x04
    2224:	9d 81       	ldd	r25, Y+5	; 0x05
    2226:	85 30       	cpi	r24, 0x05	; 5
    2228:	91 05       	cpc	r25, r1
    222a:	0c f4       	brge	.+2      	; 0x222e <DIO_SetPinValue+0x59c>
    222c:	59 c0       	rjmp	.+178    	; 0x22e0 <DIO_SetPinValue+0x64e>
    222e:	2c 81       	ldd	r18, Y+4	; 0x04
    2230:	3d 81       	ldd	r19, Y+5	; 0x05
    2232:	26 30       	cpi	r18, 0x06	; 6
    2234:	31 05       	cpc	r19, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <DIO_SetPinValue+0x5a8>
    2238:	79 c0       	rjmp	.+242    	; 0x232c <DIO_SetPinValue+0x69a>
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	87 30       	cpi	r24, 0x07	; 7
    2240:	91 05       	cpc	r25, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <DIO_SetPinValue+0x5b4>
    2244:	86 c0       	rjmp	.+268    	; 0x2352 <DIO_SetPinValue+0x6c0>
    2246:	97 c0       	rjmp	.+302    	; 0x2376 <DIO_SetPinValue+0x6e4>
				{
				case PIN0 :
					if(Value == 0)
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	88 23       	and	r24, r24
    224c:	41 f4       	brne	.+16     	; 0x225e <DIO_SetPinValue+0x5cc>
					{
						CLRBIT(PORTD,PIN0);
    224e:	a2 e3       	ldi	r26, 0x32	; 50
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e2 e3       	ldi	r30, 0x32	; 50
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8e 7f       	andi	r24, 0xFE	; 254
    225a:	8c 93       	st	X, r24
    225c:	8c c0       	rjmp	.+280    	; 0x2376 <DIO_SetPinValue+0x6e4>
					}
					else
					{
						SETBIT(PORTD,PIN0);
    225e:	a2 e3       	ldi	r26, 0x32	; 50
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e2 e3       	ldi	r30, 0x32	; 50
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	81 60       	ori	r24, 0x01	; 1
    226a:	8c 93       	st	X, r24
    226c:	84 c0       	rjmp	.+264    	; 0x2376 <DIO_SetPinValue+0x6e4>
					}
					break;
				case PIN1 :
					if(Value == 0)
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 23       	and	r24, r24
    2272:	41 f4       	brne	.+16     	; 0x2284 <DIO_SetPinValue+0x5f2>
						{
							CLRBIT(PORTD,PIN1);
    2274:	a2 e3       	ldi	r26, 0x32	; 50
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e2 e3       	ldi	r30, 0x32	; 50
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8d 7f       	andi	r24, 0xFD	; 253
    2280:	8c 93       	st	X, r24
    2282:	79 c0       	rjmp	.+242    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTD,PIN1);
    2284:	a2 e3       	ldi	r26, 0x32	; 50
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e2 e3       	ldi	r30, 0x32	; 50
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	82 60       	ori	r24, 0x02	; 2
    2290:	8c 93       	st	X, r24
    2292:	71 c0       	rjmp	.+226    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
					break;
				case PIN2 :
					if(Value == 0)
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	88 23       	and	r24, r24
    2298:	41 f4       	brne	.+16     	; 0x22aa <DIO_SetPinValue+0x618>
						{
							CLRBIT(PORTD,PIN2);
    229a:	a2 e3       	ldi	r26, 0x32	; 50
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e2 e3       	ldi	r30, 0x32	; 50
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	8b 7f       	andi	r24, 0xFB	; 251
    22a6:	8c 93       	st	X, r24
    22a8:	66 c0       	rjmp	.+204    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTD,PIN2);
    22aa:	a2 e3       	ldi	r26, 0x32	; 50
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e2 e3       	ldi	r30, 0x32	; 50
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	84 60       	ori	r24, 0x04	; 4
    22b6:	8c 93       	st	X, r24
    22b8:	5e c0       	rjmp	.+188    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN3 :
					if(Value == 0)
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	88 23       	and	r24, r24
    22be:	41 f4       	brne	.+16     	; 0x22d0 <DIO_SetPinValue+0x63e>
						{
							CLRBIT(PORTD,PIN3);
    22c0:	a2 e3       	ldi	r26, 0x32	; 50
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e2 e3       	ldi	r30, 0x32	; 50
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	87 7f       	andi	r24, 0xF7	; 247
    22cc:	8c 93       	st	X, r24
    22ce:	53 c0       	rjmp	.+166    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
						SETBIT(PORTD,PIN3);
    22d0:	a2 e3       	ldi	r26, 0x32	; 50
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e2 e3       	ldi	r30, 0x32	; 50
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	88 60       	ori	r24, 0x08	; 8
    22dc:	8c 93       	st	X, r24
    22de:	4b c0       	rjmp	.+150    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN4 :
					if(Value == 0)
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	88 23       	and	r24, r24
    22e4:	41 f4       	brne	.+16     	; 0x22f6 <DIO_SetPinValue+0x664>
						{
							CLRBIT(PORTD,PIN4);
    22e6:	a2 e3       	ldi	r26, 0x32	; 50
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e2 e3       	ldi	r30, 0x32	; 50
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	8f 7e       	andi	r24, 0xEF	; 239
    22f2:	8c 93       	st	X, r24
    22f4:	40 c0       	rjmp	.+128    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						else
						{
							SETBIT(PORTD,PIN4);
    22f6:	a2 e3       	ldi	r26, 0x32	; 50
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e2 e3       	ldi	r30, 0x32	; 50
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	80 61       	ori	r24, 0x10	; 16
    2302:	8c 93       	st	X, r24
    2304:	38 c0       	rjmp	.+112    	; 0x2376 <DIO_SetPinValue+0x6e4>
						}
						break;
				case PIN5 :
					if(Value == 0)
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	88 23       	and	r24, r24
    230a:	41 f4       	brne	.+16     	; 0x231c <DIO_SetPinValue+0x68a>
								{
									CLRBIT(PORTD,PIN5);
    230c:	a2 e3       	ldi	r26, 0x32	; 50
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e2 e3       	ldi	r30, 0x32	; 50
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 7d       	andi	r24, 0xDF	; 223
    2318:	8c 93       	st	X, r24
    231a:	2d c0       	rjmp	.+90     	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTD,PIN5);
    231c:	a2 e3       	ldi	r26, 0x32	; 50
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e2 e3       	ldi	r30, 0x32	; 50
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	80 62       	ori	r24, 0x20	; 32
    2328:	8c 93       	st	X, r24
    232a:	25 c0       	rjmp	.+74     	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
							break;
				case PIN6 :
					if(Value == 0)
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	88 23       	and	r24, r24
    2330:	41 f4       	brne	.+16     	; 0x2342 <DIO_SetPinValue+0x6b0>
								{
									CLRBIT(PORTD,PIN6);
    2332:	a2 e3       	ldi	r26, 0x32	; 50
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e2 e3       	ldi	r30, 0x32	; 50
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8f 7b       	andi	r24, 0xBF	; 191
    233e:	8c 93       	st	X, r24
    2340:	1a c0       	rjmp	.+52     	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTD,PIN6);
    2342:	a2 e3       	ldi	r26, 0x32	; 50
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e2 e3       	ldi	r30, 0x32	; 50
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	80 64       	ori	r24, 0x40	; 64
    234e:	8c 93       	st	X, r24
    2350:	12 c0       	rjmp	.+36     	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
							break;
				case PIN7 :
					if(Value == 0)
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	88 23       	and	r24, r24
    2356:	41 f4       	brne	.+16     	; 0x2368 <DIO_SetPinValue+0x6d6>
								{
									CLRBIT(PORTD,PIN7);
    2358:	a2 e3       	ldi	r26, 0x32	; 50
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e2 e3       	ldi	r30, 0x32	; 50
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	8f 77       	andi	r24, 0x7F	; 127
    2364:	8c 93       	st	X, r24
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <DIO_SetPinValue+0x6e4>
								}
								else
								{
									SETBIT(PORTD,PIN7);
    2368:	a2 e3       	ldi	r26, 0x32	; 50
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e2 e3       	ldi	r30, 0x32	; 50
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	80 68       	ori	r24, 0x80	; 128
    2374:	8c 93       	st	X, r24
							break;

				}
		break;
	}
}
    2376:	2d 96       	adiw	r28, 0x0d	; 13
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <DIO_GetPinValue>:
U8 DIO_GetPinValue(U8 Port_Number, U8 Pin_Number){
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <DIO_GetPinValue+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <DIO_GetPinValue+0x8>
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	8a 83       	std	Y+2, r24	; 0x02
    2398:	6b 83       	std	Y+3, r22	; 0x03
	U8 RetVal;
	switch(Port_Number){
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	3d 83       	std	Y+5, r19	; 0x05
    23a2:	2c 83       	std	Y+4, r18	; 0x04
    23a4:	4c 81       	ldd	r20, Y+4	; 0x04
    23a6:	5d 81       	ldd	r21, Y+5	; 0x05
    23a8:	41 30       	cpi	r20, 0x01	; 1
    23aa:	51 05       	cpc	r21, r1
    23ac:	41 f1       	breq	.+80     	; 0x23fe <DIO_GetPinValue+0x76>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	91 05       	cpc	r25, r1
    23b6:	34 f4       	brge	.+12     	; 0x23c4 <DIO_GetPinValue+0x3c>
    23b8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ba:	3d 81       	ldd	r19, Y+5	; 0x05
    23bc:	21 15       	cp	r18, r1
    23be:	31 05       	cpc	r19, r1
    23c0:	61 f0       	breq	.+24     	; 0x23da <DIO_GetPinValue+0x52>
    23c2:	52 c0       	rjmp	.+164    	; 0x2468 <DIO_GetPinValue+0xe0>
    23c4:	4c 81       	ldd	r20, Y+4	; 0x04
    23c6:	5d 81       	ldd	r21, Y+5	; 0x05
    23c8:	42 30       	cpi	r20, 0x02	; 2
    23ca:	51 05       	cpc	r21, r1
    23cc:	51 f1       	breq	.+84     	; 0x2422 <DIO_GetPinValue+0x9a>
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	b9 f1       	breq	.+110    	; 0x2446 <DIO_GetPinValue+0xbe>
    23d8:	47 c0       	rjmp	.+142    	; 0x2468 <DIO_GetPinValue+0xe0>
	case PORT0:
		RetVal = GETBIT(PINA,Pin_Number);
    23da:	e9 e3       	ldi	r30, 0x39	; 57
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a9 01       	movw	r20, r18
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <DIO_GetPinValue+0x6a>
    23ee:	55 95       	asr	r21
    23f0:	47 95       	ror	r20
    23f2:	8a 95       	dec	r24
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <DIO_GetPinValue+0x66>
    23f6:	ca 01       	movw	r24, r20
    23f8:	81 70       	andi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	35 c0       	rjmp	.+106    	; 0x2468 <DIO_GetPinValue+0xe0>
		break;
	case PORT1:
		RetVal = GETBIT(PINB,Pin_Number);
    23fe:	e6 e3       	ldi	r30, 0x36	; 54
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a9 01       	movw	r20, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_GetPinValue+0x8e>
    2412:	55 95       	asr	r21
    2414:	47 95       	ror	r20
    2416:	8a 95       	dec	r24
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <DIO_GetPinValue+0x8a>
    241a:	ca 01       	movw	r24, r20
    241c:	81 70       	andi	r24, 0x01	; 1
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	23 c0       	rjmp	.+70     	; 0x2468 <DIO_GetPinValue+0xe0>
		break;
	case PORT2:
		RetVal = GETBIT(PINC,Pin_Number);
    2422:	e3 e3       	ldi	r30, 0x33	; 51
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a9 01       	movw	r20, r18
    2434:	02 c0       	rjmp	.+4      	; 0x243a <DIO_GetPinValue+0xb2>
    2436:	55 95       	asr	r21
    2438:	47 95       	ror	r20
    243a:	8a 95       	dec	r24
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <DIO_GetPinValue+0xae>
    243e:	ca 01       	movw	r24, r20
    2440:	81 70       	andi	r24, 0x01	; 1
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	11 c0       	rjmp	.+34     	; 0x2468 <DIO_GetPinValue+0xe0>
		break;
	case PORT3:
		RetVal = GETBIT(PIND,Pin_Number);
    2446:	e0 e3       	ldi	r30, 0x30	; 48
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a9 01       	movw	r20, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <DIO_GetPinValue+0xd6>
    245a:	55 95       	asr	r21
    245c:	47 95       	ror	r20
    245e:	8a 95       	dec	r24
    2460:	e2 f7       	brpl	.-8      	; 0x245a <DIO_GetPinValue+0xd2>
    2462:	ca 01       	movw	r24, r20
    2464:	81 70       	andi	r24, 0x01	; 1
    2466:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return RetVal;
    2468:	89 81       	ldd	r24, Y+1	; 0x01
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <DIO_TogglePin>:

void DIO_TogglePin		 (U8 Port_number , U8 Pin_number)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	2c 97       	sbiw	r28, 0x0c	; 12
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6a 83       	std	Y+2, r22	; 0x02
	static U8 State = 0;

	switch(Port_number)
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	3c 87       	std	Y+12, r19	; 0x0c
    249a:	2b 87       	std	Y+11, r18	; 0x0b
    249c:	8b 85       	ldd	r24, Y+11	; 0x0b
    249e:	9c 85       	ldd	r25, Y+12	; 0x0c
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	91 05       	cpc	r25, r1
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <DIO_TogglePin+0x2e>
    24a6:	18 c1       	rjmp	.+560    	; 0x26d8 <DIO_TogglePin+0x25e>
    24a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    24aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	2c f4       	brge	.+10     	; 0x24bc <DIO_TogglePin+0x42>
    24b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	71 f0       	breq	.+28     	; 0x24d6 <DIO_TogglePin+0x5c>
    24ba:	10 c4       	rjmp	.+2080   	; 0x2cdc <DIO_TogglePin+0x862>
    24bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    24be:	3c 85       	ldd	r19, Y+12	; 0x0c
    24c0:	22 30       	cpi	r18, 0x02	; 2
    24c2:	31 05       	cpc	r19, r1
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <DIO_TogglePin+0x4e>
    24c6:	09 c2       	rjmp	.+1042   	; 0x28da <DIO_TogglePin+0x460>
    24c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    24cc:	83 30       	cpi	r24, 0x03	; 3
    24ce:	91 05       	cpc	r25, r1
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <DIO_TogglePin+0x5a>
    24d2:	04 c3       	rjmp	.+1544   	; 0x2adc <DIO_TogglePin+0x662>
    24d4:	03 c4       	rjmp	.+2054   	; 0x2cdc <DIO_TogglePin+0x862>
	{
	case PORT0 :
		switch(Pin_number)
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	3a 87       	std	Y+10, r19	; 0x0a
    24de:	29 87       	std	Y+9, r18	; 0x09
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	91 05       	cpc	r25, r1
    24e8:	09 f4       	brne	.+2      	; 0x24ec <DIO_TogglePin+0x72>
    24ea:	79 c0       	rjmp	.+242    	; 0x25de <DIO_TogglePin+0x164>
    24ec:	29 85       	ldd	r18, Y+9	; 0x09
    24ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    24f0:	24 30       	cpi	r18, 0x04	; 4
    24f2:	31 05       	cpc	r19, r1
    24f4:	84 f4       	brge	.+32     	; 0x2516 <DIO_TogglePin+0x9c>
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	e9 f1       	breq	.+122    	; 0x257a <DIO_TogglePin+0x100>
    2500:	29 85       	ldd	r18, Y+9	; 0x09
    2502:	3a 85       	ldd	r19, Y+10	; 0x0a
    2504:	22 30       	cpi	r18, 0x02	; 2
    2506:	31 05       	cpc	r19, r1
    2508:	0c f0       	brlt	.+2      	; 0x250c <DIO_TogglePin+0x92>
    250a:	50 c0       	rjmp	.+160    	; 0x25ac <DIO_TogglePin+0x132>
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	d1 f0       	breq	.+52     	; 0x2548 <DIO_TogglePin+0xce>
    2514:	e3 c3       	rjmp	.+1990   	; 0x2cdc <DIO_TogglePin+0x862>
    2516:	29 85       	ldd	r18, Y+9	; 0x09
    2518:	3a 85       	ldd	r19, Y+10	; 0x0a
    251a:	25 30       	cpi	r18, 0x05	; 5
    251c:	31 05       	cpc	r19, r1
    251e:	09 f4       	brne	.+2      	; 0x2522 <DIO_TogglePin+0xa8>
    2520:	90 c0       	rjmp	.+288    	; 0x2642 <DIO_TogglePin+0x1c8>
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	85 30       	cpi	r24, 0x05	; 5
    2528:	91 05       	cpc	r25, r1
    252a:	0c f4       	brge	.+2      	; 0x252e <DIO_TogglePin+0xb4>
    252c:	71 c0       	rjmp	.+226    	; 0x2610 <DIO_TogglePin+0x196>
    252e:	29 85       	ldd	r18, Y+9	; 0x09
    2530:	3a 85       	ldd	r19, Y+10	; 0x0a
    2532:	26 30       	cpi	r18, 0x06	; 6
    2534:	31 05       	cpc	r19, r1
    2536:	09 f4       	brne	.+2      	; 0x253a <DIO_TogglePin+0xc0>
    2538:	9d c0       	rjmp	.+314    	; 0x2674 <DIO_TogglePin+0x1fa>
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	87 30       	cpi	r24, 0x07	; 7
    2540:	91 05       	cpc	r25, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <DIO_TogglePin+0xcc>
    2544:	b0 c0       	rjmp	.+352    	; 0x26a6 <DIO_TogglePin+0x22c>
    2546:	ca c3       	rjmp	.+1940   	; 0x2cdc <DIO_TogglePin+0x862>
		{
		case PIN0 :
			if(State == 0)
    2548:	80 91 59 02 	lds	r24, 0x0259
    254c:	88 23       	and	r24, r24
    254e:	59 f4       	brne	.+22     	; 0x2566 <DIO_TogglePin+0xec>
			{
				CLRBIT(PORTA,PIN0);
    2550:	ab e3       	ldi	r26, 0x3B	; 59
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	eb e3       	ldi	r30, 0x3B	; 59
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	8e 7f       	andi	r24, 0xFE	; 254
    255c:	8c 93       	st	X, r24
				State = 1 ;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	80 93 59 02 	sts	0x0259, r24
    2564:	bb c3       	rjmp	.+1910   	; 0x2cdc <DIO_TogglePin+0x862>
			}
			else
			{
				SETBIT(PORTA,PIN0);
    2566:	ab e3       	ldi	r26, 0x3B	; 59
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	eb e3       	ldi	r30, 0x3B	; 59
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	8c 93       	st	X, r24
				State = 0 ;
    2574:	10 92 59 02 	sts	0x0259, r1
    2578:	b1 c3       	rjmp	.+1890   	; 0x2cdc <DIO_TogglePin+0x862>
			}
			break;
		case PIN1 :
			if(State == 0)
    257a:	80 91 59 02 	lds	r24, 0x0259
    257e:	88 23       	and	r24, r24
    2580:	59 f4       	brne	.+22     	; 0x2598 <DIO_TogglePin+0x11e>
				{
					CLRBIT(PORTA,PIN1);
    2582:	ab e3       	ldi	r26, 0x3B	; 59
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	eb e3       	ldi	r30, 0x3B	; 59
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	8d 7f       	andi	r24, 0xFD	; 253
    258e:	8c 93       	st	X, r24
					State = 1 ;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	80 93 59 02 	sts	0x0259, r24
    2596:	a2 c3       	rjmp	.+1860   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				else
				{
					SETBIT(PORTA,PIN1);
    2598:	ab e3       	ldi	r26, 0x3B	; 59
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e3       	ldi	r30, 0x3B	; 59
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	82 60       	ori	r24, 0x02	; 2
    25a4:	8c 93       	st	X, r24
					State = 0 ;
    25a6:	10 92 59 02 	sts	0x0259, r1
    25aa:	98 c3       	rjmp	.+1840   	; 0x2cdc <DIO_TogglePin+0x862>
				}
			break;
		case PIN2 :
			if(State == 0)
    25ac:	80 91 59 02 	lds	r24, 0x0259
    25b0:	88 23       	and	r24, r24
    25b2:	59 f4       	brne	.+22     	; 0x25ca <DIO_TogglePin+0x150>
				{
					CLRBIT(PORTA,PIN2);
    25b4:	ab e3       	ldi	r26, 0x3B	; 59
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e3       	ldi	r30, 0x3B	; 59
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8b 7f       	andi	r24, 0xFB	; 251
    25c0:	8c 93       	st	X, r24
					State = 1 ;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 93 59 02 	sts	0x0259, r24
    25c8:	89 c3       	rjmp	.+1810   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				else
				{
					SETBIT(PORTA,PIN2);
    25ca:	ab e3       	ldi	r26, 0x3B	; 59
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	eb e3       	ldi	r30, 0x3B	; 59
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	84 60       	ori	r24, 0x04	; 4
    25d6:	8c 93       	st	X, r24
					State = 0 ;
    25d8:	10 92 59 02 	sts	0x0259, r1
    25dc:	7f c3       	rjmp	.+1790   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				break;
		case PIN3 :
			if(State == 0)
    25de:	80 91 59 02 	lds	r24, 0x0259
    25e2:	88 23       	and	r24, r24
    25e4:	59 f4       	brne	.+22     	; 0x25fc <DIO_TogglePin+0x182>
				{
					CLRBIT(PORTA,PIN3);
    25e6:	ab e3       	ldi	r26, 0x3B	; 59
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	eb e3       	ldi	r30, 0x3B	; 59
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	87 7f       	andi	r24, 0xF7	; 247
    25f2:	8c 93       	st	X, r24
					State = 1 ;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	80 93 59 02 	sts	0x0259, r24
    25fa:	70 c3       	rjmp	.+1760   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				else
				{
					SETBIT(PORTA,PIN3);
    25fc:	ab e3       	ldi	r26, 0x3B	; 59
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	eb e3       	ldi	r30, 0x3B	; 59
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 60       	ori	r24, 0x08	; 8
    2608:	8c 93       	st	X, r24
					State = 0 ;
    260a:	10 92 59 02 	sts	0x0259, r1
    260e:	66 c3       	rjmp	.+1740   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				break;
		case PIN4 :
			if(State == 0)
    2610:	80 91 59 02 	lds	r24, 0x0259
    2614:	88 23       	and	r24, r24
    2616:	59 f4       	brne	.+22     	; 0x262e <DIO_TogglePin+0x1b4>
				{
					CLRBIT(PORTA,PIN4);
    2618:	ab e3       	ldi	r26, 0x3B	; 59
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	eb e3       	ldi	r30, 0x3B	; 59
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8f 7e       	andi	r24, 0xEF	; 239
    2624:	8c 93       	st	X, r24
					State = 1 ;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	80 93 59 02 	sts	0x0259, r24
    262c:	57 c3       	rjmp	.+1710   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				else
				{
					SETBIT(PORTA,PIN4);
    262e:	ab e3       	ldi	r26, 0x3B	; 59
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	eb e3       	ldi	r30, 0x3B	; 59
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	80 61       	ori	r24, 0x10	; 16
    263a:	8c 93       	st	X, r24
					State = 0 ;
    263c:	10 92 59 02 	sts	0x0259, r1
    2640:	4d c3       	rjmp	.+1690   	; 0x2cdc <DIO_TogglePin+0x862>
				}
				break;
		case PIN5 :
			if(State == 0)
    2642:	80 91 59 02 	lds	r24, 0x0259
    2646:	88 23       	and	r24, r24
    2648:	59 f4       	brne	.+22     	; 0x2660 <DIO_TogglePin+0x1e6>
						{
							CLRBIT(PORTA,PIN5);
    264a:	ab e3       	ldi	r26, 0x3B	; 59
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	eb e3       	ldi	r30, 0x3B	; 59
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	8f 7d       	andi	r24, 0xDF	; 223
    2656:	8c 93       	st	X, r24
							State = 1 ;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	80 93 59 02 	sts	0x0259, r24
    265e:	3e c3       	rjmp	.+1660   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTA,PIN5);
    2660:	ab e3       	ldi	r26, 0x3B	; 59
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	eb e3       	ldi	r30, 0x3B	; 59
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	80 62       	ori	r24, 0x20	; 32
    266c:	8c 93       	st	X, r24
							State = 0 ;
    266e:	10 92 59 02 	sts	0x0259, r1
    2672:	34 c3       	rjmp	.+1640   	; 0x2cdc <DIO_TogglePin+0x862>
						}
					break;
		case PIN6 :
			if(State == 0)
    2674:	80 91 59 02 	lds	r24, 0x0259
    2678:	88 23       	and	r24, r24
    267a:	59 f4       	brne	.+22     	; 0x2692 <DIO_TogglePin+0x218>
						{
							CLRBIT(PORTA,PIN6);
    267c:	ab e3       	ldi	r26, 0x3B	; 59
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	eb e3       	ldi	r30, 0x3B	; 59
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	8f 7b       	andi	r24, 0xBF	; 191
    2688:	8c 93       	st	X, r24
							State = 1 ;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	80 93 59 02 	sts	0x0259, r24
    2690:	25 c3       	rjmp	.+1610   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTA,PIN6);
    2692:	ab e3       	ldi	r26, 0x3B	; 59
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	eb e3       	ldi	r30, 0x3B	; 59
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	80 64       	ori	r24, 0x40	; 64
    269e:	8c 93       	st	X, r24
							State = 0 ;
    26a0:	10 92 59 02 	sts	0x0259, r1
    26a4:	1b c3       	rjmp	.+1590   	; 0x2cdc <DIO_TogglePin+0x862>
						}
					break;
		case PIN7 :
			if(State == 0)
    26a6:	80 91 59 02 	lds	r24, 0x0259
    26aa:	88 23       	and	r24, r24
    26ac:	59 f4       	brne	.+22     	; 0x26c4 <DIO_TogglePin+0x24a>
						{
							CLRBIT(PORTA,PIN7);
    26ae:	ab e3       	ldi	r26, 0x3B	; 59
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	eb e3       	ldi	r30, 0x3B	; 59
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 77       	andi	r24, 0x7F	; 127
    26ba:	8c 93       	st	X, r24
							State = 1 ;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	80 93 59 02 	sts	0x0259, r24
    26c2:	0c c3       	rjmp	.+1560   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTA,PIN7);
    26c4:	ab e3       	ldi	r26, 0x3B	; 59
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	eb e3       	ldi	r30, 0x3B	; 59
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	80 68       	ori	r24, 0x80	; 128
    26d0:	8c 93       	st	X, r24
							State = 0 ;
    26d2:	10 92 59 02 	sts	0x0259, r1
    26d6:	02 c3       	rjmp	.+1540   	; 0x2cdc <DIO_TogglePin+0x862>
					break;

		}
		break;
	case PORT1 :
		switch(Pin_number)
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	38 87       	std	Y+8, r19	; 0x08
    26e0:	2f 83       	std	Y+7, r18	; 0x07
    26e2:	8f 81       	ldd	r24, Y+7	; 0x07
    26e4:	98 85       	ldd	r25, Y+8	; 0x08
    26e6:	83 30       	cpi	r24, 0x03	; 3
    26e8:	91 05       	cpc	r25, r1
    26ea:	09 f4       	brne	.+2      	; 0x26ee <DIO_TogglePin+0x274>
    26ec:	79 c0       	rjmp	.+242    	; 0x27e0 <DIO_TogglePin+0x366>
    26ee:	2f 81       	ldd	r18, Y+7	; 0x07
    26f0:	38 85       	ldd	r19, Y+8	; 0x08
    26f2:	24 30       	cpi	r18, 0x04	; 4
    26f4:	31 05       	cpc	r19, r1
    26f6:	84 f4       	brge	.+32     	; 0x2718 <DIO_TogglePin+0x29e>
    26f8:	8f 81       	ldd	r24, Y+7	; 0x07
    26fa:	98 85       	ldd	r25, Y+8	; 0x08
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	91 05       	cpc	r25, r1
    2700:	e9 f1       	breq	.+122    	; 0x277c <DIO_TogglePin+0x302>
    2702:	2f 81       	ldd	r18, Y+7	; 0x07
    2704:	38 85       	ldd	r19, Y+8	; 0x08
    2706:	22 30       	cpi	r18, 0x02	; 2
    2708:	31 05       	cpc	r19, r1
    270a:	0c f0       	brlt	.+2      	; 0x270e <DIO_TogglePin+0x294>
    270c:	50 c0       	rjmp	.+160    	; 0x27ae <DIO_TogglePin+0x334>
    270e:	8f 81       	ldd	r24, Y+7	; 0x07
    2710:	98 85       	ldd	r25, Y+8	; 0x08
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	d1 f0       	breq	.+52     	; 0x274a <DIO_TogglePin+0x2d0>
    2716:	e2 c2       	rjmp	.+1476   	; 0x2cdc <DIO_TogglePin+0x862>
    2718:	2f 81       	ldd	r18, Y+7	; 0x07
    271a:	38 85       	ldd	r19, Y+8	; 0x08
    271c:	25 30       	cpi	r18, 0x05	; 5
    271e:	31 05       	cpc	r19, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <DIO_TogglePin+0x2aa>
    2722:	90 c0       	rjmp	.+288    	; 0x2844 <DIO_TogglePin+0x3ca>
    2724:	8f 81       	ldd	r24, Y+7	; 0x07
    2726:	98 85       	ldd	r25, Y+8	; 0x08
    2728:	85 30       	cpi	r24, 0x05	; 5
    272a:	91 05       	cpc	r25, r1
    272c:	0c f4       	brge	.+2      	; 0x2730 <DIO_TogglePin+0x2b6>
    272e:	71 c0       	rjmp	.+226    	; 0x2812 <DIO_TogglePin+0x398>
    2730:	2f 81       	ldd	r18, Y+7	; 0x07
    2732:	38 85       	ldd	r19, Y+8	; 0x08
    2734:	26 30       	cpi	r18, 0x06	; 6
    2736:	31 05       	cpc	r19, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <DIO_TogglePin+0x2c2>
    273a:	9d c0       	rjmp	.+314    	; 0x2876 <DIO_TogglePin+0x3fc>
    273c:	8f 81       	ldd	r24, Y+7	; 0x07
    273e:	98 85       	ldd	r25, Y+8	; 0x08
    2740:	87 30       	cpi	r24, 0x07	; 7
    2742:	91 05       	cpc	r25, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <DIO_TogglePin+0x2ce>
    2746:	b0 c0       	rjmp	.+352    	; 0x28a8 <DIO_TogglePin+0x42e>
    2748:	c9 c2       	rjmp	.+1426   	; 0x2cdc <DIO_TogglePin+0x862>
				{
				case PIN0 :
					if(State == 0)
    274a:	80 91 59 02 	lds	r24, 0x0259
    274e:	88 23       	and	r24, r24
    2750:	59 f4       	brne	.+22     	; 0x2768 <DIO_TogglePin+0x2ee>
					{
						CLRBIT(PORTB,PIN0);
    2752:	a8 e3       	ldi	r26, 0x38	; 56
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e8 e3       	ldi	r30, 0x38	; 56
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8e 7f       	andi	r24, 0xFE	; 254
    275e:	8c 93       	st	X, r24
						State = 1 ;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	80 93 59 02 	sts	0x0259, r24
    2766:	ba c2       	rjmp	.+1396   	; 0x2cdc <DIO_TogglePin+0x862>
					}
					else
					{
						SETBIT(PORTB,PIN0);
    2768:	a8 e3       	ldi	r26, 0x38	; 56
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e8 e3       	ldi	r30, 0x38	; 56
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	81 60       	ori	r24, 0x01	; 1
    2774:	8c 93       	st	X, r24
						State = 0 ;
    2776:	10 92 59 02 	sts	0x0259, r1
    277a:	b0 c2       	rjmp	.+1376   	; 0x2cdc <DIO_TogglePin+0x862>
					}
					break;
				case PIN1 :
					if(State == 0)
    277c:	80 91 59 02 	lds	r24, 0x0259
    2780:	88 23       	and	r24, r24
    2782:	59 f4       	brne	.+22     	; 0x279a <DIO_TogglePin+0x320>
						{
							CLRBIT(PORTB,PIN1);
    2784:	a8 e3       	ldi	r26, 0x38	; 56
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e8 e3       	ldi	r30, 0x38	; 56
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8d 7f       	andi	r24, 0xFD	; 253
    2790:	8c 93       	st	X, r24
							State = 1 ;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	80 93 59 02 	sts	0x0259, r24
    2798:	a1 c2       	rjmp	.+1346   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTB,PIN1);
    279a:	a8 e3       	ldi	r26, 0x38	; 56
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e8 e3       	ldi	r30, 0x38	; 56
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	82 60       	ori	r24, 0x02	; 2
    27a6:	8c 93       	st	X, r24
							State = 0 ;
    27a8:	10 92 59 02 	sts	0x0259, r1
    27ac:	97 c2       	rjmp	.+1326   	; 0x2cdc <DIO_TogglePin+0x862>
						}
					break;
				case PIN2 :
					if(State == 0)
    27ae:	80 91 59 02 	lds	r24, 0x0259
    27b2:	88 23       	and	r24, r24
    27b4:	59 f4       	brne	.+22     	; 0x27cc <DIO_TogglePin+0x352>
						{
							CLRBIT(PORTB,PIN2);
    27b6:	a8 e3       	ldi	r26, 0x38	; 56
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e8 e3       	ldi	r30, 0x38	; 56
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	8b 7f       	andi	r24, 0xFB	; 251
    27c2:	8c 93       	st	X, r24
							State = 1 ;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	80 93 59 02 	sts	0x0259, r24
    27ca:	88 c2       	rjmp	.+1296   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTB,PIN2);
    27cc:	a8 e3       	ldi	r26, 0x38	; 56
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e8 e3       	ldi	r30, 0x38	; 56
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	84 60       	ori	r24, 0x04	; 4
    27d8:	8c 93       	st	X, r24
							State = 0 ;
    27da:	10 92 59 02 	sts	0x0259, r1
    27de:	7e c2       	rjmp	.+1276   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN3 :
					if(State == 0)
    27e0:	80 91 59 02 	lds	r24, 0x0259
    27e4:	88 23       	and	r24, r24
    27e6:	59 f4       	brne	.+22     	; 0x27fe <DIO_TogglePin+0x384>
						{
							CLRBIT(PORTB,PIN3);
    27e8:	a8 e3       	ldi	r26, 0x38	; 56
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e8 e3       	ldi	r30, 0x38	; 56
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	87 7f       	andi	r24, 0xF7	; 247
    27f4:	8c 93       	st	X, r24
							State = 1 ;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	80 93 59 02 	sts	0x0259, r24
    27fc:	6f c2       	rjmp	.+1246   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
						SETBIT(PORTB,PIN3);
    27fe:	a8 e3       	ldi	r26, 0x38	; 56
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e8 e3       	ldi	r30, 0x38	; 56
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	88 60       	ori	r24, 0x08	; 8
    280a:	8c 93       	st	X, r24
						State = 0 ;
    280c:	10 92 59 02 	sts	0x0259, r1
    2810:	65 c2       	rjmp	.+1226   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN4 :
					if(State == 0)
    2812:	80 91 59 02 	lds	r24, 0x0259
    2816:	88 23       	and	r24, r24
    2818:	59 f4       	brne	.+22     	; 0x2830 <DIO_TogglePin+0x3b6>
						{
							CLRBIT(PORTB,PIN4);
    281a:	a8 e3       	ldi	r26, 0x38	; 56
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e8 e3       	ldi	r30, 0x38	; 56
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	8f 7e       	andi	r24, 0xEF	; 239
    2826:	8c 93       	st	X, r24
							State = 1 ;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	80 93 59 02 	sts	0x0259, r24
    282e:	56 c2       	rjmp	.+1196   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTB,PIN4);
    2830:	a8 e3       	ldi	r26, 0x38	; 56
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e8 e3       	ldi	r30, 0x38	; 56
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 61       	ori	r24, 0x10	; 16
    283c:	8c 93       	st	X, r24
							State = 0 ;
    283e:	10 92 59 02 	sts	0x0259, r1
    2842:	4c c2       	rjmp	.+1176   	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN5 :
					if(State == 0)
    2844:	80 91 59 02 	lds	r24, 0x0259
    2848:	88 23       	and	r24, r24
    284a:	59 f4       	brne	.+22     	; 0x2862 <DIO_TogglePin+0x3e8>
								{
									CLRBIT(PORTB,PIN5);
    284c:	a8 e3       	ldi	r26, 0x38	; 56
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e8 e3       	ldi	r30, 0x38	; 56
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	8f 7d       	andi	r24, 0xDF	; 223
    2858:	8c 93       	st	X, r24
									State = 1 ;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	80 93 59 02 	sts	0x0259, r24
    2860:	3d c2       	rjmp	.+1146   	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTB,PIN5);
    2862:	a8 e3       	ldi	r26, 0x38	; 56
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e8 e3       	ldi	r30, 0x38	; 56
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	80 62       	ori	r24, 0x20	; 32
    286e:	8c 93       	st	X, r24
									State = 0 ;
    2870:	10 92 59 02 	sts	0x0259, r1
    2874:	33 c2       	rjmp	.+1126   	; 0x2cdc <DIO_TogglePin+0x862>
								}
							break;
				case PIN6 :
					if(State == 0)
    2876:	80 91 59 02 	lds	r24, 0x0259
    287a:	88 23       	and	r24, r24
    287c:	59 f4       	brne	.+22     	; 0x2894 <DIO_TogglePin+0x41a>
								{
									CLRBIT(PORTB,PIN6);
    287e:	a8 e3       	ldi	r26, 0x38	; 56
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e8 e3       	ldi	r30, 0x38	; 56
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8f 7b       	andi	r24, 0xBF	; 191
    288a:	8c 93       	st	X, r24
									State = 1 ;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	80 93 59 02 	sts	0x0259, r24
    2892:	24 c2       	rjmp	.+1096   	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTB,PIN6);
    2894:	a8 e3       	ldi	r26, 0x38	; 56
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e8 e3       	ldi	r30, 0x38	; 56
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	80 64       	ori	r24, 0x40	; 64
    28a0:	8c 93       	st	X, r24
									State = 0 ;
    28a2:	10 92 59 02 	sts	0x0259, r1
    28a6:	1a c2       	rjmp	.+1076   	; 0x2cdc <DIO_TogglePin+0x862>
								}
							break;
				case PIN7 :
					if(State == 0)
    28a8:	80 91 59 02 	lds	r24, 0x0259
    28ac:	88 23       	and	r24, r24
    28ae:	59 f4       	brne	.+22     	; 0x28c6 <DIO_TogglePin+0x44c>
								{
									CLRBIT(PORTB,PIN7);
    28b0:	a8 e3       	ldi	r26, 0x38	; 56
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e8 e3       	ldi	r30, 0x38	; 56
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	8f 77       	andi	r24, 0x7F	; 127
    28bc:	8c 93       	st	X, r24
									State = 1 ;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	80 93 59 02 	sts	0x0259, r24
    28c4:	0b c2       	rjmp	.+1046   	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTB,PIN7);
    28c6:	a8 e3       	ldi	r26, 0x38	; 56
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e8 e3       	ldi	r30, 0x38	; 56
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	80 68       	ori	r24, 0x80	; 128
    28d2:	8c 93       	st	X, r24
									State = 0 ;
    28d4:	10 92 59 02 	sts	0x0259, r1
    28d8:	01 c2       	rjmp	.+1026   	; 0x2cdc <DIO_TogglePin+0x862>
							break;

				}
		break;
	case PORT2 :
		switch(Pin_number)
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	3e 83       	std	Y+6, r19	; 0x06
    28e2:	2d 83       	std	Y+5, r18	; 0x05
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	91 05       	cpc	r25, r1
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <DIO_TogglePin+0x476>
    28ee:	79 c0       	rjmp	.+242    	; 0x29e2 <DIO_TogglePin+0x568>
    28f0:	2d 81       	ldd	r18, Y+5	; 0x05
    28f2:	3e 81       	ldd	r19, Y+6	; 0x06
    28f4:	24 30       	cpi	r18, 0x04	; 4
    28f6:	31 05       	cpc	r19, r1
    28f8:	84 f4       	brge	.+32     	; 0x291a <DIO_TogglePin+0x4a0>
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	91 05       	cpc	r25, r1
    2902:	e9 f1       	breq	.+122    	; 0x297e <DIO_TogglePin+0x504>
    2904:	2d 81       	ldd	r18, Y+5	; 0x05
    2906:	3e 81       	ldd	r19, Y+6	; 0x06
    2908:	22 30       	cpi	r18, 0x02	; 2
    290a:	31 05       	cpc	r19, r1
    290c:	0c f0       	brlt	.+2      	; 0x2910 <DIO_TogglePin+0x496>
    290e:	50 c0       	rjmp	.+160    	; 0x29b0 <DIO_TogglePin+0x536>
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	d1 f0       	breq	.+52     	; 0x294c <DIO_TogglePin+0x4d2>
    2918:	e1 c1       	rjmp	.+962    	; 0x2cdc <DIO_TogglePin+0x862>
    291a:	2d 81       	ldd	r18, Y+5	; 0x05
    291c:	3e 81       	ldd	r19, Y+6	; 0x06
    291e:	25 30       	cpi	r18, 0x05	; 5
    2920:	31 05       	cpc	r19, r1
    2922:	09 f4       	brne	.+2      	; 0x2926 <DIO_TogglePin+0x4ac>
    2924:	90 c0       	rjmp	.+288    	; 0x2a46 <DIO_TogglePin+0x5cc>
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	9e 81       	ldd	r25, Y+6	; 0x06
    292a:	85 30       	cpi	r24, 0x05	; 5
    292c:	91 05       	cpc	r25, r1
    292e:	0c f4       	brge	.+2      	; 0x2932 <DIO_TogglePin+0x4b8>
    2930:	71 c0       	rjmp	.+226    	; 0x2a14 <DIO_TogglePin+0x59a>
    2932:	2d 81       	ldd	r18, Y+5	; 0x05
    2934:	3e 81       	ldd	r19, Y+6	; 0x06
    2936:	26 30       	cpi	r18, 0x06	; 6
    2938:	31 05       	cpc	r19, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <DIO_TogglePin+0x4c4>
    293c:	9d c0       	rjmp	.+314    	; 0x2a78 <DIO_TogglePin+0x5fe>
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	87 30       	cpi	r24, 0x07	; 7
    2944:	91 05       	cpc	r25, r1
    2946:	09 f4       	brne	.+2      	; 0x294a <DIO_TogglePin+0x4d0>
    2948:	b0 c0       	rjmp	.+352    	; 0x2aaa <DIO_TogglePin+0x630>
    294a:	c8 c1       	rjmp	.+912    	; 0x2cdc <DIO_TogglePin+0x862>
				{
				case PIN0 :
					if(State == 0)
    294c:	80 91 59 02 	lds	r24, 0x0259
    2950:	88 23       	and	r24, r24
    2952:	59 f4       	brne	.+22     	; 0x296a <DIO_TogglePin+0x4f0>
					{
						CLRBIT(PORTC,PIN0);
    2954:	a5 e3       	ldi	r26, 0x35	; 53
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e5 e3       	ldi	r30, 0x35	; 53
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8e 7f       	andi	r24, 0xFE	; 254
    2960:	8c 93       	st	X, r24
						State = 1 ;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 93 59 02 	sts	0x0259, r24
    2968:	b9 c1       	rjmp	.+882    	; 0x2cdc <DIO_TogglePin+0x862>
					}
					else
					{
						SETBIT(PORTC,PIN0);
    296a:	a5 e3       	ldi	r26, 0x35	; 53
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	e5 e3       	ldi	r30, 0x35	; 53
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	81 60       	ori	r24, 0x01	; 1
    2976:	8c 93       	st	X, r24
						State = 0 ;
    2978:	10 92 59 02 	sts	0x0259, r1
    297c:	af c1       	rjmp	.+862    	; 0x2cdc <DIO_TogglePin+0x862>
					}
					break;
				case PIN1 :
					if(State == 0)
    297e:	80 91 59 02 	lds	r24, 0x0259
    2982:	88 23       	and	r24, r24
    2984:	59 f4       	brne	.+22     	; 0x299c <DIO_TogglePin+0x522>
						{
							CLRBIT(PORTC,PIN1);
    2986:	a5 e3       	ldi	r26, 0x35	; 53
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e5 e3       	ldi	r30, 0x35	; 53
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8d 7f       	andi	r24, 0xFD	; 253
    2992:	8c 93       	st	X, r24
							State = 1 ;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 59 02 	sts	0x0259, r24
    299a:	a0 c1       	rjmp	.+832    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTC,PIN1);
    299c:	a5 e3       	ldi	r26, 0x35	; 53
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e5 e3       	ldi	r30, 0x35	; 53
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	82 60       	ori	r24, 0x02	; 2
    29a8:	8c 93       	st	X, r24
							State = 0 ;
    29aa:	10 92 59 02 	sts	0x0259, r1
    29ae:	96 c1       	rjmp	.+812    	; 0x2cdc <DIO_TogglePin+0x862>
						}
					break;
				case PIN2 :
					if(State == 0)
    29b0:	80 91 59 02 	lds	r24, 0x0259
    29b4:	88 23       	and	r24, r24
    29b6:	59 f4       	brne	.+22     	; 0x29ce <DIO_TogglePin+0x554>
						{
							CLRBIT(PORTC,PIN2);
    29b8:	a5 e3       	ldi	r26, 0x35	; 53
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e5 e3       	ldi	r30, 0x35	; 53
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	8b 7f       	andi	r24, 0xFB	; 251
    29c4:	8c 93       	st	X, r24
							State = 1 ;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	80 93 59 02 	sts	0x0259, r24
    29cc:	87 c1       	rjmp	.+782    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTC,PIN2);
    29ce:	a5 e3       	ldi	r26, 0x35	; 53
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e5 e3       	ldi	r30, 0x35	; 53
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	84 60       	ori	r24, 0x04	; 4
    29da:	8c 93       	st	X, r24
							State = 0 ;
    29dc:	10 92 59 02 	sts	0x0259, r1
    29e0:	7d c1       	rjmp	.+762    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN3 :
					if(State == 0)
    29e2:	80 91 59 02 	lds	r24, 0x0259
    29e6:	88 23       	and	r24, r24
    29e8:	59 f4       	brne	.+22     	; 0x2a00 <DIO_TogglePin+0x586>
						{
							CLRBIT(PORTC,PIN3);
    29ea:	a5 e3       	ldi	r26, 0x35	; 53
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e5 e3       	ldi	r30, 0x35	; 53
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	87 7f       	andi	r24, 0xF7	; 247
    29f6:	8c 93       	st	X, r24
							State = 1 ;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 59 02 	sts	0x0259, r24
    29fe:	6e c1       	rjmp	.+732    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTC,PIN3);
    2a00:	a5 e3       	ldi	r26, 0x35	; 53
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e5 e3       	ldi	r30, 0x35	; 53
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 60       	ori	r24, 0x08	; 8
    2a0c:	8c 93       	st	X, r24
							State = 0 ;
    2a0e:	10 92 59 02 	sts	0x0259, r1
    2a12:	64 c1       	rjmp	.+712    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN4 :
					if(State == 0)
    2a14:	80 91 59 02 	lds	r24, 0x0259
    2a18:	88 23       	and	r24, r24
    2a1a:	59 f4       	brne	.+22     	; 0x2a32 <DIO_TogglePin+0x5b8>
						{
							CLRBIT(PORTC,PIN4);
    2a1c:	a5 e3       	ldi	r26, 0x35	; 53
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e5 e3       	ldi	r30, 0x35	; 53
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	8f 7e       	andi	r24, 0xEF	; 239
    2a28:	8c 93       	st	X, r24
							State = 1 ;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	80 93 59 02 	sts	0x0259, r24
    2a30:	55 c1       	rjmp	.+682    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTC,PIN4);
    2a32:	a5 e3       	ldi	r26, 0x35	; 53
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e5 e3       	ldi	r30, 0x35	; 53
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	80 61       	ori	r24, 0x10	; 16
    2a3e:	8c 93       	st	X, r24
							State = 0 ;
    2a40:	10 92 59 02 	sts	0x0259, r1
    2a44:	4b c1       	rjmp	.+662    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN5 :
					if(State == 0)
    2a46:	80 91 59 02 	lds	r24, 0x0259
    2a4a:	88 23       	and	r24, r24
    2a4c:	59 f4       	brne	.+22     	; 0x2a64 <DIO_TogglePin+0x5ea>
								{
									CLRBIT(PORTC,PIN5);
    2a4e:	a5 e3       	ldi	r26, 0x35	; 53
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e5 e3       	ldi	r30, 0x35	; 53
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7d       	andi	r24, 0xDF	; 223
    2a5a:	8c 93       	st	X, r24
									State = 1 ;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	80 93 59 02 	sts	0x0259, r24
    2a62:	3c c1       	rjmp	.+632    	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTC,PIN5);
    2a64:	a5 e3       	ldi	r26, 0x35	; 53
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e5 e3       	ldi	r30, 0x35	; 53
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 62       	ori	r24, 0x20	; 32
    2a70:	8c 93       	st	X, r24
									State = 0 ;
    2a72:	10 92 59 02 	sts	0x0259, r1
    2a76:	32 c1       	rjmp	.+612    	; 0x2cdc <DIO_TogglePin+0x862>
								}
							break;
				case PIN6 :
					if(State == 0)
    2a78:	80 91 59 02 	lds	r24, 0x0259
    2a7c:	88 23       	and	r24, r24
    2a7e:	59 f4       	brne	.+22     	; 0x2a96 <DIO_TogglePin+0x61c>
								{
									CLRBIT(PORTC,PIN6);
    2a80:	a5 e3       	ldi	r26, 0x35	; 53
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e5 e3       	ldi	r30, 0x35	; 53
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	8f 7b       	andi	r24, 0xBF	; 191
    2a8c:	8c 93       	st	X, r24
									State = 1 ;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	80 93 59 02 	sts	0x0259, r24
    2a94:	23 c1       	rjmp	.+582    	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTC,PIN6);
    2a96:	a5 e3       	ldi	r26, 0x35	; 53
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e5 e3       	ldi	r30, 0x35	; 53
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 64       	ori	r24, 0x40	; 64
    2aa2:	8c 93       	st	X, r24
									State = 0 ;
    2aa4:	10 92 59 02 	sts	0x0259, r1
    2aa8:	19 c1       	rjmp	.+562    	; 0x2cdc <DIO_TogglePin+0x862>
								}
							break;
				case PIN7 :
					if(State == 0)
    2aaa:	80 91 59 02 	lds	r24, 0x0259
    2aae:	88 23       	and	r24, r24
    2ab0:	59 f4       	brne	.+22     	; 0x2ac8 <DIO_TogglePin+0x64e>
								{
									CLRBIT(PORTC,PIN7);
    2ab2:	a5 e3       	ldi	r26, 0x35	; 53
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e5 e3       	ldi	r30, 0x35	; 53
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8f 77       	andi	r24, 0x7F	; 127
    2abe:	8c 93       	st	X, r24
									State = 1 ;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	80 93 59 02 	sts	0x0259, r24
    2ac6:	0a c1       	rjmp	.+532    	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTC,PIN7);
    2ac8:	a5 e3       	ldi	r26, 0x35	; 53
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e5 e3       	ldi	r30, 0x35	; 53
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 68       	ori	r24, 0x80	; 128
    2ad4:	8c 93       	st	X, r24
									State = 0 ;
    2ad6:	10 92 59 02 	sts	0x0259, r1
    2ada:	00 c1       	rjmp	.+512    	; 0x2cdc <DIO_TogglePin+0x862>
							break;

				}
		break;
	case PORT3 :
		switch(Pin_number)
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	3c 83       	std	Y+4, r19	; 0x04
    2ae4:	2b 83       	std	Y+3, r18	; 0x03
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	83 30       	cpi	r24, 0x03	; 3
    2aec:	91 05       	cpc	r25, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <DIO_TogglePin+0x678>
    2af0:	79 c0       	rjmp	.+242    	; 0x2be4 <DIO_TogglePin+0x76a>
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	3c 81       	ldd	r19, Y+4	; 0x04
    2af6:	24 30       	cpi	r18, 0x04	; 4
    2af8:	31 05       	cpc	r19, r1
    2afa:	84 f4       	brge	.+32     	; 0x2b1c <DIO_TogglePin+0x6a2>
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	9c 81       	ldd	r25, Y+4	; 0x04
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	91 05       	cpc	r25, r1
    2b04:	e9 f1       	breq	.+122    	; 0x2b80 <DIO_TogglePin+0x706>
    2b06:	2b 81       	ldd	r18, Y+3	; 0x03
    2b08:	3c 81       	ldd	r19, Y+4	; 0x04
    2b0a:	22 30       	cpi	r18, 0x02	; 2
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	0c f0       	brlt	.+2      	; 0x2b12 <DIO_TogglePin+0x698>
    2b10:	50 c0       	rjmp	.+160    	; 0x2bb2 <DIO_TogglePin+0x738>
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	d1 f0       	breq	.+52     	; 0x2b4e <DIO_TogglePin+0x6d4>
    2b1a:	e0 c0       	rjmp	.+448    	; 0x2cdc <DIO_TogglePin+0x862>
    2b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b20:	25 30       	cpi	r18, 0x05	; 5
    2b22:	31 05       	cpc	r19, r1
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <DIO_TogglePin+0x6ae>
    2b26:	90 c0       	rjmp	.+288    	; 0x2c48 <DIO_TogglePin+0x7ce>
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	85 30       	cpi	r24, 0x05	; 5
    2b2e:	91 05       	cpc	r25, r1
    2b30:	0c f4       	brge	.+2      	; 0x2b34 <DIO_TogglePin+0x6ba>
    2b32:	71 c0       	rjmp	.+226    	; 0x2c16 <DIO_TogglePin+0x79c>
    2b34:	2b 81       	ldd	r18, Y+3	; 0x03
    2b36:	3c 81       	ldd	r19, Y+4	; 0x04
    2b38:	26 30       	cpi	r18, 0x06	; 6
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <DIO_TogglePin+0x6c6>
    2b3e:	9d c0       	rjmp	.+314    	; 0x2c7a <DIO_TogglePin+0x800>
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	87 30       	cpi	r24, 0x07	; 7
    2b46:	91 05       	cpc	r25, r1
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <DIO_TogglePin+0x6d2>
    2b4a:	b0 c0       	rjmp	.+352    	; 0x2cac <DIO_TogglePin+0x832>
    2b4c:	c7 c0       	rjmp	.+398    	; 0x2cdc <DIO_TogglePin+0x862>
				{
				case PIN0 :
					if(State == 0)
    2b4e:	80 91 59 02 	lds	r24, 0x0259
    2b52:	88 23       	and	r24, r24
    2b54:	59 f4       	brne	.+22     	; 0x2b6c <DIO_TogglePin+0x6f2>
					{
						CLRBIT(PORTD,PIN0);
    2b56:	a2 e3       	ldi	r26, 0x32	; 50
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e2 e3       	ldi	r30, 0x32	; 50
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	8e 7f       	andi	r24, 0xFE	; 254
    2b62:	8c 93       	st	X, r24
						State = 1 ;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	80 93 59 02 	sts	0x0259, r24
    2b6a:	b8 c0       	rjmp	.+368    	; 0x2cdc <DIO_TogglePin+0x862>
					}
					else
					{
						SETBIT(PORTD,PIN0);
    2b6c:	a2 e3       	ldi	r26, 0x32	; 50
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e2 e3       	ldi	r30, 0x32	; 50
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	81 60       	ori	r24, 0x01	; 1
    2b78:	8c 93       	st	X, r24
						State = 0 ;
    2b7a:	10 92 59 02 	sts	0x0259, r1
    2b7e:	ae c0       	rjmp	.+348    	; 0x2cdc <DIO_TogglePin+0x862>
					}
					break;
				case PIN1 :
					if(State == 0)
    2b80:	80 91 59 02 	lds	r24, 0x0259
    2b84:	88 23       	and	r24, r24
    2b86:	59 f4       	brne	.+22     	; 0x2b9e <DIO_TogglePin+0x724>
						{
							CLRBIT(PORTD,PIN1);
    2b88:	a2 e3       	ldi	r26, 0x32	; 50
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e2 e3       	ldi	r30, 0x32	; 50
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	8d 7f       	andi	r24, 0xFD	; 253
    2b94:	8c 93       	st	X, r24
							State = 1 ;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	80 93 59 02 	sts	0x0259, r24
    2b9c:	9f c0       	rjmp	.+318    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTD,PIN1);
    2b9e:	a2 e3       	ldi	r26, 0x32	; 50
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e2 e3       	ldi	r30, 0x32	; 50
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 60       	ori	r24, 0x02	; 2
    2baa:	8c 93       	st	X, r24
							State = 0 ;
    2bac:	10 92 59 02 	sts	0x0259, r1
    2bb0:	95 c0       	rjmp	.+298    	; 0x2cdc <DIO_TogglePin+0x862>
						}
					break;
				case PIN2 :
					if(State == 0)
    2bb2:	80 91 59 02 	lds	r24, 0x0259
    2bb6:	88 23       	and	r24, r24
    2bb8:	59 f4       	brne	.+22     	; 0x2bd0 <DIO_TogglePin+0x756>
						{
							CLRBIT(PORTD,PIN2);
    2bba:	a2 e3       	ldi	r26, 0x32	; 50
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e2 e3       	ldi	r30, 0x32	; 50
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8b 7f       	andi	r24, 0xFB	; 251
    2bc6:	8c 93       	st	X, r24
							State = 1 ;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 93 59 02 	sts	0x0259, r24
    2bce:	86 c0       	rjmp	.+268    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTD,PIN2);
    2bd0:	a2 e3       	ldi	r26, 0x32	; 50
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e2 e3       	ldi	r30, 0x32	; 50
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	84 60       	ori	r24, 0x04	; 4
    2bdc:	8c 93       	st	X, r24
							State = 0 ;
    2bde:	10 92 59 02 	sts	0x0259, r1
    2be2:	7c c0       	rjmp	.+248    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN3 :
					if(State == 0)
    2be4:	80 91 59 02 	lds	r24, 0x0259
    2be8:	88 23       	and	r24, r24
    2bea:	59 f4       	brne	.+22     	; 0x2c02 <DIO_TogglePin+0x788>
						{
							CLRBIT(PORTD,PIN3);
    2bec:	a2 e3       	ldi	r26, 0x32	; 50
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e2 e3       	ldi	r30, 0x32	; 50
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	87 7f       	andi	r24, 0xF7	; 247
    2bf8:	8c 93       	st	X, r24
							State = 1 ;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	80 93 59 02 	sts	0x0259, r24
    2c00:	6d c0       	rjmp	.+218    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
						SETBIT(PORTD,PIN3);
    2c02:	a2 e3       	ldi	r26, 0x32	; 50
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e2 e3       	ldi	r30, 0x32	; 50
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 60       	ori	r24, 0x08	; 8
    2c0e:	8c 93       	st	X, r24
						State = 0 ;
    2c10:	10 92 59 02 	sts	0x0259, r1
    2c14:	63 c0       	rjmp	.+198    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN4 :
					if(State == 0)
    2c16:	80 91 59 02 	lds	r24, 0x0259
    2c1a:	88 23       	and	r24, r24
    2c1c:	59 f4       	brne	.+22     	; 0x2c34 <DIO_TogglePin+0x7ba>
						{
							CLRBIT(PORTD,PIN4);
    2c1e:	a2 e3       	ldi	r26, 0x32	; 50
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e2 e3       	ldi	r30, 0x32	; 50
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 7e       	andi	r24, 0xEF	; 239
    2c2a:	8c 93       	st	X, r24
							State = 1 ;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	80 93 59 02 	sts	0x0259, r24
    2c32:	54 c0       	rjmp	.+168    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						else
						{
							SETBIT(PORTD,PIN4);
    2c34:	a2 e3       	ldi	r26, 0x32	; 50
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e2 e3       	ldi	r30, 0x32	; 50
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 61       	ori	r24, 0x10	; 16
    2c40:	8c 93       	st	X, r24
							State = 0 ;
    2c42:	10 92 59 02 	sts	0x0259, r1
    2c46:	4a c0       	rjmp	.+148    	; 0x2cdc <DIO_TogglePin+0x862>
						}
						break;
				case PIN5 :
					if(State == 0)
    2c48:	80 91 59 02 	lds	r24, 0x0259
    2c4c:	88 23       	and	r24, r24
    2c4e:	59 f4       	brne	.+22     	; 0x2c66 <DIO_TogglePin+0x7ec>
								{
									CLRBIT(PORTD,PIN5);
    2c50:	a2 e3       	ldi	r26, 0x32	; 50
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e2 e3       	ldi	r30, 0x32	; 50
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8f 7d       	andi	r24, 0xDF	; 223
    2c5c:	8c 93       	st	X, r24
									State = 1 ;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	80 93 59 02 	sts	0x0259, r24
    2c64:	3b c0       	rjmp	.+118    	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTD,PIN5);
    2c66:	a2 e3       	ldi	r26, 0x32	; 50
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e2 e3       	ldi	r30, 0x32	; 50
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 62       	ori	r24, 0x20	; 32
    2c72:	8c 93       	st	X, r24
									State = 0 ;
    2c74:	10 92 59 02 	sts	0x0259, r1
    2c78:	31 c0       	rjmp	.+98     	; 0x2cdc <DIO_TogglePin+0x862>
								}
							break;
				case PIN6 :
					if(State == 0)
    2c7a:	80 91 59 02 	lds	r24, 0x0259
    2c7e:	88 23       	and	r24, r24
    2c80:	59 f4       	brne	.+22     	; 0x2c98 <DIO_TogglePin+0x81e>
								{
									CLRBIT(PORTD,PIN6);
    2c82:	a2 e3       	ldi	r26, 0x32	; 50
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e2 e3       	ldi	r30, 0x32	; 50
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	8f 7b       	andi	r24, 0xBF	; 191
    2c8e:	8c 93       	st	X, r24
									State = 1 ;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	80 93 59 02 	sts	0x0259, r24
    2c96:	22 c0       	rjmp	.+68     	; 0x2cdc <DIO_TogglePin+0x862>
								}
								else
								{
									SETBIT(PORTD,PIN6);
    2c98:	a2 e3       	ldi	r26, 0x32	; 50
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e2 e3       	ldi	r30, 0x32	; 50
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	80 64       	ori	r24, 0x40	; 64
    2ca4:	8c 93       	st	X, r24
									State = 0 ;
    2ca6:	10 92 59 02 	sts	0x0259, r1
    2caa:	18 c0       	rjmp	.+48     	; 0x2cdc <DIO_TogglePin+0x862>
								}
							break;
				case PIN7 :
					if(State == 0)
    2cac:	80 91 59 02 	lds	r24, 0x0259
    2cb0:	88 23       	and	r24, r24
    2cb2:	59 f4       	brne	.+22     	; 0x2cca <DIO_TogglePin+0x850>
					{
						CLRBIT(PORTD,PIN7);
    2cb4:	a2 e3       	ldi	r26, 0x32	; 50
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e2 e3       	ldi	r30, 0x32	; 50
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8f 77       	andi	r24, 0x7F	; 127
    2cc0:	8c 93       	st	X, r24
						State = 1 ;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 59 02 	sts	0x0259, r24
    2cc8:	09 c0       	rjmp	.+18     	; 0x2cdc <DIO_TogglePin+0x862>
					}
					else
					{
						SETBIT(PORTD,PIN7);
    2cca:	a2 e3       	ldi	r26, 0x32	; 50
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e2 e3       	ldi	r30, 0x32	; 50
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	8c 93       	st	X, r24
						State = 0 ;
    2cd8:	10 92 59 02 	sts	0x0259, r1
					}
					break;
				}
		break;
	}
}
    2cdc:	2c 96       	adiw	r28, 0x0c	; 12
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <DIO_SetPortDirection>:
void DIO_SetPortDirection	 (U8 Port_number ,U8 Direction)
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <DIO_SetPortDirection+0x6>
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <DIO_SetPortDirection+0x8>
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port_number)
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	3c 83       	std	Y+4, r19	; 0x04
    2d06:	2b 83       	std	Y+3, r18	; 0x03
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	81 30       	cpi	r24, 0x01	; 1
    2d0e:	91 05       	cpc	r25, r1
    2d10:	d1 f0       	breq	.+52     	; 0x2d46 <DIO_SetPortDirection+0x58>
    2d12:	2b 81       	ldd	r18, Y+3	; 0x03
    2d14:	3c 81       	ldd	r19, Y+4	; 0x04
    2d16:	22 30       	cpi	r18, 0x02	; 2
    2d18:	31 05       	cpc	r19, r1
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <DIO_SetPortDirection+0x38>
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	61 f0       	breq	.+24     	; 0x2d3c <DIO_SetPortDirection+0x4e>
    2d24:	1e c0       	rjmp	.+60     	; 0x2d62 <DIO_SetPortDirection+0x74>
    2d26:	2b 81       	ldd	r18, Y+3	; 0x03
    2d28:	3c 81       	ldd	r19, Y+4	; 0x04
    2d2a:	22 30       	cpi	r18, 0x02	; 2
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	81 f0       	breq	.+32     	; 0x2d50 <DIO_SetPortDirection+0x62>
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	83 30       	cpi	r24, 0x03	; 3
    2d36:	91 05       	cpc	r25, r1
    2d38:	81 f0       	breq	.+32     	; 0x2d5a <DIO_SetPortDirection+0x6c>
    2d3a:	13 c0       	rjmp	.+38     	; 0x2d62 <DIO_SetPortDirection+0x74>
	{
		case PORT0 :
			DDRA = Direction;
    2d3c:	ea e3       	ldi	r30, 0x3A	; 58
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	80 83       	st	Z, r24
    2d44:	0e c0       	rjmp	.+28     	; 0x2d62 <DIO_SetPortDirection+0x74>
			break;
		case PORT1 :
			DDRB = Direction;
    2d46:	e7 e3       	ldi	r30, 0x37	; 55
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	80 83       	st	Z, r24
    2d4e:	09 c0       	rjmp	.+18     	; 0x2d62 <DIO_SetPortDirection+0x74>
			break;
		case PORT2 :
			DDRC = Direction;
    2d50:	e4 e3       	ldi	r30, 0x34	; 52
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	80 83       	st	Z, r24
    2d58:	04 c0       	rjmp	.+8      	; 0x2d62 <DIO_SetPortDirection+0x74>
			break;
		case PORT3 :
			DDRD = Direction;
    2d5a:	e1 e3       	ldi	r30, 0x31	; 49
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	80 83       	st	Z, r24
			break;
		default :
			break;
	}
}
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	08 95       	ret

00002d70 <DIO_SetPortValue>:
void DIO_SetPortValue		 (U8 Port_number ,U8 Value)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <DIO_SetPortValue+0x6>
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <DIO_SetPortValue+0x8>
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port_number)
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	3c 83       	std	Y+4, r19	; 0x04
    2d88:	2b 83       	std	Y+3, r18	; 0x03
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	91 05       	cpc	r25, r1
    2d92:	d1 f0       	breq	.+52     	; 0x2dc8 <DIO_SetPortValue+0x58>
    2d94:	2b 81       	ldd	r18, Y+3	; 0x03
    2d96:	3c 81       	ldd	r19, Y+4	; 0x04
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <DIO_SetPortValue+0x38>
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	61 f0       	breq	.+24     	; 0x2dbe <DIO_SetPortValue+0x4e>
    2da6:	1e c0       	rjmp	.+60     	; 0x2de4 <DIO_SetPortValue+0x74>
    2da8:	2b 81       	ldd	r18, Y+3	; 0x03
    2daa:	3c 81       	ldd	r19, Y+4	; 0x04
    2dac:	22 30       	cpi	r18, 0x02	; 2
    2dae:	31 05       	cpc	r19, r1
    2db0:	81 f0       	breq	.+32     	; 0x2dd2 <DIO_SetPortValue+0x62>
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	83 30       	cpi	r24, 0x03	; 3
    2db8:	91 05       	cpc	r25, r1
    2dba:	81 f0       	breq	.+32     	; 0x2ddc <DIO_SetPortValue+0x6c>
    2dbc:	13 c0       	rjmp	.+38     	; 0x2de4 <DIO_SetPortValue+0x74>
	{
		case PORT0 :
			PORTA = Value ;
    2dbe:	eb e3       	ldi	r30, 0x3B	; 59
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc4:	80 83       	st	Z, r24
    2dc6:	0e c0       	rjmp	.+28     	; 0x2de4 <DIO_SetPortValue+0x74>
			break;
		case PORT1 :
			PORTB = Value ;
    2dc8:	e8 e3       	ldi	r30, 0x38	; 56
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	80 83       	st	Z, r24
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <DIO_SetPortValue+0x74>
			break;
		case PORT2 :
			PORTC = Value ;
    2dd2:	e5 e3       	ldi	r30, 0x35	; 53
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	80 83       	st	Z, r24
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <DIO_SetPortValue+0x74>
			break;
		case PORT3 :
			PORTD = Value ;
    2ddc:	e2 e3       	ldi	r30, 0x32	; 50
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	80 83       	st	Z, r24
			break;
		default :
			break;
	}
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <KeyPressed>:

static U8 State = RELEASED ;
static U16 Count = 0 ;

U8 KeyPressed()
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <KeyPressed+0x6>
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <KeyPressed+0x8>
    2dfa:	0f 92       	push	r0
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
	U8 RetVal = RELEASED  ;
    2e00:	1b 82       	std	Y+3, r1	; 0x03

	U16 Period = 200 ;
    2e02:	88 ec       	ldi	r24, 0xC8	; 200
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01

	switch(State){
    2e0a:	80 91 5a 02 	lds	r24, 0x025A
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	3d 83       	std	Y+5, r19	; 0x05
    2e14:	2c 83       	std	Y+4, r18	; 0x04
    2e16:	8c 81       	ldd	r24, Y+4	; 0x04
    2e18:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	a9 f1       	breq	.+106    	; 0x2e8a <KeyPressed+0x98>
    2e20:	2c 81       	ldd	r18, Y+4	; 0x04
    2e22:	3d 81       	ldd	r19, Y+5	; 0x05
    2e24:	22 30       	cpi	r18, 0x02	; 2
    2e26:	31 05       	cpc	r19, r1
    2e28:	2c f4       	brge	.+10     	; 0x2e34 <KeyPressed+0x42>
    2e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	69 f0       	breq	.+26     	; 0x2e4c <KeyPressed+0x5a>
    2e32:	7f c0       	rjmp	.+254    	; 0x2f32 <KeyPressed+0x140>
    2e34:	2c 81       	ldd	r18, Y+4	; 0x04
    2e36:	3d 81       	ldd	r19, Y+5	; 0x05
    2e38:	22 30       	cpi	r18, 0x02	; 2
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	91 f0       	breq	.+36     	; 0x2e62 <KeyPressed+0x70>
    2e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e40:	9d 81       	ldd	r25, Y+5	; 0x05
    2e42:	83 30       	cpi	r24, 0x03	; 3
    2e44:	91 05       	cpc	r25, r1
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <KeyPressed+0x58>
    2e48:	4f c0       	rjmp	.+158    	; 0x2ee8 <KeyPressed+0xf6>
    2e4a:	73 c0       	rjmp	.+230    	; 0x2f32 <KeyPressed+0x140>
		case RELEASED:
			if(DIO_GetPinValue(Button) == LOW)
    2e4c:	83 e0       	ldi	r24, 0x03	; 3
    2e4e:	67 e0       	ldi	r22, 0x07	; 7
    2e50:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    2e54:	88 23       	and	r24, r24
    2e56:	09 f0       	breq	.+2      	; 0x2e5a <KeyPressed+0x68>
    2e58:	6c c0       	rjmp	.+216    	; 0x2f32 <KeyPressed+0x140>
			{
				State = PREPRESSED;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	80 93 5a 02 	sts	0x025A, r24
    2e60:	68 c0       	rjmp	.+208    	; 0x2f32 <KeyPressed+0x140>
			}
			break;
		case PRESSED:
			if(DIO_GetPinValue(Button) == HIGH)
    2e62:	83 e0       	ldi	r24, 0x03	; 3
    2e64:	67 e0       	ldi	r22, 0x07	; 7
    2e66:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <KeyPressed+0x7e>
    2e6e:	61 c0       	rjmp	.+194    	; 0x2f32 <KeyPressed+0x140>
			{
				State = PRERELEASED;
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	80 93 5a 02 	sts	0x025A, r24
    2e76:	5d c0       	rjmp	.+186    	; 0x2f32 <KeyPressed+0x140>
			}
			break;
		case PREPRESSED :
			while(Count < Period && DIO_GetPinValue(Button) == LOW)
			{
				Count++;
    2e78:	80 91 5b 02 	lds	r24, 0x025B
    2e7c:	90 91 5c 02 	lds	r25, 0x025C
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	90 93 5c 02 	sts	0x025C, r25
    2e86:	80 93 5b 02 	sts	0x025B, r24
			{
				State = PRERELEASED;
			}
			break;
		case PREPRESSED :
			while(Count < Period && DIO_GetPinValue(Button) == LOW)
    2e8a:	20 91 5b 02 	lds	r18, 0x025B
    2e8e:	30 91 5c 02 	lds	r19, 0x025C
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	28 17       	cp	r18, r24
    2e98:	39 07       	cpc	r19, r25
    2e9a:	30 f4       	brcc	.+12     	; 0x2ea8 <KeyPressed+0xb6>
    2e9c:	83 e0       	ldi	r24, 0x03	; 3
    2e9e:	67 e0       	ldi	r22, 0x07	; 7
    2ea0:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    2ea4:	88 23       	and	r24, r24
    2ea6:	41 f3       	breq	.-48     	; 0x2e78 <KeyPressed+0x86>
			{
				Count++;
			}
			if(Count == Period)
    2ea8:	20 91 5b 02 	lds	r18, 0x025B
    2eac:	30 91 5c 02 	lds	r19, 0x025C
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb4:	28 17       	cp	r18, r24
    2eb6:	39 07       	cpc	r19, r25
    2eb8:	29 f4       	brne	.+10     	; 0x2ec4 <KeyPressed+0xd2>
			{
				RetVal = LOW;
    2eba:	1b 82       	std	Y+3, r1	; 0x03
				State = PRESSED;
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	80 93 5a 02 	sts	0x025A, r24
    2ec2:	04 c0       	rjmp	.+8      	; 0x2ecc <KeyPressed+0xda>
			}
			else
			{
				RetVal = HIGH;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
				State = RELEASED;
    2ec8:	10 92 5a 02 	sts	0x025A, r1
			}
			Count = 0;
    2ecc:	10 92 5c 02 	sts	0x025C, r1
    2ed0:	10 92 5b 02 	sts	0x025B, r1
    2ed4:	2e c0       	rjmp	.+92     	; 0x2f32 <KeyPressed+0x140>
			break;
		case PRERELEASED :
			while( (Count < Period) && (DIO_GetPinValue(Button) == HIGH))
			{
				Count++;
    2ed6:	80 91 5b 02 	lds	r24, 0x025B
    2eda:	90 91 5c 02 	lds	r25, 0x025C
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	90 93 5c 02 	sts	0x025C, r25
    2ee4:	80 93 5b 02 	sts	0x025B, r24
				State = RELEASED;
			}
			Count = 0;
			break;
		case PRERELEASED :
			while( (Count < Period) && (DIO_GetPinValue(Button) == HIGH))
    2ee8:	20 91 5b 02 	lds	r18, 0x025B
    2eec:	30 91 5c 02 	lds	r19, 0x025C
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	28 17       	cp	r18, r24
    2ef6:	39 07       	cpc	r19, r25
    2ef8:	30 f4       	brcc	.+12     	; 0x2f06 <KeyPressed+0x114>
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	67 e0       	ldi	r22, 0x07	; 7
    2efe:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	41 f3       	breq	.-48     	; 0x2ed6 <KeyPressed+0xe4>
			{
				Count++;
			}
			if(Count == Period)
    2f06:	20 91 5b 02 	lds	r18, 0x025B
    2f0a:	30 91 5c 02 	lds	r19, 0x025C
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	28 17       	cp	r18, r24
    2f14:	39 07       	cpc	r19, r25
    2f16:	29 f4       	brne	.+10     	; 0x2f22 <KeyPressed+0x130>
			{
				RetVal = HIGH;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
				State = RELEASED;
    2f1c:	10 92 5a 02 	sts	0x025A, r1
    2f20:	04 c0       	rjmp	.+8      	; 0x2f2a <KeyPressed+0x138>
			}
			else
			{
				RetVal = LOW;
    2f22:	1b 82       	std	Y+3, r1	; 0x03
				State = PRESSED;
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	80 93 5a 02 	sts	0x025A, r24
			}
			Count = 0;
    2f2a:	10 92 5c 02 	sts	0x025C, r1
    2f2e:	10 92 5b 02 	sts	0x025B, r1
		default:

			break;
		}

	return RetVal ;
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <EXTINT0_SETISR>:
static void (*Gptr2) (void);


/* INT0 */
void EXTINT0_SETISR(void (*ptr0) (void))
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <EXTINT0_SETISR+0x6>
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
	Gptr0=ptr0;
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	90 93 5e 02 	sts	0x025E, r25
    2f5a:	80 93 5d 02 	sts	0x025D, r24
}
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <EXTINT0_Init>:
void EXTINT0_Init (void)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORT3,PIN2,INPUT);   	// External INT0
    2f70:	83 e0       	ldi	r24, 0x03	; 3
    2f72:	62 e0       	ldi	r22, 0x02	; 2
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinPullUp(PORT3,PIN2); 				// INT0 Pull up
    2f7a:	83 e0       	ldi	r24, 0x03	; 3
    2f7c:	62 e0       	ldi	r22, 0x02	; 2
    2f7e:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>

	SETBIT(SREG,7);								// General INT Enable
    2f82:	af e5       	ldi	r26, 0x5F	; 95
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	ef e5       	ldi	r30, 0x5F	; 95
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 68       	ori	r24, 0x80	; 128
    2f8e:	8c 93       	st	X, r24

	SETBIT(GICR,6);								// INT0 ENable
    2f90:	ab e5       	ldi	r26, 0x5B	; 91
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	eb e5       	ldi	r30, 0x5B	; 91
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	80 64       	ori	r24, 0x40	; 64
    2f9c:	8c 93       	st	X, r24

	switch(INT0_Mode)
	{
	case Fall :
		SETBIT(MCUCR,1); 							// INT0 FALLING EDGE
    2f9e:	a5 e5       	ldi	r26, 0x55	; 85
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	e5 e5       	ldi	r30, 0x55	; 85
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	82 60       	ori	r24, 0x02	; 2
    2faa:	8c 93       	st	X, r24
		CLRBIT(MCUCR,0);
    2fac:	a5 e5       	ldi	r26, 0x55	; 85
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e5 e5       	ldi	r30, 0x55	; 85
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	8e 7f       	andi	r24, 0xFE	; 254
    2fb8:	8c 93       	st	X, r24
		CLRBIT(MCUCR,0);
		break;
	default :
		break;
	}
}
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <EXTINT1_SETISR>:


/* INT1 */
void EXTINT1_SETISR(void (*ptr1) (void))
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <EXTINT1_SETISR+0x6>
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	89 83       	std	Y+1, r24	; 0x01
	Gptr1=ptr1;
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd2:	90 93 60 02 	sts	0x0260, r25
    2fd6:	80 93 5f 02 	sts	0x025F, r24
}
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <EXTINT1_Init>:
void EXTINT1_Init (void)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORT3,PIN3,INPUT);   	// External INT1
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	63 e0       	ldi	r22, 0x03	; 3
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinPullUp(PORT3,PIN3); 				// INT1 Pull up
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	63 e0       	ldi	r22, 0x03	; 3
    2ffa:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>

	SETBIT(SREG,7);								// General INT Enable
    2ffe:	af e5       	ldi	r26, 0x5F	; 95
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	ef e5       	ldi	r30, 0x5F	; 95
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	80 68       	ori	r24, 0x80	; 128
    300a:	8c 93       	st	X, r24

	SETBIT(GICR,7);								// INT1 Enable
    300c:	ab e5       	ldi	r26, 0x5B	; 91
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	eb e5       	ldi	r30, 0x5B	; 91
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	80 81       	ld	r24, Z
    3016:	80 68       	ori	r24, 0x80	; 128
    3018:	8c 93       	st	X, r24

	switch(INT1_Mode)
	{
	case Fall :
		SETBIT(MCUCR,2); 							// INT1 FALLING EDGE
    301a:	a5 e5       	ldi	r26, 0x55	; 85
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e5 e5       	ldi	r30, 0x55	; 85
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	84 60       	ori	r24, 0x04	; 4
    3026:	8c 93       	st	X, r24
		CLRBIT(MCUCR,3);
    3028:	a5 e5       	ldi	r26, 0x55	; 85
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e5 e5       	ldi	r30, 0x55	; 85
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	87 7f       	andi	r24, 0xF7	; 247
    3034:	8c 93       	st	X, r24
		CLRBIT(MCUCR,3);
		break;
	default :
		break;
	}
}
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <EXTINT2_SETISR>:


/* INT2 */
void EXTINT2_SETISR(void (*ptr2) (void))
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <EXTINT2_SETISR+0x6>
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
	Gptr2=ptr2;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	90 93 62 02 	sts	0x0262, r25
    3052:	80 93 61 02 	sts	0x0261, r24
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <EXTINT2_Init>:
void EXTINT2_Init (void)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORT1,PIN2,INPUT);   	// External INT2
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	62 e0       	ldi	r22, 0x02	; 2
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinPullUp(PORT1,PIN2); 				// INT2 Pull up
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	62 e0       	ldi	r22, 0x02	; 2
    3076:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>

	SETBIT(SREG,7);								// General INT Enable
    307a:	af e5       	ldi	r26, 0x5F	; 95
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ef e5       	ldi	r30, 0x5F	; 95
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	80 68       	ori	r24, 0x80	; 128
    3086:	8c 93       	st	X, r24

	SETBIT(GICR,5);								// INT2 Enable
    3088:	ab e5       	ldi	r26, 0x5B	; 91
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	eb e5       	ldi	r30, 0x5B	; 91
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	80 62       	ori	r24, 0x20	; 32
    3094:	8c 93       	st	X, r24

	switch(INT2_Mode)
	{
	case Fall :
		CLRBIT(MCUCSR,6);							// INT2 Falling Edge
    3096:	a4 e5       	ldi	r26, 0x54	; 84
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e4 e5       	ldi	r30, 0x54	; 84
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	8f 7b       	andi	r24, 0xBF	; 191
    30a2:	8c 93       	st	X, r24
		SETBIT(MCUCSR,6);							// INT2 Rising Edge
		break;
	default :
		break;
	}
}
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <__vector_1>:

/*ISRs*/
ISR(INT0_vect)
{
    30aa:	1f 92       	push	r1
    30ac:	0f 92       	push	r0
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	0f 92       	push	r0
    30b2:	11 24       	eor	r1, r1
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
	Gptr0();
    30d4:	e0 91 5d 02 	lds	r30, 0x025D
    30d8:	f0 91 5e 02 	lds	r31, 0x025E
    30dc:	09 95       	icall
}
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	ff 91       	pop	r31
    30e4:	ef 91       	pop	r30
    30e6:	bf 91       	pop	r27
    30e8:	af 91       	pop	r26
    30ea:	9f 91       	pop	r25
    30ec:	8f 91       	pop	r24
    30ee:	7f 91       	pop	r23
    30f0:	6f 91       	pop	r22
    30f2:	5f 91       	pop	r21
    30f4:	4f 91       	pop	r20
    30f6:	3f 91       	pop	r19
    30f8:	2f 91       	pop	r18
    30fa:	0f 90       	pop	r0
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	0f 90       	pop	r0
    3100:	1f 90       	pop	r1
    3102:	18 95       	reti

00003104 <__vector_2>:
ISR(INT1_vect)
{
    3104:	1f 92       	push	r1
    3106:	0f 92       	push	r0
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	0f 92       	push	r0
    310c:	11 24       	eor	r1, r1
    310e:	2f 93       	push	r18
    3110:	3f 93       	push	r19
    3112:	4f 93       	push	r20
    3114:	5f 93       	push	r21
    3116:	6f 93       	push	r22
    3118:	7f 93       	push	r23
    311a:	8f 93       	push	r24
    311c:	9f 93       	push	r25
    311e:	af 93       	push	r26
    3120:	bf 93       	push	r27
    3122:	ef 93       	push	r30
    3124:	ff 93       	push	r31
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
	Gptr1();
    312e:	e0 91 5f 02 	lds	r30, 0x025F
    3132:	f0 91 60 02 	lds	r31, 0x0260
    3136:	09 95       	icall
}
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	ff 91       	pop	r31
    313e:	ef 91       	pop	r30
    3140:	bf 91       	pop	r27
    3142:	af 91       	pop	r26
    3144:	9f 91       	pop	r25
    3146:	8f 91       	pop	r24
    3148:	7f 91       	pop	r23
    314a:	6f 91       	pop	r22
    314c:	5f 91       	pop	r21
    314e:	4f 91       	pop	r20
    3150:	3f 91       	pop	r19
    3152:	2f 91       	pop	r18
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	0f 90       	pop	r0
    315a:	1f 90       	pop	r1
    315c:	18 95       	reti

0000315e <__vector_3>:
ISR(INT2_vect)
{
    315e:	1f 92       	push	r1
    3160:	0f 92       	push	r0
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	0f 92       	push	r0
    3166:	11 24       	eor	r1, r1
    3168:	2f 93       	push	r18
    316a:	3f 93       	push	r19
    316c:	4f 93       	push	r20
    316e:	5f 93       	push	r21
    3170:	6f 93       	push	r22
    3172:	7f 93       	push	r23
    3174:	8f 93       	push	r24
    3176:	9f 93       	push	r25
    3178:	af 93       	push	r26
    317a:	bf 93       	push	r27
    317c:	ef 93       	push	r30
    317e:	ff 93       	push	r31
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	Gptr2();
    3188:	e0 91 61 02 	lds	r30, 0x0261
    318c:	f0 91 62 02 	lds	r31, 0x0262
    3190:	09 95       	icall
}
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	ff 91       	pop	r31
    3198:	ef 91       	pop	r30
    319a:	bf 91       	pop	r27
    319c:	af 91       	pop	r26
    319e:	9f 91       	pop	r25
    31a0:	8f 91       	pop	r24
    31a2:	7f 91       	pop	r23
    31a4:	6f 91       	pop	r22
    31a6:	5f 91       	pop	r21
    31a8:	4f 91       	pop	r20
    31aa:	3f 91       	pop	r19
    31ac:	2f 91       	pop	r18
    31ae:	0f 90       	pop	r0
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	0f 90       	pop	r0
    31b4:	1f 90       	pop	r1
    31b6:	18 95       	reti

000031b8 <Keypad_Init>:
#include "Registers.h"
#include "DIO.h"
#include "Keypad.h"

void Keypad_Init(void)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
#if C4_PIN == UNINIT
#error "Missing Initialization"
#endif


	DIO_SetPinDirection(R1_PORT,R1_PIN,OUTPUT);		// 4 ROW (OUTPUT)
    31c0:	83 e0       	ldi	r24, 0x03	; 3
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	41 e0       	ldi	r20, 0x01	; 1
    31c6:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(R2_PORT,R2_PIN,OUTPUT);
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(R3_PORT,R3_PIN,OUTPUT);
    31d4:	83 e0       	ldi	r24, 0x03	; 3
    31d6:	62 e0       	ldi	r22, 0x02	; 2
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(R4_PORT,R4_PIN,OUTPUT);
    31de:	83 e0       	ldi	r24, 0x03	; 3
    31e0:	63 e0       	ldi	r22, 0x03	; 3
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>

	DIO_SetPinDirection(C1_PORT,C1_PIN,INPUT);		// 4 Coloum (INPUT)
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	64 e0       	ldi	r22, 0x04	; 4
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(C3_PORT,C2_PIN,INPUT);
    31f2:	83 e0       	ldi	r24, 0x03	; 3
    31f4:	65 e0       	ldi	r22, 0x05	; 5
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(C3_PORT,C3_PIN,INPUT);
    31fc:	83 e0       	ldi	r24, 0x03	; 3
    31fe:	66 e0       	ldi	r22, 0x06	; 6
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(C4_PORT,C4_PIN,INPUT);
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	67 e0       	ldi	r22, 0x07	; 7
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>

	DIO_SetPinPullUp(C1_PORT,C1_PIN);
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	64 e0       	ldi	r22, 0x04	; 4
    3214:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>
	DIO_SetPinPullUp(C2_PORT,C2_PIN);
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	65 e0       	ldi	r22, 0x05	; 5
    321c:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>
	DIO_SetPinPullUp(C3_PORT,C3_PIN);
    3220:	83 e0       	ldi	r24, 0x03	; 3
    3222:	66 e0       	ldi	r22, 0x06	; 6
    3224:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>
	DIO_SetPinPullUp(C4_PORT,C4_PIN);
    3228:	83 e0       	ldi	r24, 0x03	; 3
    322a:	67 e0       	ldi	r22, 0x07	; 7
    322c:	0e 94 43 0c 	call	0x1886	; 0x1886 <DIO_SetPinPullUp>

	DIO_SetPinValue(R1_PORT,R1_PIN,HIGH);
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R2_PORT,R2_PIN,HIGH);
    323a:	83 e0       	ldi	r24, 0x03	; 3
    323c:	61 e0       	ldi	r22, 0x01	; 1
    323e:	41 e0       	ldi	r20, 0x01	; 1
    3240:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R3_PORT,R3_PIN,HIGH);
    3244:	83 e0       	ldi	r24, 0x03	; 3
    3246:	62 e0       	ldi	r22, 0x02	; 2
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R4_PORT,R4_PIN,HIGH);
    324e:	83 e0       	ldi	r24, 0x03	; 3
    3250:	63 e0       	ldi	r22, 0x03	; 3
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>

}
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <Keypad_Scan>:



U8 Keypad_Scan(void)
{
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	0f 92       	push	r0
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
	//INITIALIZING
	U8 RetVal = 100 ;
    3268:	84 e6       	ldi	r24, 0x64	; 100
    326a:	89 83       	std	Y+1, r24	; 0x01


	DIO_SetPinValue(R1_PORT,R1_PIN,LOW);
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R2_PORT,R2_PIN,HIGH);
    3276:	83 e0       	ldi	r24, 0x03	; 3
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R3_PORT,R3_PIN,HIGH);
    3280:	83 e0       	ldi	r24, 0x03	; 3
    3282:	62 e0       	ldi	r22, 0x02	; 2
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R4_PORT,R4_PIN,HIGH);
    328a:	83 e0       	ldi	r24, 0x03	; 3
    328c:	63 e0       	ldi	r22, 0x03	; 3
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>

	if(DIO_GetPinValue(C1_PORT,C1_PIN) == (U8)0)
    3294:	83 e0       	ldi	r24, 0x03	; 3
    3296:	64 e0       	ldi	r22, 0x04	; 4
    3298:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    329c:	88 23       	and	r24, r24
    329e:	11 f4       	brne	.+4      	; 0x32a4 <Keypad_Scan+0x46>
		{
			RetVal=0;
    32a0:	19 82       	std	Y+1, r1	; 0x01
    32a2:	1a c0       	rjmp	.+52     	; 0x32d8 <Keypad_Scan+0x7a>
		}
	else if (DIO_GetPinValue(C2_PORT,C2_PIN) == (U8)0)
    32a4:	83 e0       	ldi	r24, 0x03	; 3
    32a6:	65 e0       	ldi	r22, 0x05	; 5
    32a8:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    32ac:	88 23       	and	r24, r24
    32ae:	19 f4       	brne	.+6      	; 0x32b6 <Keypad_Scan+0x58>
		{
			RetVal=1;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	11 c0       	rjmp	.+34     	; 0x32d8 <Keypad_Scan+0x7a>
		}
	else if (DIO_GetPinValue(C3_PORT,C3_PIN) == (U8)0)
    32b6:	83 e0       	ldi	r24, 0x03	; 3
    32b8:	66 e0       	ldi	r22, 0x06	; 6
    32ba:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    32be:	88 23       	and	r24, r24
    32c0:	19 f4       	brne	.+6      	; 0x32c8 <Keypad_Scan+0x6a>
		{
			RetVal=2;
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	08 c0       	rjmp	.+16     	; 0x32d8 <Keypad_Scan+0x7a>
		}
	else if (DIO_GetPinValue(C4_PORT,C4_PIN) == (U8)0)
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	67 e0       	ldi	r22, 0x07	; 7
    32cc:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    32d0:	88 23       	and	r24, r24
    32d2:	11 f4       	brne	.+4      	; 0x32d8 <Keypad_Scan+0x7a>
		{
			RetVal=3;
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	89 83       	std	Y+1, r24	; 0x01
		}
	else
		{

		}
	DIO_SetPinValue(R1_PORT,R1_PIN,HIGH);
    32d8:	83 e0       	ldi	r24, 0x03	; 3
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	41 e0       	ldi	r20, 0x01	; 1
    32de:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R2_PORT,R2_PIN,LOW);
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R3_PORT,R3_PIN,HIGH);
    32ec:	83 e0       	ldi	r24, 0x03	; 3
    32ee:	62 e0       	ldi	r22, 0x02	; 2
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R4_PORT,R4_PIN,HIGH);
    32f6:	83 e0       	ldi	r24, 0x03	; 3
    32f8:	63 e0       	ldi	r22, 0x03	; 3
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>

	if(DIO_GetPinValue(C1_PORT,C1_PIN) == (U8)0)
    3300:	83 e0       	ldi	r24, 0x03	; 3
    3302:	64 e0       	ldi	r22, 0x04	; 4
    3304:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    3308:	88 23       	and	r24, r24
    330a:	19 f4       	brne	.+6      	; 0x3312 <Keypad_Scan+0xb4>
		{
			RetVal=4;
    330c:	84 e0       	ldi	r24, 0x04	; 4
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	1a c0       	rjmp	.+52     	; 0x3346 <Keypad_Scan+0xe8>
		}
		else if (DIO_GetPinValue(C2_PORT,C2_PIN) == (U8)0)
    3312:	83 e0       	ldi	r24, 0x03	; 3
    3314:	65 e0       	ldi	r22, 0x05	; 5
    3316:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    331a:	88 23       	and	r24, r24
    331c:	19 f4       	brne	.+6      	; 0x3324 <Keypad_Scan+0xc6>
		{
			RetVal=5;
    331e:	85 e0       	ldi	r24, 0x05	; 5
    3320:	89 83       	std	Y+1, r24	; 0x01
    3322:	11 c0       	rjmp	.+34     	; 0x3346 <Keypad_Scan+0xe8>
		}
		else if (DIO_GetPinValue(C3_PORT,C3_PIN) == (U8)0)
    3324:	83 e0       	ldi	r24, 0x03	; 3
    3326:	66 e0       	ldi	r22, 0x06	; 6
    3328:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    332c:	88 23       	and	r24, r24
    332e:	19 f4       	brne	.+6      	; 0x3336 <Keypad_Scan+0xd8>
		{
			RetVal=6;
    3330:	86 e0       	ldi	r24, 0x06	; 6
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	08 c0       	rjmp	.+16     	; 0x3346 <Keypad_Scan+0xe8>
		}
	else if (DIO_GetPinValue(C4_PORT,C4_PIN) == (U8)0)
    3336:	83 e0       	ldi	r24, 0x03	; 3
    3338:	67 e0       	ldi	r22, 0x07	; 7
    333a:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    333e:	88 23       	and	r24, r24
    3340:	11 f4       	brne	.+4      	; 0x3346 <Keypad_Scan+0xe8>
		{
			RetVal=7;
    3342:	87 e0       	ldi	r24, 0x07	; 7
    3344:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	DIO_SetPinValue(R1_PORT,R1_PIN,HIGH);
    3346:	83 e0       	ldi	r24, 0x03	; 3
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	41 e0       	ldi	r20, 0x01	; 1
    334c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R2_PORT,R2_PIN,HIGH);
    3350:	83 e0       	ldi	r24, 0x03	; 3
    3352:	61 e0       	ldi	r22, 0x01	; 1
    3354:	41 e0       	ldi	r20, 0x01	; 1
    3356:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R3_PORT,R3_PIN,LOW);
    335a:	83 e0       	ldi	r24, 0x03	; 3
    335c:	62 e0       	ldi	r22, 0x02	; 2
    335e:	40 e0       	ldi	r20, 0x00	; 0
    3360:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R4_PORT,R4_PIN,HIGH);
    3364:	83 e0       	ldi	r24, 0x03	; 3
    3366:	63 e0       	ldi	r22, 0x03	; 3
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>

	if(DIO_GetPinValue(C1_PORT,C1_PIN) == (U8)0)
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	64 e0       	ldi	r22, 0x04	; 4
    3372:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    3376:	88 23       	and	r24, r24
    3378:	19 f4       	brne	.+6      	; 0x3380 <Keypad_Scan+0x122>
		{
			RetVal=8;
    337a:	88 e0       	ldi	r24, 0x08	; 8
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	1a c0       	rjmp	.+52     	; 0x33b4 <Keypad_Scan+0x156>
		}
		else if (DIO_GetPinValue(C2_PORT,C2_PIN) == (U8)0)
    3380:	83 e0       	ldi	r24, 0x03	; 3
    3382:	65 e0       	ldi	r22, 0x05	; 5
    3384:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    3388:	88 23       	and	r24, r24
    338a:	19 f4       	brne	.+6      	; 0x3392 <Keypad_Scan+0x134>
		{
			RetVal=9;
    338c:	89 e0       	ldi	r24, 0x09	; 9
    338e:	89 83       	std	Y+1, r24	; 0x01
    3390:	11 c0       	rjmp	.+34     	; 0x33b4 <Keypad_Scan+0x156>
		}
		else if (DIO_GetPinValue(C3_PORT,C3_PIN) == (U8)0)
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	66 e0       	ldi	r22, 0x06	; 6
    3396:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    339a:	88 23       	and	r24, r24
    339c:	19 f4       	brne	.+6      	; 0x33a4 <Keypad_Scan+0x146>
		{
			RetVal=10;
    339e:	8a e0       	ldi	r24, 0x0A	; 10
    33a0:	89 83       	std	Y+1, r24	; 0x01
    33a2:	08 c0       	rjmp	.+16     	; 0x33b4 <Keypad_Scan+0x156>
		}
		else if (DIO_GetPinValue(C4_PORT,C4_PIN) == (U8)0)
    33a4:	83 e0       	ldi	r24, 0x03	; 3
    33a6:	67 e0       	ldi	r22, 0x07	; 7
    33a8:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    33ac:	88 23       	and	r24, r24
    33ae:	11 f4       	brne	.+4      	; 0x33b4 <Keypad_Scan+0x156>
		{
			RetVal=11;
    33b0:	8b e0       	ldi	r24, 0x0B	; 11
    33b2:	89 83       	std	Y+1, r24	; 0x01
		else
		{

		}

	DIO_SetPinValue(R1_PORT,R1_PIN,HIGH);
    33b4:	83 e0       	ldi	r24, 0x03	; 3
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R2_PORT,R2_PIN,HIGH);
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R3_PORT,R3_PIN,HIGH);
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	62 e0       	ldi	r22, 0x02	; 2
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(R4_PORT,R4_PIN,LOW);
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	63 e0       	ldi	r22, 0x03	; 3
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>

	if(DIO_GetPinValue(C1_PORT,C1_PIN) == (U8)0)
    33dc:	83 e0       	ldi	r24, 0x03	; 3
    33de:	64 e0       	ldi	r22, 0x04	; 4
    33e0:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    33e4:	88 23       	and	r24, r24
    33e6:	19 f4       	brne	.+6      	; 0x33ee <Keypad_Scan+0x190>
			{
				RetVal=12;
    33e8:	8c e0       	ldi	r24, 0x0C	; 12
    33ea:	89 83       	std	Y+1, r24	; 0x01
    33ec:	1a c0       	rjmp	.+52     	; 0x3422 <Keypad_Scan+0x1c4>
			}
	else if (DIO_GetPinValue(C2_PORT,C2_PIN) == (U8)0)
    33ee:	83 e0       	ldi	r24, 0x03	; 3
    33f0:	65 e0       	ldi	r22, 0x05	; 5
    33f2:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    33f6:	88 23       	and	r24, r24
    33f8:	19 f4       	brne	.+6      	; 0x3400 <Keypad_Scan+0x1a2>
			{
				RetVal=13;
    33fa:	8d e0       	ldi	r24, 0x0D	; 13
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	11 c0       	rjmp	.+34     	; 0x3422 <Keypad_Scan+0x1c4>
			}
	else if (DIO_GetPinValue(C3_PORT,C3_PIN) == (U8)0)
    3400:	83 e0       	ldi	r24, 0x03	; 3
    3402:	66 e0       	ldi	r22, 0x06	; 6
    3404:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    3408:	88 23       	and	r24, r24
    340a:	19 f4       	brne	.+6      	; 0x3412 <Keypad_Scan+0x1b4>
			{
				RetVal=14;
    340c:	8e e0       	ldi	r24, 0x0E	; 14
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	08 c0       	rjmp	.+16     	; 0x3422 <Keypad_Scan+0x1c4>
			}
	else if (DIO_GetPinValue(C4_PORT,C4_PIN) == (U8)0)
    3412:	83 e0       	ldi	r24, 0x03	; 3
    3414:	67 e0       	ldi	r22, 0x07	; 7
    3416:	0e 94 c4 11 	call	0x2388	; 0x2388 <DIO_GetPinValue>
    341a:	88 23       	and	r24, r24
    341c:	11 f4       	brne	.+4      	; 0x3422 <Keypad_Scan+0x1c4>
			{
				RetVal=15;
    341e:	8f e0       	ldi	r24, 0x0F	; 15
    3420:	89 83       	std	Y+1, r24	; 0x01
	else
			{

			}

	return RetVal ;
    3422:	89 81       	ldd	r24, Y+1	; 0x01
}
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <LCD_Init>:
#include "DIO.h"
#include "LCD.h"


void LCD_Init(void)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	a7 97       	sbiw	r28, 0x27	; 39
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
	char Welcome[20] = {"Hello World"};
    3440:	ce 01       	movw	r24, r28
    3442:	0f 96       	adiw	r24, 0x0f	; 15
    3444:	9c a3       	std	Y+36, r25	; 0x24
    3446:	8b a3       	std	Y+35, r24	; 0x23
    3448:	a0 e6       	ldi	r26, 0x60	; 96
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	be a3       	std	Y+38, r27	; 0x26
    344e:	ad a3       	std	Y+37, r26	; 0x25
    3450:	bc e0       	ldi	r27, 0x0C	; 12
    3452:	bf a3       	std	Y+39, r27	; 0x27
    3454:	ed a1       	ldd	r30, Y+37	; 0x25
    3456:	fe a1       	ldd	r31, Y+38	; 0x26
    3458:	00 80       	ld	r0, Z
    345a:	8d a1       	ldd	r24, Y+37	; 0x25
    345c:	9e a1       	ldd	r25, Y+38	; 0x26
    345e:	01 96       	adiw	r24, 0x01	; 1
    3460:	9e a3       	std	Y+38, r25	; 0x26
    3462:	8d a3       	std	Y+37, r24	; 0x25
    3464:	ab a1       	ldd	r26, Y+35	; 0x23
    3466:	bc a1       	ldd	r27, Y+36	; 0x24
    3468:	0c 92       	st	X, r0
    346a:	eb a1       	ldd	r30, Y+35	; 0x23
    346c:	fc a1       	ldd	r31, Y+36	; 0x24
    346e:	31 96       	adiw	r30, 0x01	; 1
    3470:	fc a3       	std	Y+36, r31	; 0x24
    3472:	eb a3       	std	Y+35, r30	; 0x23
    3474:	ff a1       	ldd	r31, Y+39	; 0x27
    3476:	f1 50       	subi	r31, 0x01	; 1
    3478:	ff a3       	std	Y+39, r31	; 0x27
    347a:	8f a1       	ldd	r24, Y+39	; 0x27
    347c:	88 23       	and	r24, r24
    347e:	51 f7       	brne	.-44     	; 0x3454 <LCD_Init+0x28>
    3480:	88 e0       	ldi	r24, 0x08	; 8
    3482:	fe 01       	movw	r30, r28
    3484:	7b 96       	adiw	r30, 0x1b	; 27
    3486:	df 01       	movw	r26, r30
    3488:	98 2f       	mov	r25, r24
    348a:	1d 92       	st	X+, r1
    348c:	9a 95       	dec	r25
    348e:	e9 f7       	brne	.-6      	; 0x348a <LCD_Init+0x5e>

	DIO_SetPortDirection(PORT2,0xFF);
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	6f ef       	ldi	r22, 0xFF	; 255
    3494:	0e 94 77 16 	call	0x2cee	; 0x2cee <DIO_SetPortDirection>
	DIO_SetPinDirection(RS_PORT,RS_PIN,OUTPUT);
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	67 e0       	ldi	r22, 0x07	; 7
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(RW_PORT,RW_PIN,OUTPUT);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	66 e0       	ldi	r22, 0x06	; 6
    34a6:	41 e0       	ldi	r20, 0x01	; 1
    34a8:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
	DIO_SetPinDirection(En_PORT,En_PIN,OUTPUT);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	65 e0       	ldi	r22, 0x05	; 5
    34b0:	41 e0       	ldi	r20, 0x01	; 1
    34b2:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>

	LCD_SendCommand(Double);
    34b6:	8b e3       	ldi	r24, 0x3B	; 59
    34b8:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_SendCommand(DisplayOn);
    34bc:	8e e0       	ldi	r24, 0x0E	; 14
    34be:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_SendCommand(Reset_Cursor);
    34c2:	83 e0       	ldi	r24, 0x03	; 3
    34c4:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_SendCommand(CLEAR);
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_SendCommand(EntryModeSet);
    34ce:	86 e0       	ldi	r24, 0x06	; 6
    34d0:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_PrintString(Welcome);
    34d4:	ce 01       	movw	r24, r28
    34d6:	0f 96       	adiw	r24, 0x0f	; 15
    34d8:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	aa e7       	ldi	r26, 0x7A	; 122
    34e2:	b4 e4       	ldi	r27, 0x44	; 68
    34e4:	8b 87       	std	Y+11, r24	; 0x0b
    34e6:	9c 87       	std	Y+12, r25	; 0x0c
    34e8:	ad 87       	std	Y+13, r26	; 0x0d
    34ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	4a e7       	ldi	r20, 0x7A	; 122
    34fa:	53 e4       	ldi	r21, 0x43	; 67
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8f 83       	std	Y+7, r24	; 0x07
    3506:	98 87       	std	Y+8, r25	; 0x08
    3508:	a9 87       	std	Y+9, r26	; 0x09
    350a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    350c:	6f 81       	ldd	r22, Y+7	; 0x07
    350e:	78 85       	ldd	r23, Y+8	; 0x08
    3510:	89 85       	ldd	r24, Y+9	; 0x09
    3512:	9a 85       	ldd	r25, Y+10	; 0x0a
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e8       	ldi	r20, 0x80	; 128
    351a:	5f e3       	ldi	r21, 0x3F	; 63
    351c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3520:	88 23       	and	r24, r24
    3522:	2c f4       	brge	.+10     	; 0x352e <LCD_Init+0x102>
		__ticks = 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9e 83       	std	Y+6, r25	; 0x06
    352a:	8d 83       	std	Y+5, r24	; 0x05
    352c:	3f c0       	rjmp	.+126    	; 0x35ac <LCD_Init+0x180>
	else if (__tmp > 65535)
    352e:	6f 81       	ldd	r22, Y+7	; 0x07
    3530:	78 85       	ldd	r23, Y+8	; 0x08
    3532:	89 85       	ldd	r24, Y+9	; 0x09
    3534:	9a 85       	ldd	r25, Y+10	; 0x0a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	3f ef       	ldi	r19, 0xFF	; 255
    353a:	4f e7       	ldi	r20, 0x7F	; 127
    353c:	57 e4       	ldi	r21, 0x47	; 71
    353e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3542:	18 16       	cp	r1, r24
    3544:	4c f5       	brge	.+82     	; 0x3598 <LCD_Init+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3546:	6b 85       	ldd	r22, Y+11	; 0x0b
    3548:	7c 85       	ldd	r23, Y+12	; 0x0c
    354a:	8d 85       	ldd	r24, Y+13	; 0x0d
    354c:	9e 85       	ldd	r25, Y+14	; 0x0e
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e2       	ldi	r20, 0x20	; 32
    3554:	51 e4       	ldi	r21, 0x41	; 65
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9e 83       	std	Y+6, r25	; 0x06
    356c:	8d 83       	std	Y+5, r24	; 0x05
    356e:	0f c0       	rjmp	.+30     	; 0x358e <LCD_Init+0x162>
    3570:	89 e1       	ldi	r24, 0x19	; 25
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9c 83       	std	Y+4, r25	; 0x04
    3576:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <LCD_Init+0x150>
    3580:	9c 83       	std	Y+4, r25	; 0x04
    3582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	9e 83       	std	Y+6, r25	; 0x06
    358c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	69 f7       	brne	.-38     	; 0x3570 <LCD_Init+0x144>
    3596:	14 c0       	rjmp	.+40     	; 0x35c0 <LCD_Init+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3598:	6f 81       	ldd	r22, Y+7	; 0x07
    359a:	78 85       	ldd	r23, Y+8	; 0x08
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	9a 83       	std	Y+2, r25	; 0x02
    35b2:	89 83       	std	Y+1, r24	; 0x01
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	9a 81       	ldd	r25, Y+2	; 0x02
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <LCD_Init+0x18c>
    35bc:	9a 83       	std	Y+2, r25	; 0x02
    35be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_SendCommand(CLEAR);
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_SendCommand(Reset_Cursor);
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>

}
    35cc:	a7 96       	adiw	r28, 0x27	; 39
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	08 95       	ret

000035de <LCD_SendCommand>:

void LCD_SendCommand (U8 Command)
{
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	e9 97       	sbiw	r28, 0x39	; 57
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	67 e0       	ldi	r22, 0x07	; 7
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(RW_PORT,RS_PIN,LOW);
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	67 e0       	ldi	r22, 0x07	; 7
    3602:	40 e0       	ldi	r20, 0x00	; 0
    3604:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 ea       	ldi	r26, 0xA0	; 160
    360e:	b1 e4       	ldi	r27, 0x41	; 65
    3610:	8d ab       	std	Y+53, r24	; 0x35
    3612:	9e ab       	std	Y+54, r25	; 0x36
    3614:	af ab       	std	Y+55, r26	; 0x37
    3616:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3618:	6d a9       	ldd	r22, Y+53	; 0x35
    361a:	7e a9       	ldd	r23, Y+54	; 0x36
    361c:	8f a9       	ldd	r24, Y+55	; 0x37
    361e:	98 ad       	ldd	r25, Y+56	; 0x38
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	4a e7       	ldi	r20, 0x7A	; 122
    3626:	53 e4       	ldi	r21, 0x43	; 67
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	89 ab       	std	Y+49, r24	; 0x31
    3632:	9a ab       	std	Y+50, r25	; 0x32
    3634:	ab ab       	std	Y+51, r26	; 0x33
    3636:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3638:	69 a9       	ldd	r22, Y+49	; 0x31
    363a:	7a a9       	ldd	r23, Y+50	; 0x32
    363c:	8b a9       	ldd	r24, Y+51	; 0x33
    363e:	9c a9       	ldd	r25, Y+52	; 0x34
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	2c f4       	brge	.+10     	; 0x365a <LCD_SendCommand+0x7c>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	98 ab       	std	Y+48, r25	; 0x30
    3656:	8f a7       	std	Y+47, r24	; 0x2f
    3658:	3f c0       	rjmp	.+126    	; 0x36d8 <LCD_SendCommand+0xfa>
	else if (__tmp > 65535)
    365a:	69 a9       	ldd	r22, Y+49	; 0x31
    365c:	7a a9       	ldd	r23, Y+50	; 0x32
    365e:	8b a9       	ldd	r24, Y+51	; 0x33
    3660:	9c a9       	ldd	r25, Y+52	; 0x34
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	3f ef       	ldi	r19, 0xFF	; 255
    3666:	4f e7       	ldi	r20, 0x7F	; 127
    3668:	57 e4       	ldi	r21, 0x47	; 71
    366a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f5       	brge	.+82     	; 0x36c4 <LCD_SendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3672:	6d a9       	ldd	r22, Y+53	; 0x35
    3674:	7e a9       	ldd	r23, Y+54	; 0x36
    3676:	8f a9       	ldd	r24, Y+55	; 0x37
    3678:	98 ad       	ldd	r25, Y+56	; 0x38
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	98 ab       	std	Y+48, r25	; 0x30
    3698:	8f a7       	std	Y+47, r24	; 0x2f
    369a:	0f c0       	rjmp	.+30     	; 0x36ba <LCD_SendCommand+0xdc>
    369c:	89 e1       	ldi	r24, 0x19	; 25
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9e a7       	std	Y+46, r25	; 0x2e
    36a2:	8d a7       	std	Y+45, r24	; 0x2d
    36a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    36a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    36a8:	01 97       	sbiw	r24, 0x01	; 1
    36aa:	f1 f7       	brne	.-4      	; 0x36a8 <LCD_SendCommand+0xca>
    36ac:	9e a7       	std	Y+46, r25	; 0x2e
    36ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    36b2:	98 a9       	ldd	r25, Y+48	; 0x30
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	98 ab       	std	Y+48, r25	; 0x30
    36b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    36bc:	98 a9       	ldd	r25, Y+48	; 0x30
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	69 f7       	brne	.-38     	; 0x369c <LCD_SendCommand+0xbe>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <LCD_SendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c4:	69 a9       	ldd	r22, Y+49	; 0x31
    36c6:	7a a9       	ldd	r23, Y+50	; 0x32
    36c8:	8b a9       	ldd	r24, Y+51	; 0x33
    36ca:	9c a9       	ldd	r25, Y+52	; 0x34
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	98 ab       	std	Y+48, r25	; 0x30
    36d6:	8f a7       	std	Y+47, r24	; 0x2f
    36d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    36da:	98 a9       	ldd	r25, Y+48	; 0x30
    36dc:	9c a7       	std	Y+44, r25	; 0x2c
    36de:	8b a7       	std	Y+43, r24	; 0x2b
    36e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    36e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	f1 f7       	brne	.-4      	; 0x36e4 <LCD_SendCommand+0x106>
    36e8:	9c a7       	std	Y+44, r25	; 0x2c
    36ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	DIO_SetPinValue(En_PORT,En_PIN,HIGH);
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	65 e0       	ldi	r22, 0x05	; 5
    36f0:	41 e0       	ldi	r20, 0x01	; 1
    36f2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	a0 ea       	ldi	r26, 0xA0	; 160
    36fc:	b1 e4       	ldi	r27, 0x41	; 65
    36fe:	8f a3       	std	Y+39, r24	; 0x27
    3700:	98 a7       	std	Y+40, r25	; 0x28
    3702:	a9 a7       	std	Y+41, r26	; 0x29
    3704:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3706:	6f a1       	ldd	r22, Y+39	; 0x27
    3708:	78 a5       	ldd	r23, Y+40	; 0x28
    370a:	89 a5       	ldd	r24, Y+41	; 0x29
    370c:	9a a5       	ldd	r25, Y+42	; 0x2a
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	4a e7       	ldi	r20, 0x7A	; 122
    3714:	53 e4       	ldi	r21, 0x43	; 67
    3716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	8b a3       	std	Y+35, r24	; 0x23
    3720:	9c a3       	std	Y+36, r25	; 0x24
    3722:	ad a3       	std	Y+37, r26	; 0x25
    3724:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3726:	6b a1       	ldd	r22, Y+35	; 0x23
    3728:	7c a1       	ldd	r23, Y+36	; 0x24
    372a:	8d a1       	ldd	r24, Y+37	; 0x25
    372c:	9e a1       	ldd	r25, Y+38	; 0x26
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e8       	ldi	r20, 0x80	; 128
    3734:	5f e3       	ldi	r21, 0x3F	; 63
    3736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373a:	88 23       	and	r24, r24
    373c:	2c f4       	brge	.+10     	; 0x3748 <LCD_SendCommand+0x16a>
		__ticks = 1;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	9a a3       	std	Y+34, r25	; 0x22
    3744:	89 a3       	std	Y+33, r24	; 0x21
    3746:	3f c0       	rjmp	.+126    	; 0x37c6 <LCD_SendCommand+0x1e8>
	else if (__tmp > 65535)
    3748:	6b a1       	ldd	r22, Y+35	; 0x23
    374a:	7c a1       	ldd	r23, Y+36	; 0x24
    374c:	8d a1       	ldd	r24, Y+37	; 0x25
    374e:	9e a1       	ldd	r25, Y+38	; 0x26
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	3f ef       	ldi	r19, 0xFF	; 255
    3754:	4f e7       	ldi	r20, 0x7F	; 127
    3756:	57 e4       	ldi	r21, 0x47	; 71
    3758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375c:	18 16       	cp	r1, r24
    375e:	4c f5       	brge	.+82     	; 0x37b2 <LCD_SendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3760:	6f a1       	ldd	r22, Y+39	; 0x27
    3762:	78 a5       	ldd	r23, Y+40	; 0x28
    3764:	89 a5       	ldd	r24, Y+41	; 0x29
    3766:	9a a5       	ldd	r25, Y+42	; 0x2a
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	40 e2       	ldi	r20, 0x20	; 32
    376e:	51 e4       	ldi	r21, 0x41	; 65
    3770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	9a a3       	std	Y+34, r25	; 0x22
    3786:	89 a3       	std	Y+33, r24	; 0x21
    3788:	0f c0       	rjmp	.+30     	; 0x37a8 <LCD_SendCommand+0x1ca>
    378a:	89 e1       	ldi	r24, 0x19	; 25
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	98 a3       	std	Y+32, r25	; 0x20
    3790:	8f 8f       	std	Y+31, r24	; 0x1f
    3792:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3794:	98 a1       	ldd	r25, Y+32	; 0x20
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <LCD_SendCommand+0x1b8>
    379a:	98 a3       	std	Y+32, r25	; 0x20
    379c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379e:	89 a1       	ldd	r24, Y+33	; 0x21
    37a0:	9a a1       	ldd	r25, Y+34	; 0x22
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	9a a3       	std	Y+34, r25	; 0x22
    37a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a8:	89 a1       	ldd	r24, Y+33	; 0x21
    37aa:	9a a1       	ldd	r25, Y+34	; 0x22
    37ac:	00 97       	sbiw	r24, 0x00	; 0
    37ae:	69 f7       	brne	.-38     	; 0x378a <LCD_SendCommand+0x1ac>
    37b0:	14 c0       	rjmp	.+40     	; 0x37da <LCD_SendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b2:	6b a1       	ldd	r22, Y+35	; 0x23
    37b4:	7c a1       	ldd	r23, Y+36	; 0x24
    37b6:	8d a1       	ldd	r24, Y+37	; 0x25
    37b8:	9e a1       	ldd	r25, Y+38	; 0x26
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	9a a3       	std	Y+34, r25	; 0x22
    37c4:	89 a3       	std	Y+33, r24	; 0x21
    37c6:	89 a1       	ldd	r24, Y+33	; 0x21
    37c8:	9a a1       	ldd	r25, Y+34	; 0x22
    37ca:	9e 8f       	std	Y+30, r25	; 0x1e
    37cc:	8d 8f       	std	Y+29, r24	; 0x1d
    37ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <LCD_SendCommand+0x1f4>
    37d6:	9e 8f       	std	Y+30, r25	; 0x1e
    37d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	DIO_SetPortValue(Data_Port,Command);
    37da:	82 e0       	ldi	r24, 0x02	; 2
    37dc:	69 ad       	ldd	r22, Y+57	; 0x39
    37de:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <DIO_SetPortValue>
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	a0 ea       	ldi	r26, 0xA0	; 160
    37e8:	b1 e4       	ldi	r27, 0x41	; 65
    37ea:	89 8f       	std	Y+25, r24	; 0x19
    37ec:	9a 8f       	std	Y+26, r25	; 0x1a
    37ee:	ab 8f       	std	Y+27, r26	; 0x1b
    37f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f2:	69 8d       	ldd	r22, Y+25	; 0x19
    37f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	4a e7       	ldi	r20, 0x7A	; 122
    3800:	53 e4       	ldi	r21, 0x43	; 67
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	8d 8b       	std	Y+21, r24	; 0x15
    380c:	9e 8b       	std	Y+22, r25	; 0x16
    380e:	af 8b       	std	Y+23, r26	; 0x17
    3810:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3812:	6d 89       	ldd	r22, Y+21	; 0x15
    3814:	7e 89       	ldd	r23, Y+22	; 0x16
    3816:	8f 89       	ldd	r24, Y+23	; 0x17
    3818:	98 8d       	ldd	r25, Y+24	; 0x18
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e8       	ldi	r20, 0x80	; 128
    3820:	5f e3       	ldi	r21, 0x3F	; 63
    3822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3826:	88 23       	and	r24, r24
    3828:	2c f4       	brge	.+10     	; 0x3834 <LCD_SendCommand+0x256>
		__ticks = 1;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	9c 8b       	std	Y+20, r25	; 0x14
    3830:	8b 8b       	std	Y+19, r24	; 0x13
    3832:	3f c0       	rjmp	.+126    	; 0x38b2 <LCD_SendCommand+0x2d4>
	else if (__tmp > 65535)
    3834:	6d 89       	ldd	r22, Y+21	; 0x15
    3836:	7e 89       	ldd	r23, Y+22	; 0x16
    3838:	8f 89       	ldd	r24, Y+23	; 0x17
    383a:	98 8d       	ldd	r25, Y+24	; 0x18
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	3f ef       	ldi	r19, 0xFF	; 255
    3840:	4f e7       	ldi	r20, 0x7F	; 127
    3842:	57 e4       	ldi	r21, 0x47	; 71
    3844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3848:	18 16       	cp	r1, r24
    384a:	4c f5       	brge	.+82     	; 0x389e <LCD_SendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384c:	69 8d       	ldd	r22, Y+25	; 0x19
    384e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e2       	ldi	r20, 0x20	; 32
    385a:	51 e4       	ldi	r21, 0x41	; 65
    385c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	bc 01       	movw	r22, r24
    3866:	cd 01       	movw	r24, r26
    3868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	9c 8b       	std	Y+20, r25	; 0x14
    3872:	8b 8b       	std	Y+19, r24	; 0x13
    3874:	0f c0       	rjmp	.+30     	; 0x3894 <LCD_SendCommand+0x2b6>
    3876:	89 e1       	ldi	r24, 0x19	; 25
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	9a 8b       	std	Y+18, r25	; 0x12
    387c:	89 8b       	std	Y+17, r24	; 0x11
    387e:	89 89       	ldd	r24, Y+17	; 0x11
    3880:	9a 89       	ldd	r25, Y+18	; 0x12
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <LCD_SendCommand+0x2a4>
    3886:	9a 8b       	std	Y+18, r25	; 0x12
    3888:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388a:	8b 89       	ldd	r24, Y+19	; 0x13
    388c:	9c 89       	ldd	r25, Y+20	; 0x14
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3894:	8b 89       	ldd	r24, Y+19	; 0x13
    3896:	9c 89       	ldd	r25, Y+20	; 0x14
    3898:	00 97       	sbiw	r24, 0x00	; 0
    389a:	69 f7       	brne	.-38     	; 0x3876 <LCD_SendCommand+0x298>
    389c:	14 c0       	rjmp	.+40     	; 0x38c6 <LCD_SendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389e:	6d 89       	ldd	r22, Y+21	; 0x15
    38a0:	7e 89       	ldd	r23, Y+22	; 0x16
    38a2:	8f 89       	ldd	r24, Y+23	; 0x17
    38a4:	98 8d       	ldd	r25, Y+24	; 0x18
    38a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9c 8b       	std	Y+20, r25	; 0x14
    38b0:	8b 8b       	std	Y+19, r24	; 0x13
    38b2:	8b 89       	ldd	r24, Y+19	; 0x13
    38b4:	9c 89       	ldd	r25, Y+20	; 0x14
    38b6:	98 8b       	std	Y+16, r25	; 0x10
    38b8:	8f 87       	std	Y+15, r24	; 0x0f
    38ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    38bc:	98 89       	ldd	r25, Y+16	; 0x10
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <LCD_SendCommand+0x2e0>
    38c2:	98 8b       	std	Y+16, r25	; 0x10
    38c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DIO_SetPinValue(En_PORT,En_PIN,LOW);
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	65 e0       	ldi	r22, 0x05	; 5
    38ca:	40 e0       	ldi	r20, 0x00	; 0
    38cc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	a0 ea       	ldi	r26, 0xA0	; 160
    38d6:	b1 e4       	ldi	r27, 0x41	; 65
    38d8:	8b 87       	std	Y+11, r24	; 0x0b
    38da:	9c 87       	std	Y+12, r25	; 0x0c
    38dc:	ad 87       	std	Y+13, r26	; 0x0d
    38de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	4a e7       	ldi	r20, 0x7A	; 122
    38ee:	53 e4       	ldi	r21, 0x43	; 67
    38f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	8f 83       	std	Y+7, r24	; 0x07
    38fa:	98 87       	std	Y+8, r25	; 0x08
    38fc:	a9 87       	std	Y+9, r26	; 0x09
    38fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	5f e3       	ldi	r21, 0x3F	; 63
    3910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3914:	88 23       	and	r24, r24
    3916:	2c f4       	brge	.+10     	; 0x3922 <LCD_SendCommand+0x344>
		__ticks = 1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	9e 83       	std	Y+6, r25	; 0x06
    391e:	8d 83       	std	Y+5, r24	; 0x05
    3920:	3f c0       	rjmp	.+126    	; 0x39a0 <LCD_SendCommand+0x3c2>
	else if (__tmp > 65535)
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	78 85       	ldd	r23, Y+8	; 0x08
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	57 e4       	ldi	r21, 0x47	; 71
    3932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	4c f5       	brge	.+82     	; 0x398c <LCD_SendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393a:	6b 85       	ldd	r22, Y+11	; 0x0b
    393c:	7c 85       	ldd	r23, Y+12	; 0x0c
    393e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3940:	9e 85       	ldd	r25, Y+14	; 0x0e
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e2       	ldi	r20, 0x20	; 32
    3948:	51 e4       	ldi	r21, 0x41	; 65
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	bc 01       	movw	r22, r24
    3954:	cd 01       	movw	r24, r26
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	8d 83       	std	Y+5, r24	; 0x05
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <LCD_SendCommand+0x3a4>
    3964:	89 e1       	ldi	r24, 0x19	; 25
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	9c 83       	std	Y+4, r25	; 0x04
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_SendCommand+0x392>
    3974:	9c 83       	std	Y+4, r25	; 0x04
    3976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3982:	8d 81       	ldd	r24, Y+5	; 0x05
    3984:	9e 81       	ldd	r25, Y+6	; 0x06
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	69 f7       	brne	.-38     	; 0x3964 <LCD_SendCommand+0x386>
    398a:	14 c0       	rjmp	.+40     	; 0x39b4 <LCD_SendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	6f 81       	ldd	r22, Y+7	; 0x07
    398e:	78 85       	ldd	r23, Y+8	; 0x08
    3990:	89 85       	ldd	r24, Y+9	; 0x09
    3992:	9a 85       	ldd	r25, Y+10	; 0x0a
    3994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9e 83       	std	Y+6, r25	; 0x06
    399e:	8d 83       	std	Y+5, r24	; 0x05
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	9a 83       	std	Y+2, r25	; 0x02
    39a6:	89 83       	std	Y+1, r24	; 0x01
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <LCD_SendCommand+0x3ce>
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    39b4:	e9 96       	adiw	r28, 0x39	; 57
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <LCD_MoveCursor>:

void LCD_MoveCursor (U8 x , U8 y)
{
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	00 d0       	rcall	.+0      	; 0x39cc <LCD_MoveCursor+0x6>
    39cc:	0f 92       	push	r0
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	8a 83       	std	Y+2, r24	; 0x02
    39d4:	6b 83       	std	Y+3, r22	; 0x03
	LCD_SendCommand(Reset_Cursor);
    39d6:	83 e0       	ldi	r24, 0x03	; 3
    39d8:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	U8 i=0 ;
    39dc:	19 82       	std	Y+1, r1	; 0x01

	if(y==0)
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	88 23       	and	r24, r24
    39e2:	69 f4       	brne	.+26     	; 0x39fe <LCD_MoveCursor+0x38>
	{
		for(i=0;i<x;i++ )
    39e4:	19 82       	std	Y+1, r1	; 0x01
    39e6:	06 c0       	rjmp	.+12     	; 0x39f4 <LCD_MoveCursor+0x2e>
		{
			LCD_SendCommand(Shift_Right);
    39e8:	8f e1       	ldi	r24, 0x1F	; 31
    39ea:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
	LCD_SendCommand(Reset_Cursor);
	U8 i=0 ;

	if(y==0)
	{
		for(i=0;i<x;i++ )
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	8f 5f       	subi	r24, 0xFF	; 255
    39f2:	89 83       	std	Y+1, r24	; 0x01
    39f4:	99 81       	ldd	r25, Y+1	; 0x01
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	98 17       	cp	r25, r24
    39fa:	b0 f3       	brcs	.-20     	; 0x39e8 <LCD_MoveCursor+0x22>
    39fc:	12 c0       	rjmp	.+36     	; 0x3a22 <LCD_MoveCursor+0x5c>

		}
		*/

	}
	else if (y==1)
    39fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3a00:	81 30       	cpi	r24, 0x01	; 1
    3a02:	79 f4       	brne	.+30     	; 0x3a22 <LCD_MoveCursor+0x5c>
	{
		LCD_SendCommand(Second_Line);
    3a04:	80 e8       	ldi	r24, 0x80	; 128
    3a06:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
		for(i=0;i<x;i++)
    3a0a:	19 82       	std	Y+1, r1	; 0x01
    3a0c:	06 c0       	rjmp	.+12     	; 0x3a1a <LCD_MoveCursor+0x54>
		{
			LCD_SendCommand(Shift_Right);
    3a0e:	8f e1       	ldi	r24, 0x1F	; 31
    3a10:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>

	}
	else if (y==1)
	{
		LCD_SendCommand(Second_Line);
		for(i=0;i<x;i++)
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	8f 5f       	subi	r24, 0xFF	; 255
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	99 81       	ldd	r25, Y+1	; 0x01
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	98 17       	cp	r25, r24
    3a20:	b0 f3       	brcs	.-20     	; 0x3a0e <LCD_MoveCursor+0x48>
	}
	else
	{

	}
}
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	08 95       	ret

00003a2e <LCD_SendData>:

void LCD_SendData (char Char)
{
    3a2e:	df 93       	push	r29
    3a30:	cf 93       	push	r28
    3a32:	cd b7       	in	r28, 0x3d	; 61
    3a34:	de b7       	in	r29, 0x3e	; 62
    3a36:	e9 97       	sbiw	r28, 0x39	; 57
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	67 e0       	ldi	r22, 0x07	; 7
    3a48:	41 e0       	ldi	r20, 0x01	; 1
    3a4a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	66 e0       	ldi	r22, 0x06	; 6
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	a0 ea       	ldi	r26, 0xA0	; 160
    3a5e:	b1 e4       	ldi	r27, 0x41	; 65
    3a60:	8d ab       	std	Y+53, r24	; 0x35
    3a62:	9e ab       	std	Y+54, r25	; 0x36
    3a64:	af ab       	std	Y+55, r26	; 0x37
    3a66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a68:	6d a9       	ldd	r22, Y+53	; 0x35
    3a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	4a e7       	ldi	r20, 0x7A	; 122
    3a76:	53 e4       	ldi	r21, 0x43	; 67
    3a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	89 ab       	std	Y+49, r24	; 0x31
    3a82:	9a ab       	std	Y+50, r25	; 0x32
    3a84:	ab ab       	std	Y+51, r26	; 0x33
    3a86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a88:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a8c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a8e:	9c a9       	ldd	r25, Y+52	; 0x34
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	40 e8       	ldi	r20, 0x80	; 128
    3a96:	5f e3       	ldi	r21, 0x3F	; 63
    3a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a9c:	88 23       	and	r24, r24
    3a9e:	2c f4       	brge	.+10     	; 0x3aaa <LCD_SendData+0x7c>
		__ticks = 1;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	98 ab       	std	Y+48, r25	; 0x30
    3aa6:	8f a7       	std	Y+47, r24	; 0x2f
    3aa8:	3f c0       	rjmp	.+126    	; 0x3b28 <LCD_SendData+0xfa>
	else if (__tmp > 65535)
    3aaa:	69 a9       	ldd	r22, Y+49	; 0x31
    3aac:	7a a9       	ldd	r23, Y+50	; 0x32
    3aae:	8b a9       	ldd	r24, Y+51	; 0x33
    3ab0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	3f ef       	ldi	r19, 0xFF	; 255
    3ab6:	4f e7       	ldi	r20, 0x7F	; 127
    3ab8:	57 e4       	ldi	r21, 0x47	; 71
    3aba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3abe:	18 16       	cp	r1, r24
    3ac0:	4c f5       	brge	.+82     	; 0x3b14 <LCD_SendData+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac2:	6d a9       	ldd	r22, Y+53	; 0x35
    3ac4:	7e a9       	ldd	r23, Y+54	; 0x36
    3ac6:	8f a9       	ldd	r24, Y+55	; 0x37
    3ac8:	98 ad       	ldd	r25, Y+56	; 0x38
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	40 e2       	ldi	r20, 0x20	; 32
    3ad0:	51 e4       	ldi	r21, 0x41	; 65
    3ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	cb 01       	movw	r24, r22
    3ada:	bc 01       	movw	r22, r24
    3adc:	cd 01       	movw	r24, r26
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	98 ab       	std	Y+48, r25	; 0x30
    3ae8:	8f a7       	std	Y+47, r24	; 0x2f
    3aea:	0f c0       	rjmp	.+30     	; 0x3b0a <LCD_SendData+0xdc>
    3aec:	89 e1       	ldi	r24, 0x19	; 25
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	9e a7       	std	Y+46, r25	; 0x2e
    3af2:	8d a7       	std	Y+45, r24	; 0x2d
    3af4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3af6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <LCD_SendData+0xca>
    3afc:	9e a7       	std	Y+46, r25	; 0x2e
    3afe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b02:	98 a9       	ldd	r25, Y+48	; 0x30
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	98 ab       	std	Y+48, r25	; 0x30
    3b08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b0c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b0e:	00 97       	sbiw	r24, 0x00	; 0
    3b10:	69 f7       	brne	.-38     	; 0x3aec <LCD_SendData+0xbe>
    3b12:	14 c0       	rjmp	.+40     	; 0x3b3c <LCD_SendData+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b14:	69 a9       	ldd	r22, Y+49	; 0x31
    3b16:	7a a9       	ldd	r23, Y+50	; 0x32
    3b18:	8b a9       	ldd	r24, Y+51	; 0x33
    3b1a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	98 ab       	std	Y+48, r25	; 0x30
    3b26:	8f a7       	std	Y+47, r24	; 0x2f
    3b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b2c:	9c a7       	std	Y+44, r25	; 0x2c
    3b2e:	8b a7       	std	Y+43, r24	; 0x2b
    3b30:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b32:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	f1 f7       	brne	.-4      	; 0x3b34 <LCD_SendData+0x106>
    3b38:	9c a7       	std	Y+44, r25	; 0x2c
    3b3a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	DIO_SetPinValue(En_PORT,En_PIN,HIGH);
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	65 e0       	ldi	r22, 0x05	; 5
    3b40:	41 e0       	ldi	r20, 0x01	; 1
    3b42:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	a0 ea       	ldi	r26, 0xA0	; 160
    3b4c:	b1 e4       	ldi	r27, 0x41	; 65
    3b4e:	8f a3       	std	Y+39, r24	; 0x27
    3b50:	98 a7       	std	Y+40, r25	; 0x28
    3b52:	a9 a7       	std	Y+41, r26	; 0x29
    3b54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b56:	6f a1       	ldd	r22, Y+39	; 0x27
    3b58:	78 a5       	ldd	r23, Y+40	; 0x28
    3b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	4a e7       	ldi	r20, 0x7A	; 122
    3b64:	53 e4       	ldi	r21, 0x43	; 67
    3b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	8b a3       	std	Y+35, r24	; 0x23
    3b70:	9c a3       	std	Y+36, r25	; 0x24
    3b72:	ad a3       	std	Y+37, r26	; 0x25
    3b74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b76:	6b a1       	ldd	r22, Y+35	; 0x23
    3b78:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	40 e8       	ldi	r20, 0x80	; 128
    3b84:	5f e3       	ldi	r21, 0x3F	; 63
    3b86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b8a:	88 23       	and	r24, r24
    3b8c:	2c f4       	brge	.+10     	; 0x3b98 <LCD_SendData+0x16a>
		__ticks = 1;
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	9a a3       	std	Y+34, r25	; 0x22
    3b94:	89 a3       	std	Y+33, r24	; 0x21
    3b96:	3f c0       	rjmp	.+126    	; 0x3c16 <LCD_SendData+0x1e8>
	else if (__tmp > 65535)
    3b98:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	3f ef       	ldi	r19, 0xFF	; 255
    3ba4:	4f e7       	ldi	r20, 0x7F	; 127
    3ba6:	57 e4       	ldi	r21, 0x47	; 71
    3ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bac:	18 16       	cp	r1, r24
    3bae:	4c f5       	brge	.+82     	; 0x3c02 <LCD_SendData+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    3bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    3bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	40 e2       	ldi	r20, 0x20	; 32
    3bbe:	51 e4       	ldi	r21, 0x41	; 65
    3bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	9a a3       	std	Y+34, r25	; 0x22
    3bd6:	89 a3       	std	Y+33, r24	; 0x21
    3bd8:	0f c0       	rjmp	.+30     	; 0x3bf8 <LCD_SendData+0x1ca>
    3bda:	89 e1       	ldi	r24, 0x19	; 25
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	98 a3       	std	Y+32, r25	; 0x20
    3be0:	8f 8f       	std	Y+31, r24	; 0x1f
    3be2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be4:	98 a1       	ldd	r25, Y+32	; 0x20
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <LCD_SendData+0x1b8>
    3bea:	98 a3       	std	Y+32, r25	; 0x20
    3bec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bee:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	9a a3       	std	Y+34, r25	; 0x22
    3bf6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    3bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    3bfc:	00 97       	sbiw	r24, 0x00	; 0
    3bfe:	69 f7       	brne	.-38     	; 0x3bda <LCD_SendData+0x1ac>
    3c00:	14 c0       	rjmp	.+40     	; 0x3c2a <LCD_SendData+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c02:	6b a1       	ldd	r22, Y+35	; 0x23
    3c04:	7c a1       	ldd	r23, Y+36	; 0x24
    3c06:	8d a1       	ldd	r24, Y+37	; 0x25
    3c08:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	9a a3       	std	Y+34, r25	; 0x22
    3c14:	89 a3       	std	Y+33, r24	; 0x21
    3c16:	89 a1       	ldd	r24, Y+33	; 0x21
    3c18:	9a a1       	ldd	r25, Y+34	; 0x22
    3c1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c1c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <LCD_SendData+0x1f4>
    3c26:	9e 8f       	std	Y+30, r25	; 0x1e
    3c28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	DIO_SetPortValue(Data_Port,Char);
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
    3c2c:	69 ad       	ldd	r22, Y+57	; 0x39
    3c2e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <DIO_SetPortValue>
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	a0 ea       	ldi	r26, 0xA0	; 160
    3c38:	b1 e4       	ldi	r27, 0x41	; 65
    3c3a:	89 8f       	std	Y+25, r24	; 0x19
    3c3c:	9a 8f       	std	Y+26, r25	; 0x1a
    3c3e:	ab 8f       	std	Y+27, r26	; 0x1b
    3c40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c42:	69 8d       	ldd	r22, Y+25	; 0x19
    3c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	4a e7       	ldi	r20, 0x7A	; 122
    3c50:	53 e4       	ldi	r21, 0x43	; 67
    3c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	8d 8b       	std	Y+21, r24	; 0x15
    3c5c:	9e 8b       	std	Y+22, r25	; 0x16
    3c5e:	af 8b       	std	Y+23, r26	; 0x17
    3c60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c62:	6d 89       	ldd	r22, Y+21	; 0x15
    3c64:	7e 89       	ldd	r23, Y+22	; 0x16
    3c66:	8f 89       	ldd	r24, Y+23	; 0x17
    3c68:	98 8d       	ldd	r25, Y+24	; 0x18
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e8       	ldi	r20, 0x80	; 128
    3c70:	5f e3       	ldi	r21, 0x3F	; 63
    3c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c76:	88 23       	and	r24, r24
    3c78:	2c f4       	brge	.+10     	; 0x3c84 <LCD_SendData+0x256>
		__ticks = 1;
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	9c 8b       	std	Y+20, r25	; 0x14
    3c80:	8b 8b       	std	Y+19, r24	; 0x13
    3c82:	3f c0       	rjmp	.+126    	; 0x3d02 <LCD_SendData+0x2d4>
	else if (__tmp > 65535)
    3c84:	6d 89       	ldd	r22, Y+21	; 0x15
    3c86:	7e 89       	ldd	r23, Y+22	; 0x16
    3c88:	8f 89       	ldd	r24, Y+23	; 0x17
    3c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	3f ef       	ldi	r19, 0xFF	; 255
    3c90:	4f e7       	ldi	r20, 0x7F	; 127
    3c92:	57 e4       	ldi	r21, 0x47	; 71
    3c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c98:	18 16       	cp	r1, r24
    3c9a:	4c f5       	brge	.+82     	; 0x3cee <LCD_SendData+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ca0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ca2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e2       	ldi	r20, 0x20	; 32
    3caa:	51 e4       	ldi	r21, 0x41	; 65
    3cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	9c 8b       	std	Y+20, r25	; 0x14
    3cc2:	8b 8b       	std	Y+19, r24	; 0x13
    3cc4:	0f c0       	rjmp	.+30     	; 0x3ce4 <LCD_SendData+0x2b6>
    3cc6:	89 e1       	ldi	r24, 0x19	; 25
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	9a 8b       	std	Y+18, r25	; 0x12
    3ccc:	89 8b       	std	Y+17, r24	; 0x11
    3cce:	89 89       	ldd	r24, Y+17	; 0x11
    3cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	f1 f7       	brne	.-4      	; 0x3cd2 <LCD_SendData+0x2a4>
    3cd6:	9a 8b       	std	Y+18, r25	; 0x12
    3cd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cda:	8b 89       	ldd	r24, Y+19	; 0x13
    3cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	9c 8b       	std	Y+20, r25	; 0x14
    3ce2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	69 f7       	brne	.-38     	; 0x3cc6 <LCD_SendData+0x298>
    3cec:	14 c0       	rjmp	.+40     	; 0x3d16 <LCD_SendData+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cee:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	9c 8b       	std	Y+20, r25	; 0x14
    3d00:	8b 8b       	std	Y+19, r24	; 0x13
    3d02:	8b 89       	ldd	r24, Y+19	; 0x13
    3d04:	9c 89       	ldd	r25, Y+20	; 0x14
    3d06:	98 8b       	std	Y+16, r25	; 0x10
    3d08:	8f 87       	std	Y+15, r24	; 0x0f
    3d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d0c:	98 89       	ldd	r25, Y+16	; 0x10
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <LCD_SendData+0x2e0>
    3d12:	98 8b       	std	Y+16, r25	; 0x10
    3d14:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DIO_SetPinValue(En_PORT,En_PIN,LOW);
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	65 e0       	ldi	r22, 0x05	; 5
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	a0 ea       	ldi	r26, 0xA0	; 160
    3d26:	b1 e4       	ldi	r27, 0x41	; 65
    3d28:	8b 87       	std	Y+11, r24	; 0x0b
    3d2a:	9c 87       	std	Y+12, r25	; 0x0c
    3d2c:	ad 87       	std	Y+13, r26	; 0x0d
    3d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	4a e7       	ldi	r20, 0x7A	; 122
    3d3e:	53 e4       	ldi	r21, 0x43	; 67
    3d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	8f 83       	std	Y+7, r24	; 0x07
    3d4a:	98 87       	std	Y+8, r25	; 0x08
    3d4c:	a9 87       	std	Y+9, r26	; 0x09
    3d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d50:	6f 81       	ldd	r22, Y+7	; 0x07
    3d52:	78 85       	ldd	r23, Y+8	; 0x08
    3d54:	89 85       	ldd	r24, Y+9	; 0x09
    3d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e8       	ldi	r20, 0x80	; 128
    3d5e:	5f e3       	ldi	r21, 0x3F	; 63
    3d60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d64:	88 23       	and	r24, r24
    3d66:	2c f4       	brge	.+10     	; 0x3d72 <LCD_SendData+0x344>
		__ticks = 1;
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	9e 83       	std	Y+6, r25	; 0x06
    3d6e:	8d 83       	std	Y+5, r24	; 0x05
    3d70:	3f c0       	rjmp	.+126    	; 0x3df0 <LCD_SendData+0x3c2>
	else if (__tmp > 65535)
    3d72:	6f 81       	ldd	r22, Y+7	; 0x07
    3d74:	78 85       	ldd	r23, Y+8	; 0x08
    3d76:	89 85       	ldd	r24, Y+9	; 0x09
    3d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	3f ef       	ldi	r19, 0xFF	; 255
    3d7e:	4f e7       	ldi	r20, 0x7F	; 127
    3d80:	57 e4       	ldi	r21, 0x47	; 71
    3d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d86:	18 16       	cp	r1, r24
    3d88:	4c f5       	brge	.+82     	; 0x3ddc <LCD_SendData+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	40 e2       	ldi	r20, 0x20	; 32
    3d98:	51 e4       	ldi	r21, 0x41	; 65
    3d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	bc 01       	movw	r22, r24
    3da4:	cd 01       	movw	r24, r26
    3da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	9e 83       	std	Y+6, r25	; 0x06
    3db0:	8d 83       	std	Y+5, r24	; 0x05
    3db2:	0f c0       	rjmp	.+30     	; 0x3dd2 <LCD_SendData+0x3a4>
    3db4:	89 e1       	ldi	r24, 0x19	; 25
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	9c 83       	std	Y+4, r25	; 0x04
    3dba:	8b 83       	std	Y+3, r24	; 0x03
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	f1 f7       	brne	.-4      	; 0x3dc0 <LCD_SendData+0x392>
    3dc4:	9c 83       	std	Y+4, r25	; 0x04
    3dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dca:	9e 81       	ldd	r25, Y+6	; 0x06
    3dcc:	01 97       	sbiw	r24, 0x01	; 1
    3dce:	9e 83       	std	Y+6, r25	; 0x06
    3dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd6:	00 97       	sbiw	r24, 0x00	; 0
    3dd8:	69 f7       	brne	.-38     	; 0x3db4 <LCD_SendData+0x386>
    3dda:	14 c0       	rjmp	.+40     	; 0x3e04 <LCD_SendData+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dde:	78 85       	ldd	r23, Y+8	; 0x08
    3de0:	89 85       	ldd	r24, Y+9	; 0x09
    3de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	9e 83       	std	Y+6, r25	; 0x06
    3dee:	8d 83       	std	Y+5, r24	; 0x05
    3df0:	8d 81       	ldd	r24, Y+5	; 0x05
    3df2:	9e 81       	ldd	r25, Y+6	; 0x06
    3df4:	9a 83       	std	Y+2, r25	; 0x02
    3df6:	89 83       	std	Y+1, r24	; 0x01
    3df8:	89 81       	ldd	r24, Y+1	; 0x01
    3dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <LCD_SendData+0x3ce>
    3e00:	9a 83       	std	Y+2, r25	; 0x02
    3e02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

}
    3e04:	e9 96       	adiw	r28, 0x39	; 57
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <LCD_PrintString>:
void LCD_PrintString(char *String)
{
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	00 d0       	rcall	.+0      	; 0x3e1c <LCD_PrintString+0x6>
    3e1c:	00 d0       	rcall	.+0      	; 0x3e1e <LCD_PrintString+0x8>
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	9c 83       	std	Y+4, r25	; 0x04
    3e24:	8b 83       	std	Y+3, r24	; 0x03
	int i=0 ;
    3e26:	1a 82       	std	Y+2, r1	; 0x02
    3e28:	19 82       	std	Y+1, r1	; 0x01
    3e2a:	0f c0       	rjmp	.+30     	; 0x3e4a <LCD_PrintString+0x34>
	while(String[i]!= '\0')
	{
		LCD_SendData(String[i]);
    3e2c:	29 81       	ldd	r18, Y+1	; 0x01
    3e2e:	3a 81       	ldd	r19, Y+2	; 0x02
    3e30:	8b 81       	ldd	r24, Y+3	; 0x03
    3e32:	9c 81       	ldd	r25, Y+4	; 0x04
    3e34:	fc 01       	movw	r30, r24
    3e36:	e2 0f       	add	r30, r18
    3e38:	f3 1f       	adc	r31, r19
    3e3a:	80 81       	ld	r24, Z
    3e3c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		i++;
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	9a 81       	ldd	r25, Y+2	; 0x02
    3e44:	01 96       	adiw	r24, 0x01	; 1
    3e46:	9a 83       	std	Y+2, r25	; 0x02
    3e48:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_PrintString(char *String)
{
	int i=0 ;
	while(String[i]!= '\0')
    3e4a:	29 81       	ldd	r18, Y+1	; 0x01
    3e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	fc 01       	movw	r30, r24
    3e54:	e2 0f       	add	r30, r18
    3e56:	f3 1f       	adc	r31, r19
    3e58:	80 81       	ld	r24, Z
    3e5a:	88 23       	and	r24, r24
    3e5c:	39 f7       	brne	.-50     	; 0x3e2c <LCD_PrintString+0x16>
	{
		LCD_SendData(String[i]);
		i++;
	}
}
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	cf 91       	pop	r28
    3e68:	df 91       	pop	r29
    3e6a:	08 95       	ret

00003e6c <LCD_PrintNumber>:
void LCD_PrintNumber(int number){
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	65 97       	sbiw	r28, 0x15	; 21
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	9d 8b       	std	Y+21, r25	; 0x15
    3e82:	8c 8b       	std	Y+20, r24	; 0x14
	char string[16] = {0};
    3e84:	80 e1       	ldi	r24, 0x10	; 16
    3e86:	fe 01       	movw	r30, r28
    3e88:	34 96       	adiw	r30, 0x04	; 4
    3e8a:	df 01       	movw	r26, r30
    3e8c:	98 2f       	mov	r25, r24
    3e8e:	1d 92       	st	X+, r1
    3e90:	9a 95       	dec	r25
    3e92:	e9 f7       	brne	.-6      	; 0x3e8e <LCD_PrintNumber+0x22>
	short int i = 0;
    3e94:	1b 82       	std	Y+3, r1	; 0x03
    3e96:	1a 82       	std	Y+2, r1	; 0x02
	char flag = 0;
    3e98:	19 82       	std	Y+1, r1	; 0x01
	if(number == 0){
    3e9a:	8c 89       	ldd	r24, Y+20	; 0x14
    3e9c:	9d 89       	ldd	r25, Y+21	; 0x15
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	21 f4       	brne	.+8      	; 0x3eaa <LCD_PrintNumber+0x3e>
		LCD_SendData('0');
    3ea2:	80 e3       	ldi	r24, 0x30	; 48
    3ea4:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
    3ea8:	51 c0       	rjmp	.+162    	; 0x3f4c <LCD_PrintNumber+0xe0>
		return;
	}
	else if(number < 0){
    3eaa:	8c 89       	ldd	r24, Y+20	; 0x14
    3eac:	9d 89       	ldd	r25, Y+21	; 0x15
    3eae:	99 23       	and	r25, r25
    3eb0:	4c f5       	brge	.+82     	; 0x3f04 <LCD_PrintNumber+0x98>
		number = number * -1;
    3eb2:	8c 89       	ldd	r24, Y+20	; 0x14
    3eb4:	9d 89       	ldd	r25, Y+21	; 0x15
    3eb6:	90 95       	com	r25
    3eb8:	81 95       	neg	r24
    3eba:	9f 4f       	sbci	r25, 0xFF	; 255
    3ebc:	9d 8b       	std	Y+21, r25	; 0x15
    3ebe:	8c 8b       	std	Y+20, r24	; 0x14
		flag = 1;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	1f c0       	rjmp	.+62     	; 0x3f04 <LCD_PrintNumber+0x98>
	}

	while(number > 0){
		string[i] = (number%10) + '0';
    3ec6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec8:	fb 81       	ldd	r31, Y+3	; 0x03
    3eca:	8c 89       	ldd	r24, Y+20	; 0x14
    3ecc:	9d 89       	ldd	r25, Y+21	; 0x15
    3ece:	2a e0       	ldi	r18, 0x0A	; 10
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	b9 01       	movw	r22, r18
    3ed4:	0e 94 51 28 	call	0x50a2	; 0x50a2 <__divmodhi4>
    3ed8:	28 2f       	mov	r18, r24
    3eda:	20 5d       	subi	r18, 0xD0	; 208
    3edc:	ce 01       	movw	r24, r28
    3ede:	04 96       	adiw	r24, 0x04	; 4
    3ee0:	e8 0f       	add	r30, r24
    3ee2:	f9 1f       	adc	r31, r25
    3ee4:	20 83       	st	Z, r18
		number = number / 10;
    3ee6:	8c 89       	ldd	r24, Y+20	; 0x14
    3ee8:	9d 89       	ldd	r25, Y+21	; 0x15
    3eea:	2a e0       	ldi	r18, 0x0A	; 10
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	b9 01       	movw	r22, r18
    3ef0:	0e 94 51 28 	call	0x50a2	; 0x50a2 <__divmodhi4>
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	9d 8b       	std	Y+21, r25	; 0x15
    3ef8:	8c 8b       	std	Y+20, r24	; 0x14
		i++;
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	9b 81       	ldd	r25, Y+3	; 0x03
    3efe:	01 96       	adiw	r24, 0x01	; 1
    3f00:	9b 83       	std	Y+3, r25	; 0x03
    3f02:	8a 83       	std	Y+2, r24	; 0x02
	else if(number < 0){
		number = number * -1;
		flag = 1;
	}

	while(number > 0){
    3f04:	8c 89       	ldd	r24, Y+20	; 0x14
    3f06:	9d 89       	ldd	r25, Y+21	; 0x15
    3f08:	18 16       	cp	r1, r24
    3f0a:	19 06       	cpc	r1, r25
    3f0c:	e4 f2       	brlt	.-72     	; 0x3ec6 <LCD_PrintNumber+0x5a>
		string[i] = (number%10) + '0';
		number = number / 10;
		i++;
	}

	i--;
    3f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f10:	9b 81       	ldd	r25, Y+3	; 0x03
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	9b 83       	std	Y+3, r25	; 0x03
    3f16:	8a 83       	std	Y+2, r24	; 0x02
	if(flag == 1) LCD_SendData('-');
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	81 30       	cpi	r24, 0x01	; 1
    3f1c:	99 f4       	brne	.+38     	; 0x3f44 <LCD_PrintNumber+0xd8>
    3f1e:	8d e2       	ldi	r24, 0x2D	; 45
    3f20:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
    3f24:	0f c0       	rjmp	.+30     	; 0x3f44 <LCD_PrintNumber+0xd8>
	while(i >= 0){
		LCD_SendData(string[i]);
    3f26:	2a 81       	ldd	r18, Y+2	; 0x02
    3f28:	3b 81       	ldd	r19, Y+3	; 0x03
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	04 96       	adiw	r24, 0x04	; 4
    3f2e:	fc 01       	movw	r30, r24
    3f30:	e2 0f       	add	r30, r18
    3f32:	f3 1f       	adc	r31, r19
    3f34:	80 81       	ld	r24, Z
    3f36:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		i--;
    3f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	9b 83       	std	Y+3, r25	; 0x03
    3f42:	8a 83       	std	Y+2, r24	; 0x02
		i++;
	}

	i--;
	if(flag == 1) LCD_SendData('-');
	while(i >= 0){
    3f44:	8a 81       	ldd	r24, Y+2	; 0x02
    3f46:	9b 81       	ldd	r25, Y+3	; 0x03
    3f48:	99 23       	and	r25, r25
    3f4a:	6c f7       	brge	.-38     	; 0x3f26 <LCD_PrintNumber+0xba>
		LCD_SendData(string[i]);
		i--;
	}
}
    3f4c:	65 96       	adiw	r28, 0x15	; 21
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	cf 91       	pop	r28
    3f5a:	df 91       	pop	r29
    3f5c:	08 95       	ret

00003f5e <Safe_Init>:
static U8 Counter1 ;



void Safe_Init(void)
{
    3f5e:	df 93       	push	r29
    3f60:	cf 93       	push	r28
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
	//Setting the Timer ISR Callback Function
	TIM0_SetISR(Safe_Operation);
    3f66:	8a eb       	ldi	r24, 0xBA	; 186
    3f68:	9f e1       	ldi	r25, 0x1F	; 31
    3f6a:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <TIM0_SetISR>
}
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	08 95       	ret

00003f74 <Safe_Operation>:

void Safe_Operation(void)
{
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <Safe_Operation+0x6>
    3f7a:	00 d0       	rcall	.+0      	; 0x3f7c <Safe_Operation+0x8>
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
	int i ;
	switch(State){
    3f80:	80 91 63 02 	lds	r24, 0x0263
    3f84:	28 2f       	mov	r18, r24
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	3c 83       	std	Y+4, r19	; 0x04
    3f8a:	2b 83       	std	Y+3, r18	; 0x03
    3f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	91 05       	cpc	r25, r1
    3f94:	09 f4       	brne	.+2      	; 0x3f98 <Safe_Operation+0x24>
    3f96:	79 c0       	rjmp	.+242    	; 0x408a <Safe_Operation+0x116>
    3f98:	2b 81       	ldd	r18, Y+3	; 0x03
    3f9a:	3c 81       	ldd	r19, Y+4	; 0x04
    3f9c:	22 30       	cpi	r18, 0x02	; 2
    3f9e:	31 05       	cpc	r19, r1
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <Safe_Operation+0x30>
    3fa2:	cf c0       	rjmp	.+414    	; 0x4142 <Safe_Operation+0x1ce>
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa8:	00 97       	sbiw	r24, 0x00	; 0
    3faa:	09 f0       	breq	.+2      	; 0x3fae <Safe_Operation+0x3a>
    3fac:	e2 c0       	rjmp	.+452    	; 0x4172 <Safe_Operation+0x1fe>
		case FIRST_TIME:
			//Initializing the safe password
			LCD_PrintString("Enter new password :");
    3fae:	84 e7       	ldi	r24, 0x74	; 116
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
			LCD_SendCommand(Second_Line);
    3fb6:	80 e8       	ldi	r24, 0x80	; 128
    3fb8:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
			//Entering the password for the first time on the safe
			if (Pass_Flag != 1)
    3fbc:	80 91 64 02 	lds	r24, 0x0264
    3fc0:	81 30       	cpi	r24, 0x01	; 1
    3fc2:	39 f0       	breq	.+14     	; 0x3fd2 <Safe_Operation+0x5e>
			{
				Pass_Flag = Get_String(Password);
    3fc4:	88 e2       	ldi	r24, 0x28	; 40
    3fc6:	92 e0       	ldi	r25, 0x02	; 2
    3fc8:	0e 94 c0 20 	call	0x4180	; 0x4180 <Get_String>
    3fcc:	80 93 64 02 	sts	0x0264, r24
    3fd0:	d0 c0       	rjmp	.+416    	; 0x4172 <Safe_Operation+0x1fe>
			}
			//After first entry a Confirmation is required
			else if (Pass_Config_Falg != 1)
    3fd2:	80 91 65 02 	lds	r24, 0x0265
    3fd6:	81 30       	cpi	r24, 0x01	; 1
    3fd8:	d9 f0       	breq	.+54     	; 0x4010 <Safe_Operation+0x9c>
			{
				if(Pass_config_Flag1 == 0)
    3fda:	80 91 66 02 	lds	r24, 0x0266
    3fde:	88 23       	and	r24, r24
    3fe0:	81 f4       	brne	.+32     	; 0x4002 <Safe_Operation+0x8e>
				{
					//LCD Setup
					LCD_SendCommand(CLEAR);
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_SendCommand(Reset_Cursor);
    3fe8:	83 e0       	ldi	r24, 0x03	; 3
    3fea:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_PrintString("Re-Enter the password :");
    3fee:	89 e8       	ldi	r24, 0x89	; 137
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
					LCD_SendCommand(Second_Line);
    3ff6:	80 e8       	ldi	r24, 0x80	; 128
    3ff8:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					Pass_config_Flag1 = 1 ;
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	80 93 66 02 	sts	0x0266, r24
				}
				else
				{
					//Do Nothing
				}
				Pass_Config_Falg = Get_String(Pass_config);
    4002:	88 e3       	ldi	r24, 0x38	; 56
    4004:	92 e0       	ldi	r25, 0x02	; 2
    4006:	0e 94 c0 20 	call	0x4180	; 0x4180 <Get_String>
    400a:	80 93 65 02 	sts	0x0265, r24
    400e:	b1 c0       	rjmp	.+354    	; 0x4172 <Safe_Operation+0x1fe>
			}
			//After Confirmation entry check the two entries are equal
			else if (Pass_Config_Falg == 1)
    4010:	80 91 65 02 	lds	r24, 0x0265
    4014:	81 30       	cpi	r24, 0x01	; 1
    4016:	09 f0       	breq	.+2      	; 0x401a <Safe_Operation+0xa6>
    4018:	ac c0       	rjmp	.+344    	; 0x4172 <Safe_Operation+0x1fe>
			{
				//check if pass = confirm
				if(strcmp(Password,Pass_config) != 0)
    401a:	88 e2       	ldi	r24, 0x28	; 40
    401c:	92 e0       	ldi	r25, 0x02	; 2
    401e:	28 e3       	ldi	r18, 0x38	; 56
    4020:	32 e0       	ldi	r19, 0x02	; 2
    4022:	b9 01       	movw	r22, r18
    4024:	0e 94 af 28 	call	0x515e	; 0x515e <strcmp>
    4028:	00 97       	sbiw	r24, 0x00	; 0
    402a:	21 f0       	breq	.+8      	; 0x4034 <Safe_Operation+0xc0>
				{
					State = LOCKED ;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	80 93 63 02 	sts	0x0263, r24
    4032:	9f c0       	rjmp	.+318    	; 0x4172 <Safe_Operation+0x1fe>
				}
				else
				{
					LCD_SendCommand(CLEAR);
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_SendCommand(Reset_Cursor);
    403a:	83 e0       	ldi	r24, 0x03	; 3
    403c:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_PrintString("Passwords dont match          ");
    4040:	81 ea       	ldi	r24, 0xA1	; 161
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
					LCD_SendCommand(CLEAR);
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_SendCommand(Reset_Cursor);
    404e:	83 e0       	ldi	r24, 0x03	; 3
    4050:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					//Reseting
					for(i=0;i<16;i++)
    4054:	1a 82       	std	Y+2, r1	; 0x02
    4056:	19 82       	std	Y+1, r1	; 0x01
    4058:	0c c0       	rjmp	.+24     	; 0x4072 <Safe_Operation+0xfe>
					{
						Pass_config[i]='F';
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	9a 81       	ldd	r25, Y+2	; 0x02
    405e:	fc 01       	movw	r30, r24
    4060:	e8 5c       	subi	r30, 0xC8	; 200
    4062:	fd 4f       	sbci	r31, 0xFD	; 253
    4064:	86 e4       	ldi	r24, 0x46	; 70
    4066:	80 83       	st	Z, r24
					LCD_SendCommand(Reset_Cursor);
					LCD_PrintString("Passwords dont match          ");
					LCD_SendCommand(CLEAR);
					LCD_SendCommand(Reset_Cursor);
					//Reseting
					for(i=0;i<16;i++)
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	9a 81       	ldd	r25, Y+2	; 0x02
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	9a 83       	std	Y+2, r25	; 0x02
    4070:	89 83       	std	Y+1, r24	; 0x01
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	80 31       	cpi	r24, 0x10	; 16
    4078:	91 05       	cpc	r25, r1
    407a:	7c f3       	brlt	.-34     	; 0x405a <Safe_Operation+0xe6>
					{
						Pass_config[i]='F';
					}
					Counter1 = 0 ;
    407c:	10 92 6a 02 	sts	0x026A, r1
					Pass_Config_Falg=0;
    4080:	10 92 65 02 	sts	0x0265, r1
					Pass_config_Flag1=0;
    4084:	10 92 66 02 	sts	0x0266, r1
    4088:	74 c0       	rjmp	.+232    	; 0x4172 <Safe_Operation+0x1fe>
			}

			break;
		case LOCKED:

			if (Temp_Flag !=1)
    408a:	80 91 67 02 	lds	r24, 0x0267
    408e:	81 30       	cpi	r24, 0x01	; 1
    4090:	d9 f0       	breq	.+54     	; 0x40c8 <Safe_Operation+0x154>
			{
				if(Temp_Flag1 == 0)
    4092:	80 91 68 02 	lds	r24, 0x0268
    4096:	88 23       	and	r24, r24
    4098:	81 f4       	brne	.+32     	; 0x40ba <Safe_Operation+0x146>
				{
					//LCD Setup
					LCD_SendCommand(CLEAR);
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_SendCommand(Reset_Cursor);
    40a0:	83 e0       	ldi	r24, 0x03	; 3
    40a2:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_PrintString("Enter the password : ");
    40a6:	80 ec       	ldi	r24, 0xC0	; 192
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
					LCD_SendCommand(Second_Line);
    40ae:	80 e8       	ldi	r24, 0x80	; 128
    40b0:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					Temp_Flag1 = 1 ;
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	80 93 68 02 	sts	0x0268, r24
				}
				else
				{

				}
				Temp_Flag = Get_String(Temp_Pass);
    40ba:	88 e4       	ldi	r24, 0x48	; 72
    40bc:	92 e0       	ldi	r25, 0x02	; 2
    40be:	0e 94 c0 20 	call	0x4180	; 0x4180 <Get_String>
    40c2:	80 93 67 02 	sts	0x0267, r24
    40c6:	55 c0       	rjmp	.+170    	; 0x4172 <Safe_Operation+0x1fe>
			}
			else if (Temp_Flag == 1)
    40c8:	80 91 67 02 	lds	r24, 0x0267
    40cc:	81 30       	cpi	r24, 0x01	; 1
    40ce:	09 f0       	breq	.+2      	; 0x40d2 <Safe_Operation+0x15e>
    40d0:	50 c0       	rjmp	.+160    	; 0x4172 <Safe_Operation+0x1fe>
			{
				//Password Entered
				//Checking Entered Password with saved Pass
				if (strcmp(Temp_Pass,Password) != 0)//Equal
    40d2:	88 e4       	ldi	r24, 0x48	; 72
    40d4:	92 e0       	ldi	r25, 0x02	; 2
    40d6:	28 e2       	ldi	r18, 0x28	; 40
    40d8:	32 e0       	ldi	r19, 0x02	; 2
    40da:	b9 01       	movw	r22, r18
    40dc:	0e 94 af 28 	call	0x515e	; 0x515e <strcmp>
    40e0:	00 97       	sbiw	r24, 0x00	; 0
    40e2:	21 f0       	breq	.+8      	; 0x40ec <Safe_Operation+0x178>
				{
					State = UNLOCKED ;
    40e4:	82 e0       	ldi	r24, 0x02	; 2
    40e6:	80 93 63 02 	sts	0x0263, r24
    40ea:	43 c0       	rjmp	.+134    	; 0x4172 <Safe_Operation+0x1fe>
				}
				else								//In case of incorrect input
				{
					LCD_SendCommand(CLEAR);
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_SendCommand(Reset_Cursor);
    40f2:	83 e0       	ldi	r24, 0x03	; 3
    40f4:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_PrintString("WRONG PASSWORD            ");
    40f8:	86 ed       	ldi	r24, 0xD6	; 214
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
					LCD_SendCommand(CLEAR);
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					LCD_SendCommand(Reset_Cursor);
    4106:	83 e0       	ldi	r24, 0x03	; 3
    4108:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
					//Reseting variables for re-enter
					for(i=0;i<16;i++)
    410c:	1a 82       	std	Y+2, r1	; 0x02
    410e:	19 82       	std	Y+1, r1	; 0x01
    4110:	0c c0       	rjmp	.+24     	; 0x412a <Safe_Operation+0x1b6>
					{
						Temp_Pass[i]='F';
    4112:	89 81       	ldd	r24, Y+1	; 0x01
    4114:	9a 81       	ldd	r25, Y+2	; 0x02
    4116:	fc 01       	movw	r30, r24
    4118:	e8 5b       	subi	r30, 0xB8	; 184
    411a:	fd 4f       	sbci	r31, 0xFD	; 253
    411c:	86 e4       	ldi	r24, 0x46	; 70
    411e:	80 83       	st	Z, r24
					LCD_SendCommand(Reset_Cursor);
					LCD_PrintString("WRONG PASSWORD            ");
					LCD_SendCommand(CLEAR);
					LCD_SendCommand(Reset_Cursor);
					//Reseting variables for re-enter
					for(i=0;i<16;i++)
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	9a 81       	ldd	r25, Y+2	; 0x02
    4124:	01 96       	adiw	r24, 0x01	; 1
    4126:	9a 83       	std	Y+2, r25	; 0x02
    4128:	89 83       	std	Y+1, r24	; 0x01
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	9a 81       	ldd	r25, Y+2	; 0x02
    412e:	80 31       	cpi	r24, 0x10	; 16
    4130:	91 05       	cpc	r25, r1
    4132:	7c f3       	brlt	.-34     	; 0x4112 <Safe_Operation+0x19e>
					{
						Temp_Pass[i]='F';
					}
					Counter1 = 0 ;
    4134:	10 92 6a 02 	sts	0x026A, r1
					Temp_Flag = 0 ;
    4138:	10 92 67 02 	sts	0x0267, r1
					Temp_Flag1 = 0 ;
    413c:	10 92 68 02 	sts	0x0268, r1
    4140:	18 c0       	rjmp	.+48     	; 0x4172 <Safe_Operation+0x1fe>
			{
				//Do Nothing
			}
			break;
		case UNLOCKED :
			if(Unlock_Flag == 0)
    4142:	80 91 69 02 	lds	r24, 0x0269
    4146:	88 23       	and	r24, r24
    4148:	69 f4       	brne	.+26     	; 0x4164 <Safe_Operation+0x1f0>
			{
				//LCD Update
				LCD_SendCommand(CLEAR);
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_SendCommand(Reset_Cursor);
    4150:	83 e0       	ldi	r24, 0x03	; 3
    4152:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_PrintString("UNLOCKED");
    4156:	81 ef       	ldi	r24, 0xF1	; 241
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				Unlock_Flag =1;
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	80 93 69 02 	sts	0x0269, r24
			}
			else
			{

			}
			if(Keypad_Scan()==7)
    4164:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4168:	87 30       	cpi	r24, 0x07	; 7
    416a:	19 f4       	brne	.+6      	; 0x4172 <Safe_Operation+0x1fe>
			{
				State = LOCKED ;
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	80 93 63 02 	sts	0x0263, r24
			//Do Nothing
			break;
		}


}
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	08 95       	ret

00004180 <Get_String>:

U8 Get_String(U8 * str)
{
    4180:	df 93       	push	r29
    4182:	cf 93       	push	r28
    4184:	00 d0       	rcall	.+0      	; 0x4186 <Get_String+0x6>
    4186:	00 d0       	rcall	.+0      	; 0x4188 <Get_String+0x8>
    4188:	cd b7       	in	r28, 0x3d	; 61
    418a:	de b7       	in	r29, 0x3e	; 62
    418c:	9c 83       	std	Y+4, r25	; 0x04
    418e:	8b 83       	std	Y+3, r24	; 0x03
	 * and returns 1 if the entry is finished
	 * */
	U8 RetVal ;
	U8 i ;							//Counter
	//Entering and Saving The str
	if(Keypad_Scan() == 0)
    4190:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4194:	88 23       	and	r24, r24
    4196:	a1 f4       	brne	.+40     	; 0x41c0 <Get_String+0x40>
	{
		str[Counter1]='1';
    4198:	80 91 6a 02 	lds	r24, 0x026A
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	8b 81       	ldd	r24, Y+3	; 0x03
    41a2:	9c 81       	ldd	r25, Y+4	; 0x04
    41a4:	fc 01       	movw	r30, r24
    41a6:	e2 0f       	add	r30, r18
    41a8:	f3 1f       	adc	r31, r19
    41aa:	81 e3       	ldi	r24, 0x31	; 49
    41ac:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    41ae:	8a e2       	ldi	r24, 0x2A	; 42
    41b0:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    41b4:	80 91 6a 02 	lds	r24, 0x026A
    41b8:	8f 5f       	subi	r24, 0xFF	; 255
    41ba:	80 93 6a 02 	sts	0x026A, r24
    41be:	bd c1       	rjmp	.+890    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 1)
    41c0:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    41c4:	81 30       	cpi	r24, 0x01	; 1
    41c6:	a1 f4       	brne	.+40     	; 0x41f0 <Get_String+0x70>
	{
		str[Counter1]='2';
    41c8:	80 91 6a 02 	lds	r24, 0x026A
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	8b 81       	ldd	r24, Y+3	; 0x03
    41d2:	9c 81       	ldd	r25, Y+4	; 0x04
    41d4:	fc 01       	movw	r30, r24
    41d6:	e2 0f       	add	r30, r18
    41d8:	f3 1f       	adc	r31, r19
    41da:	82 e3       	ldi	r24, 0x32	; 50
    41dc:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    41de:	8a e2       	ldi	r24, 0x2A	; 42
    41e0:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    41e4:	80 91 6a 02 	lds	r24, 0x026A
    41e8:	8f 5f       	subi	r24, 0xFF	; 255
    41ea:	80 93 6a 02 	sts	0x026A, r24
    41ee:	a5 c1       	rjmp	.+842    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 2)
    41f0:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	a1 f4       	brne	.+40     	; 0x4220 <Get_String+0xa0>
	{
		str[Counter1]='3';
    41f8:	80 91 6a 02 	lds	r24, 0x026A
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	9c 81       	ldd	r25, Y+4	; 0x04
    4204:	fc 01       	movw	r30, r24
    4206:	e2 0f       	add	r30, r18
    4208:	f3 1f       	adc	r31, r19
    420a:	83 e3       	ldi	r24, 0x33	; 51
    420c:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    420e:	8a e2       	ldi	r24, 0x2A	; 42
    4210:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4214:	80 91 6a 02 	lds	r24, 0x026A
    4218:	8f 5f       	subi	r24, 0xFF	; 255
    421a:	80 93 6a 02 	sts	0x026A, r24
    421e:	8d c1       	rjmp	.+794    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 3)	//Enter
    4220:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4224:	83 30       	cpi	r24, 0x03	; 3
    4226:	29 f4       	brne	.+10     	; 0x4232 <Get_String+0xb2>
	{
		//This Button indicates the end of an entry , reset counter and change  RetVal for State Changing
		Counter1 = 0 ;
    4228:	10 92 6a 02 	sts	0x026A, r1
		RetVal = 1;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	8a 83       	std	Y+2, r24	; 0x02
    4230:	84 c1       	rjmp	.+776    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 4)
    4232:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4236:	84 30       	cpi	r24, 0x04	; 4
    4238:	a1 f4       	brne	.+40     	; 0x4262 <Get_String+0xe2>
	{
		str[Counter1]='4';
    423a:	80 91 6a 02 	lds	r24, 0x026A
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	8b 81       	ldd	r24, Y+3	; 0x03
    4244:	9c 81       	ldd	r25, Y+4	; 0x04
    4246:	fc 01       	movw	r30, r24
    4248:	e2 0f       	add	r30, r18
    424a:	f3 1f       	adc	r31, r19
    424c:	84 e3       	ldi	r24, 0x34	; 52
    424e:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    4250:	8a e2       	ldi	r24, 0x2A	; 42
    4252:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4256:	80 91 6a 02 	lds	r24, 0x026A
    425a:	8f 5f       	subi	r24, 0xFF	; 255
    425c:	80 93 6a 02 	sts	0x026A, r24
    4260:	6c c1       	rjmp	.+728    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 5)
    4262:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4266:	85 30       	cpi	r24, 0x05	; 5
    4268:	a1 f4       	brne	.+40     	; 0x4292 <Get_String+0x112>
	{
		str[Counter1]='5';
    426a:	80 91 6a 02 	lds	r24, 0x026A
    426e:	28 2f       	mov	r18, r24
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	8b 81       	ldd	r24, Y+3	; 0x03
    4274:	9c 81       	ldd	r25, Y+4	; 0x04
    4276:	fc 01       	movw	r30, r24
    4278:	e2 0f       	add	r30, r18
    427a:	f3 1f       	adc	r31, r19
    427c:	85 e3       	ldi	r24, 0x35	; 53
    427e:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    4280:	8a e2       	ldi	r24, 0x2A	; 42
    4282:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4286:	80 91 6a 02 	lds	r24, 0x026A
    428a:	8f 5f       	subi	r24, 0xFF	; 255
    428c:	80 93 6a 02 	sts	0x026A, r24
    4290:	54 c1       	rjmp	.+680    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 6)
    4292:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4296:	86 30       	cpi	r24, 0x06	; 6
    4298:	a1 f4       	brne	.+40     	; 0x42c2 <Get_String+0x142>
	{
		str[Counter1]='6';
    429a:	80 91 6a 02 	lds	r24, 0x026A
    429e:	28 2f       	mov	r18, r24
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	8b 81       	ldd	r24, Y+3	; 0x03
    42a4:	9c 81       	ldd	r25, Y+4	; 0x04
    42a6:	fc 01       	movw	r30, r24
    42a8:	e2 0f       	add	r30, r18
    42aa:	f3 1f       	adc	r31, r19
    42ac:	86 e3       	ldi	r24, 0x36	; 54
    42ae:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    42b0:	8a e2       	ldi	r24, 0x2A	; 42
    42b2:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    42b6:	80 91 6a 02 	lds	r24, 0x026A
    42ba:	8f 5f       	subi	r24, 0xFF	; 255
    42bc:	80 93 6a 02 	sts	0x026A, r24
    42c0:	3c c1       	rjmp	.+632    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 7)	//LOCK
    42c2:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    42c6:	87 30       	cpi	r24, 0x07	; 7
    42c8:	49 f4       	brne	.+18     	; 0x42dc <Get_String+0x15c>
	{
		//this button is only functional in the UNLOCKED state to Lock the Safe
		if(State == FIRST_TIME)
    42ca:	80 91 63 02 	lds	r24, 0x0263
    42ce:	88 23       	and	r24, r24
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <Get_String+0x154>
    42d2:	33 c1       	rjmp	.+614    	; 0x453a <Get_String+0x3ba>
		{
			//Do Nothing
		}
		else
		{
			State = LOCKED ;
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	80 93 63 02 	sts	0x0263, r24
    42da:	2f c1       	rjmp	.+606    	; 0x453a <Get_String+0x3ba>
		}
	}
	else if (Keypad_Scan() == 8)
    42dc:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    42e0:	88 30       	cpi	r24, 0x08	; 8
    42e2:	a1 f4       	brne	.+40     	; 0x430c <Get_String+0x18c>
	{
		str[Counter1]='7';
    42e4:	80 91 6a 02 	lds	r24, 0x026A
    42e8:	28 2f       	mov	r18, r24
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	8b 81       	ldd	r24, Y+3	; 0x03
    42ee:	9c 81       	ldd	r25, Y+4	; 0x04
    42f0:	fc 01       	movw	r30, r24
    42f2:	e2 0f       	add	r30, r18
    42f4:	f3 1f       	adc	r31, r19
    42f6:	87 e3       	ldi	r24, 0x37	; 55
    42f8:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    42fa:	8a e2       	ldi	r24, 0x2A	; 42
    42fc:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4300:	80 91 6a 02 	lds	r24, 0x026A
    4304:	8f 5f       	subi	r24, 0xFF	; 255
    4306:	80 93 6a 02 	sts	0x026A, r24
    430a:	17 c1       	rjmp	.+558    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 9)
    430c:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4310:	89 30       	cpi	r24, 0x09	; 9
    4312:	a1 f4       	brne	.+40     	; 0x433c <Get_String+0x1bc>
	{
		str[Counter1]='8';
    4314:	80 91 6a 02 	lds	r24, 0x026A
    4318:	28 2f       	mov	r18, r24
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	8b 81       	ldd	r24, Y+3	; 0x03
    431e:	9c 81       	ldd	r25, Y+4	; 0x04
    4320:	fc 01       	movw	r30, r24
    4322:	e2 0f       	add	r30, r18
    4324:	f3 1f       	adc	r31, r19
    4326:	88 e3       	ldi	r24, 0x38	; 56
    4328:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    432a:	8a e2       	ldi	r24, 0x2A	; 42
    432c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4330:	80 91 6a 02 	lds	r24, 0x026A
    4334:	8f 5f       	subi	r24, 0xFF	; 255
    4336:	80 93 6a 02 	sts	0x026A, r24
    433a:	ff c0       	rjmp	.+510    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 10)
    433c:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4340:	8a 30       	cpi	r24, 0x0A	; 10
    4342:	a1 f4       	brne	.+40     	; 0x436c <Get_String+0x1ec>
	{
		str[Counter1]='9';
    4344:	80 91 6a 02 	lds	r24, 0x026A
    4348:	28 2f       	mov	r18, r24
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	8b 81       	ldd	r24, Y+3	; 0x03
    434e:	9c 81       	ldd	r25, Y+4	; 0x04
    4350:	fc 01       	movw	r30, r24
    4352:	e2 0f       	add	r30, r18
    4354:	f3 1f       	adc	r31, r19
    4356:	89 e3       	ldi	r24, 0x39	; 57
    4358:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    435a:	8a e2       	ldi	r24, 0x2A	; 42
    435c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4360:	80 91 6a 02 	lds	r24, 0x026A
    4364:	8f 5f       	subi	r24, 0xFF	; 255
    4366:	80 93 6a 02 	sts	0x026A, r24
    436a:	e7 c0       	rjmp	.+462    	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 11)	//Backspace (Reduce Counter Then Reprint the screen Depending on the Mode)
    436c:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4370:	8b 30       	cpi	r24, 0x0B	; 11
    4372:	09 f0       	breq	.+2      	; 0x4376 <Get_String+0x1f6>
    4374:	72 c0       	rjmp	.+228    	; 0x445a <Get_String+0x2da>
	{
		if(strcmp(str,"FFFFFFFFFFFFFFFF") !=0) //str Empty
    4376:	8b 81       	ldd	r24, Y+3	; 0x03
    4378:	9c 81       	ldd	r25, Y+4	; 0x04
    437a:	2a ef       	ldi	r18, 0xFA	; 250
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	b9 01       	movw	r22, r18
    4380:	0e 94 af 28 	call	0x515e	; 0x515e <strcmp>
    4384:	00 97       	sbiw	r24, 0x00	; 0
    4386:	09 f0       	breq	.+2      	; 0x438a <Get_String+0x20a>
    4388:	d8 c0       	rjmp	.+432    	; 0x453a <Get_String+0x3ba>
		{
			//Do Nothing
		}
		else
		{
			Counter1--;
    438a:	80 91 6a 02 	lds	r24, 0x026A
    438e:	81 50       	subi	r24, 0x01	; 1
    4390:	80 93 6a 02 	sts	0x026A, r24
			str[Counter1]='F';
    4394:	80 91 6a 02 	lds	r24, 0x026A
    4398:	28 2f       	mov	r18, r24
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	8b 81       	ldd	r24, Y+3	; 0x03
    439e:	9c 81       	ldd	r25, Y+4	; 0x04
    43a0:	fc 01       	movw	r30, r24
    43a2:	e2 0f       	add	r30, r18
    43a4:	f3 1f       	adc	r31, r19
    43a6:	86 e4       	ldi	r24, 0x46	; 70
    43a8:	80 83       	st	Z, r24
			//LCD Update
			if (Pass_Flag != 1)
    43aa:	80 91 64 02 	lds	r24, 0x0264
    43ae:	81 30       	cpi	r24, 0x01	; 1
    43b0:	a9 f0       	breq	.+42     	; 0x43dc <Get_String+0x25c>
			{
				LCD_PrintString("Enter new password :");
    43b2:	84 e7       	ldi	r24, 0x74	; 116
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				LCD_SendCommand(Second_Line);
    43ba:	80 e8       	ldi	r24, 0x80	; 128
    43bc:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				for(i=0 ; i<Counter1 ; i++)
    43c0:	19 82       	std	Y+1, r1	; 0x01
    43c2:	06 c0       	rjmp	.+12     	; 0x43d0 <Get_String+0x250>
				{
					LCD_SendData('*');
    43c4:	8a e2       	ldi	r24, 0x2A	; 42
    43c6:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
			//LCD Update
			if (Pass_Flag != 1)
			{
				LCD_PrintString("Enter new password :");
				LCD_SendCommand(Second_Line);
				for(i=0 ; i<Counter1 ; i++)
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	8f 5f       	subi	r24, 0xFF	; 255
    43ce:	89 83       	std	Y+1, r24	; 0x01
    43d0:	90 91 6a 02 	lds	r25, 0x026A
    43d4:	89 81       	ldd	r24, Y+1	; 0x01
    43d6:	89 17       	cp	r24, r25
    43d8:	a8 f3       	brcs	.-22     	; 0x43c4 <Get_String+0x244>
    43da:	af c0       	rjmp	.+350    	; 0x453a <Get_String+0x3ba>
				{
					LCD_SendData('*');
				}
			}
			else if (Pass_Config_Falg != 1)
    43dc:	80 91 65 02 	lds	r24, 0x0265
    43e0:	81 30       	cpi	r24, 0x01	; 1
    43e2:	d9 f0       	breq	.+54     	; 0x441a <Get_String+0x29a>
			{
				LCD_SendCommand(CLEAR);
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_SendCommand(Reset_Cursor);
    43ea:	83 e0       	ldi	r24, 0x03	; 3
    43ec:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_PrintString("Re-Enter the password :");
    43f0:	89 e8       	ldi	r24, 0x89	; 137
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				LCD_SendCommand(Second_Line);
    43f8:	80 e8       	ldi	r24, 0x80	; 128
    43fa:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>

				for(i=0 ; i<Counter1 ; i++)
    43fe:	19 82       	std	Y+1, r1	; 0x01
    4400:	06 c0       	rjmp	.+12     	; 0x440e <Get_String+0x28e>
				{
					LCD_SendData('*');
    4402:	8a e2       	ldi	r24, 0x2A	; 42
    4404:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
				LCD_SendCommand(CLEAR);
				LCD_SendCommand(Reset_Cursor);
				LCD_PrintString("Re-Enter the password :");
				LCD_SendCommand(Second_Line);

				for(i=0 ; i<Counter1 ; i++)
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	8f 5f       	subi	r24, 0xFF	; 255
    440c:	89 83       	std	Y+1, r24	; 0x01
    440e:	90 91 6a 02 	lds	r25, 0x026A
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	89 17       	cp	r24, r25
    4416:	a8 f3       	brcs	.-22     	; 0x4402 <Get_String+0x282>
    4418:	90 c0       	rjmp	.+288    	; 0x453a <Get_String+0x3ba>
				{
					LCD_SendData('*');
				}
			}
			else if (State == LOCKED)
    441a:	80 91 63 02 	lds	r24, 0x0263
    441e:	81 30       	cpi	r24, 0x01	; 1
    4420:	09 f0       	breq	.+2      	; 0x4424 <Get_String+0x2a4>
    4422:	8b c0       	rjmp	.+278    	; 0x453a <Get_String+0x3ba>
			{
				LCD_SendCommand(CLEAR);
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_SendCommand(Reset_Cursor);
    442a:	83 e0       	ldi	r24, 0x03	; 3
    442c:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_PrintString("Enter the password :");
    4430:	8b e0       	ldi	r24, 0x0B	; 11
    4432:	91 e0       	ldi	r25, 0x01	; 1
    4434:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				LCD_SendCommand(Second_Line);
    4438:	80 e8       	ldi	r24, 0x80	; 128
    443a:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>

				for(i=0 ; i<Counter1 ; i++)
    443e:	19 82       	std	Y+1, r1	; 0x01
    4440:	06 c0       	rjmp	.+12     	; 0x444e <Get_String+0x2ce>
				{
					LCD_SendData('*');
    4442:	8a e2       	ldi	r24, 0x2A	; 42
    4444:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
				LCD_SendCommand(CLEAR);
				LCD_SendCommand(Reset_Cursor);
				LCD_PrintString("Enter the password :");
				LCD_SendCommand(Second_Line);

				for(i=0 ; i<Counter1 ; i++)
    4448:	89 81       	ldd	r24, Y+1	; 0x01
    444a:	8f 5f       	subi	r24, 0xFF	; 255
    444c:	89 83       	std	Y+1, r24	; 0x01
    444e:	90 91 6a 02 	lds	r25, 0x026A
    4452:	89 81       	ldd	r24, Y+1	; 0x01
    4454:	89 17       	cp	r24, r25
    4456:	a8 f3       	brcs	.-22     	; 0x4442 <Get_String+0x2c2>
    4458:	70 c0       	rjmp	.+224    	; 0x453a <Get_String+0x3ba>
			}

		}

	}
	else if (Keypad_Scan() == 12)	//CLEAR
    445a:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    445e:	8c 30       	cpi	r24, 0x0C	; 12
    4460:	09 f0       	breq	.+2      	; 0x4464 <Get_String+0x2e4>
    4462:	4d c0       	rjmp	.+154    	; 0x44fe <Get_String+0x37e>
	{
		if(strcmp(str,"FFFFFFFFFFFFFFFF") !=0) //str Empty
    4464:	8b 81       	ldd	r24, Y+3	; 0x03
    4466:	9c 81       	ldd	r25, Y+4	; 0x04
    4468:	2a ef       	ldi	r18, 0xFA	; 250
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	b9 01       	movw	r22, r18
    446e:	0e 94 af 28 	call	0x515e	; 0x515e <strcmp>
    4472:	00 97       	sbiw	r24, 0x00	; 0
    4474:	89 f5       	brne	.+98     	; 0x44d8 <Get_String+0x358>
		{
			//Do Nothing
		}
		else
		{
			Counter1 =0;
    4476:	10 92 6a 02 	sts	0x026A, r1
			if (Pass_Flag != 1)
    447a:	80 91 64 02 	lds	r24, 0x0264
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	41 f0       	breq	.+16     	; 0x4492 <Get_String+0x312>
			{
				LCD_PrintString("Enter new password :");
    4482:	84 e7       	ldi	r24, 0x74	; 116
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				LCD_SendCommand(Second_Line);
    448a:	80 e8       	ldi	r24, 0x80	; 128
    448c:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
    4490:	23 c0       	rjmp	.+70     	; 0x44d8 <Get_String+0x358>
			}
			else if (Pass_Config_Falg != 1)
    4492:	80 91 65 02 	lds	r24, 0x0265
    4496:	81 30       	cpi	r24, 0x01	; 1
    4498:	71 f0       	breq	.+28     	; 0x44b6 <Get_String+0x336>
			{
				LCD_SendCommand(CLEAR);
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_SendCommand(Reset_Cursor);
    44a0:	83 e0       	ldi	r24, 0x03	; 3
    44a2:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_PrintString("Re-Enter the password :");
    44a6:	89 e8       	ldi	r24, 0x89	; 137
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				LCD_SendCommand(Second_Line);
    44ae:	80 e8       	ldi	r24, 0x80	; 128
    44b0:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
    44b4:	11 c0       	rjmp	.+34     	; 0x44d8 <Get_String+0x358>
			}
			else if (State == LOCKED)
    44b6:	80 91 63 02 	lds	r24, 0x0263
    44ba:	81 30       	cpi	r24, 0x01	; 1
    44bc:	69 f4       	brne	.+26     	; 0x44d8 <Get_String+0x358>
			{
				LCD_SendCommand(CLEAR);
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_SendCommand(Reset_Cursor);
    44c4:	83 e0       	ldi	r24, 0x03	; 3
    44c6:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
				LCD_PrintString("Enter the password :");
    44ca:	8b e0       	ldi	r24, 0x0B	; 11
    44cc:	91 e0       	ldi	r25, 0x01	; 1
    44ce:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <LCD_PrintString>
				LCD_SendCommand(Second_Line);
    44d2:	80 e8       	ldi	r24, 0x80	; 128
    44d4:	0e 94 ef 1a 	call	0x35de	; 0x35de <LCD_SendCommand>
			{
				//Do Nothing
			}

		}
		for(i=0 ; i<16;i++)
    44d8:	19 82       	std	Y+1, r1	; 0x01
    44da:	0d c0       	rjmp	.+26     	; 0x44f6 <Get_String+0x376>
		{
			str[i]='F';
    44dc:	89 81       	ldd	r24, Y+1	; 0x01
    44de:	28 2f       	mov	r18, r24
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	8b 81       	ldd	r24, Y+3	; 0x03
    44e4:	9c 81       	ldd	r25, Y+4	; 0x04
    44e6:	fc 01       	movw	r30, r24
    44e8:	e2 0f       	add	r30, r18
    44ea:	f3 1f       	adc	r31, r19
    44ec:	86 e4       	ldi	r24, 0x46	; 70
    44ee:	80 83       	st	Z, r24
			{
				//Do Nothing
			}

		}
		for(i=0 ; i<16;i++)
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	8f 5f       	subi	r24, 0xFF	; 255
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	80 31       	cpi	r24, 0x10	; 16
    44fa:	80 f3       	brcs	.-32     	; 0x44dc <Get_String+0x35c>
    44fc:	1e c0       	rjmp	.+60     	; 0x453a <Get_String+0x3ba>
		{
			str[i]='F';
		}
	}
	else if (Keypad_Scan() == 13)
    44fe:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4502:	8d 30       	cpi	r24, 0x0D	; 13
    4504:	a1 f4       	brne	.+40     	; 0x452e <Get_String+0x3ae>
	{
		str[Counter1]='0';
    4506:	80 91 6a 02 	lds	r24, 0x026A
    450a:	28 2f       	mov	r18, r24
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	8b 81       	ldd	r24, Y+3	; 0x03
    4510:	9c 81       	ldd	r25, Y+4	; 0x04
    4512:	fc 01       	movw	r30, r24
    4514:	e2 0f       	add	r30, r18
    4516:	f3 1f       	adc	r31, r19
    4518:	80 e3       	ldi	r24, 0x30	; 48
    451a:	80 83       	st	Z, r24
		LCD_SendData('*') ;
    451c:	8a e2       	ldi	r24, 0x2A	; 42
    451e:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <LCD_SendData>
		Counter1++;
    4522:	80 91 6a 02 	lds	r24, 0x026A
    4526:	8f 5f       	subi	r24, 0xFF	; 255
    4528:	80 93 6a 02 	sts	0x026A, r24
    452c:	06 c0       	rjmp	.+12     	; 0x453a <Get_String+0x3ba>
	}
	else if (Keypad_Scan() == 14)	//Button 5
    452e:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
    4532:	8e 30       	cpi	r24, 0x0E	; 14
    4534:	11 f0       	breq	.+4      	; 0x453a <Get_String+0x3ba>
	{

	}
	else if (Keypad_Scan() == 15)	//Button 6
    4536:	0e 94 2f 19 	call	0x325e	; 0x325e <Keypad_Scan>
	}
	else
	{

	}
	return RetVal;
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	cf 91       	pop	r28
    4546:	df 91       	pop	r29
    4548:	08 95       	ret

0000454a <Servo_Init>:
#include "LCD.h"
#include "Servo.h"
#include "ADC.h"

void Servo_Init(void)
{
    454a:	df 93       	push	r29
    454c:	cf 93       	push	r28
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(Servo_Port,Servo_Pin,OUTPUT);
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	63 e0       	ldi	r22, 0x03	; 3
    4556:	41 e0       	ldi	r20, 0x01	; 1
    4558:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
}
    455c:	cf 91       	pop	r28
    455e:	df 91       	pop	r29
    4560:	08 95       	ret

00004562 <Servo_SetAngle>:

void Servo_SetAngle(U8 Angle)
{
    4562:	df 93       	push	r29
    4564:	cf 93       	push	r28
    4566:	0f 92       	push	r0
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	89 83       	std	Y+1, r24	; 0x01

}
    456e:	0f 90       	pop	r0
    4570:	cf 91       	pop	r28
    4572:	df 91       	pop	r29
    4574:	08 95       	ret

00004576 <SevenSeg_Init>:
#include "Bit_Operations.h"
#include "DIO.h"
#include "SevenSeg.h"

void SevenSeg_Init (void)
{
    4576:	df 93       	push	r29
    4578:	cf 93       	push	r28
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62

#if PIN_dp == UNINIT
#error "Missing INITIALIZATION"
#endif

 DIO_SetPinDirection(PORT_a,PIN_a,OUTPUT);
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	60 e0       	ldi	r22, 0x00	; 0
    4582:	41 e0       	ldi	r20, 0x01	; 1
    4584:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_b,PIN_b,OUTPUT);
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	61 e0       	ldi	r22, 0x01	; 1
    458c:	41 e0       	ldi	r20, 0x01	; 1
    458e:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_c,PIN_c,OUTPUT);
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	62 e0       	ldi	r22, 0x02	; 2
    4596:	41 e0       	ldi	r20, 0x01	; 1
    4598:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_d,PIN_d,OUTPUT);
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	63 e0       	ldi	r22, 0x03	; 3
    45a0:	41 e0       	ldi	r20, 0x01	; 1
    45a2:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_e,PIN_e,OUTPUT);
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	64 e0       	ldi	r22, 0x04	; 4
    45aa:	41 e0       	ldi	r20, 0x01	; 1
    45ac:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_f,PIN_f,OUTPUT);
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	65 e0       	ldi	r22, 0x05	; 5
    45b4:	41 e0       	ldi	r20, 0x01	; 1
    45b6:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_g,PIN_g,OUTPUT);
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	67 e0       	ldi	r22, 0x07	; 7
    45be:	41 e0       	ldi	r20, 0x01	; 1
    45c0:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
 DIO_SetPinDirection(PORT_dp,PIN_dp,OUTPUT);
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	66 e0       	ldi	r22, 0x06	; 6
    45c8:	41 e0       	ldi	r20, 0x01	; 1
    45ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>
}
    45ce:	cf 91       	pop	r28
    45d0:	df 91       	pop	r29
    45d2:	08 95       	ret

000045d4 <SevenSeg_Display>:

void SevenSeg_Display(S8 counter)
{
    45d4:	df 93       	push	r29
    45d6:	cf 93       	push	r28
    45d8:	00 d0       	rcall	.+0      	; 0x45da <SevenSeg_Display+0x6>
    45da:	0f 92       	push	r0
    45dc:	cd b7       	in	r28, 0x3d	; 61
    45de:	de b7       	in	r29, 0x3e	; 62
    45e0:	89 83       	std	Y+1, r24	; 0x01
	switch(counter)
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	28 2f       	mov	r18, r24
    45e6:	33 27       	eor	r19, r19
    45e8:	27 fd       	sbrc	r18, 7
    45ea:	30 95       	com	r19
    45ec:	3b 83       	std	Y+3, r19	; 0x03
    45ee:	2a 83       	std	Y+2, r18	; 0x02
    45f0:	8a 81       	ldd	r24, Y+2	; 0x02
    45f2:	9b 81       	ldd	r25, Y+3	; 0x03
    45f4:	88 30       	cpi	r24, 0x08	; 8
    45f6:	91 05       	cpc	r25, r1
    45f8:	09 f4       	brne	.+2      	; 0x45fc <SevenSeg_Display+0x28>
    45fa:	b4 c1       	rjmp	.+872    	; 0x4964 <SevenSeg_Display+0x390>
    45fc:	2a 81       	ldd	r18, Y+2	; 0x02
    45fe:	3b 81       	ldd	r19, Y+3	; 0x03
    4600:	29 30       	cpi	r18, 0x09	; 9
    4602:	31 05       	cpc	r19, r1
    4604:	b4 f5       	brge	.+108    	; 0x4672 <SevenSeg_Display+0x9e>
    4606:	8a 81       	ldd	r24, Y+2	; 0x02
    4608:	9b 81       	ldd	r25, Y+3	; 0x03
    460a:	83 30       	cpi	r24, 0x03	; 3
    460c:	91 05       	cpc	r25, r1
    460e:	09 f4       	brne	.+2      	; 0x4612 <SevenSeg_Display+0x3e>
    4610:	dc c0       	rjmp	.+440    	; 0x47ca <SevenSeg_Display+0x1f6>
    4612:	2a 81       	ldd	r18, Y+2	; 0x02
    4614:	3b 81       	ldd	r19, Y+3	; 0x03
    4616:	24 30       	cpi	r18, 0x04	; 4
    4618:	31 05       	cpc	r19, r1
    461a:	94 f4       	brge	.+36     	; 0x4640 <SevenSeg_Display+0x6c>
    461c:	8a 81       	ldd	r24, Y+2	; 0x02
    461e:	9b 81       	ldd	r25, Y+3	; 0x03
    4620:	81 30       	cpi	r24, 0x01	; 1
    4622:	91 05       	cpc	r25, r1
    4624:	09 f4       	brne	.+2      	; 0x4628 <SevenSeg_Display+0x54>
    4626:	7f c0       	rjmp	.+254    	; 0x4726 <SevenSeg_Display+0x152>
    4628:	2a 81       	ldd	r18, Y+2	; 0x02
    462a:	3b 81       	ldd	r19, Y+3	; 0x03
    462c:	22 30       	cpi	r18, 0x02	; 2
    462e:	31 05       	cpc	r19, r1
    4630:	0c f0       	brlt	.+2      	; 0x4634 <SevenSeg_Display+0x60>
    4632:	a2 c0       	rjmp	.+324    	; 0x4778 <SevenSeg_Display+0x1a4>
    4634:	8a 81       	ldd	r24, Y+2	; 0x02
    4636:	9b 81       	ldd	r25, Y+3	; 0x03
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	09 f4       	brne	.+2      	; 0x463e <SevenSeg_Display+0x6a>
    463c:	4b c0       	rjmp	.+150    	; 0x46d4 <SevenSeg_Display+0x100>
    463e:	03 c3       	rjmp	.+1542   	; 0x4c46 <SevenSeg_Display+0x672>
    4640:	2a 81       	ldd	r18, Y+2	; 0x02
    4642:	3b 81       	ldd	r19, Y+3	; 0x03
    4644:	25 30       	cpi	r18, 0x05	; 5
    4646:	31 05       	cpc	r19, r1
    4648:	09 f4       	brne	.+2      	; 0x464c <SevenSeg_Display+0x78>
    464a:	11 c1       	rjmp	.+546    	; 0x486e <SevenSeg_Display+0x29a>
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	9b 81       	ldd	r25, Y+3	; 0x03
    4650:	85 30       	cpi	r24, 0x05	; 5
    4652:	91 05       	cpc	r25, r1
    4654:	0c f4       	brge	.+2      	; 0x4658 <SevenSeg_Display+0x84>
    4656:	e2 c0       	rjmp	.+452    	; 0x481c <SevenSeg_Display+0x248>
    4658:	2a 81       	ldd	r18, Y+2	; 0x02
    465a:	3b 81       	ldd	r19, Y+3	; 0x03
    465c:	26 30       	cpi	r18, 0x06	; 6
    465e:	31 05       	cpc	r19, r1
    4660:	09 f4       	brne	.+2      	; 0x4664 <SevenSeg_Display+0x90>
    4662:	2e c1       	rjmp	.+604    	; 0x48c0 <SevenSeg_Display+0x2ec>
    4664:	8a 81       	ldd	r24, Y+2	; 0x02
    4666:	9b 81       	ldd	r25, Y+3	; 0x03
    4668:	87 30       	cpi	r24, 0x07	; 7
    466a:	91 05       	cpc	r25, r1
    466c:	09 f4       	brne	.+2      	; 0x4670 <SevenSeg_Display+0x9c>
    466e:	51 c1       	rjmp	.+674    	; 0x4912 <SevenSeg_Display+0x33e>
    4670:	ea c2       	rjmp	.+1492   	; 0x4c46 <SevenSeg_Display+0x672>
    4672:	2a 81       	ldd	r18, Y+2	; 0x02
    4674:	3b 81       	ldd	r19, Y+3	; 0x03
    4676:	2c 30       	cpi	r18, 0x0C	; 12
    4678:	31 05       	cpc	r19, r1
    467a:	09 f4       	brne	.+2      	; 0x467e <SevenSeg_Display+0xaa>
    467c:	17 c2       	rjmp	.+1070   	; 0x4aac <SevenSeg_Display+0x4d8>
    467e:	8a 81       	ldd	r24, Y+2	; 0x02
    4680:	9b 81       	ldd	r25, Y+3	; 0x03
    4682:	8d 30       	cpi	r24, 0x0D	; 13
    4684:	91 05       	cpc	r25, r1
    4686:	6c f4       	brge	.+26     	; 0x46a2 <SevenSeg_Display+0xce>
    4688:	2a 81       	ldd	r18, Y+2	; 0x02
    468a:	3b 81       	ldd	r19, Y+3	; 0x03
    468c:	2a 30       	cpi	r18, 0x0A	; 10
    468e:	31 05       	cpc	r19, r1
    4690:	09 f4       	brne	.+2      	; 0x4694 <SevenSeg_Display+0xc0>
    4692:	ba c1       	rjmp	.+884    	; 0x4a08 <SevenSeg_Display+0x434>
    4694:	8a 81       	ldd	r24, Y+2	; 0x02
    4696:	9b 81       	ldd	r25, Y+3	; 0x03
    4698:	8b 30       	cpi	r24, 0x0B	; 11
    469a:	91 05       	cpc	r25, r1
    469c:	0c f0       	brlt	.+2      	; 0x46a0 <SevenSeg_Display+0xcc>
    469e:	dd c1       	rjmp	.+954    	; 0x4a5a <SevenSeg_Display+0x486>
    46a0:	8a c1       	rjmp	.+788    	; 0x49b6 <SevenSeg_Display+0x3e2>
    46a2:	2a 81       	ldd	r18, Y+2	; 0x02
    46a4:	3b 81       	ldd	r19, Y+3	; 0x03
    46a6:	2e 30       	cpi	r18, 0x0E	; 14
    46a8:	31 05       	cpc	r19, r1
    46aa:	09 f4       	brne	.+2      	; 0x46ae <SevenSeg_Display+0xda>
    46ac:	51 c2       	rjmp	.+1186   	; 0x4b50 <SevenSeg_Display+0x57c>
    46ae:	8a 81       	ldd	r24, Y+2	; 0x02
    46b0:	9b 81       	ldd	r25, Y+3	; 0x03
    46b2:	8e 30       	cpi	r24, 0x0E	; 14
    46b4:	91 05       	cpc	r25, r1
    46b6:	0c f4       	brge	.+2      	; 0x46ba <SevenSeg_Display+0xe6>
    46b8:	22 c2       	rjmp	.+1092   	; 0x4afe <SevenSeg_Display+0x52a>
    46ba:	2a 81       	ldd	r18, Y+2	; 0x02
    46bc:	3b 81       	ldd	r19, Y+3	; 0x03
    46be:	2f 30       	cpi	r18, 0x0F	; 15
    46c0:	31 05       	cpc	r19, r1
    46c2:	09 f4       	brne	.+2      	; 0x46c6 <SevenSeg_Display+0xf2>
    46c4:	6e c2       	rjmp	.+1244   	; 0x4ba2 <SevenSeg_Display+0x5ce>
    46c6:	8a 81       	ldd	r24, Y+2	; 0x02
    46c8:	9b 81       	ldd	r25, Y+3	; 0x03
    46ca:	84 36       	cpi	r24, 0x64	; 100
    46cc:	91 05       	cpc	r25, r1
    46ce:	09 f4       	brne	.+2      	; 0x46d2 <SevenSeg_Display+0xfe>
    46d0:	91 c2       	rjmp	.+1314   	; 0x4bf4 <SevenSeg_Display+0x620>
    46d2:	b9 c2       	rjmp	.+1394   	; 0x4c46 <SevenSeg_Display+0x672>
			{
			case 0 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    46d4:	80 e0       	ldi	r24, 0x00	; 0
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	41 e0       	ldi	r20, 0x01	; 1
    46da:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	61 e0       	ldi	r22, 0x01	; 1
    46e2:	41 e0       	ldi	r20, 0x01	; 1
    46e4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	62 e0       	ldi	r22, 0x02	; 2
    46ec:	41 e0       	ldi	r20, 0x01	; 1
    46ee:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	63 e0       	ldi	r22, 0x03	; 3
    46f6:	41 e0       	ldi	r20, 0x01	; 1
    46f8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	64 e0       	ldi	r22, 0x04	; 4
    4700:	41 e0       	ldi	r20, 0x01	; 1
    4702:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	65 e0       	ldi	r22, 0x05	; 5
    470a:	41 e0       	ldi	r20, 0x01	; 1
    470c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,LOW);
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	67 e0       	ldi	r22, 0x07	; 7
    4714:	40 e0       	ldi	r20, 0x00	; 0
    4716:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	66 e0       	ldi	r22, 0x06	; 6
    471e:	40 e0       	ldi	r20, 0x00	; 0
    4720:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4724:	92 c2       	rjmp	.+1316   	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 1 :
				DIO_SetPinValue(PORT_a,PIN_a,LOW);
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	61 e0       	ldi	r22, 0x01	; 1
    4734:	41 e0       	ldi	r20, 0x01	; 1
    4736:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	62 e0       	ldi	r22, 0x02	; 2
    473e:	41 e0       	ldi	r20, 0x01	; 1
    4740:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,LOW);
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	63 e0       	ldi	r22, 0x03	; 3
    4748:	40 e0       	ldi	r20, 0x00	; 0
    474a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	64 e0       	ldi	r22, 0x04	; 4
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,LOW);
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	65 e0       	ldi	r22, 0x05	; 5
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,LOW);
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	67 e0       	ldi	r22, 0x07	; 7
    4766:	40 e0       	ldi	r20, 0x00	; 0
    4768:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	66 e0       	ldi	r22, 0x06	; 6
    4770:	40 e0       	ldi	r20, 0x00	; 0
    4772:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4776:	69 c2       	rjmp	.+1234   	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 2 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	60 e0       	ldi	r22, 0x00	; 0
    477c:	41 e0       	ldi	r20, 0x01	; 1
    477e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	61 e0       	ldi	r22, 0x01	; 1
    4786:	41 e0       	ldi	r20, 0x01	; 1
    4788:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,LOW);
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	62 e0       	ldi	r22, 0x02	; 2
    4790:	40 e0       	ldi	r20, 0x00	; 0
    4792:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	63 e0       	ldi	r22, 0x03	; 3
    479a:	41 e0       	ldi	r20, 0x01	; 1
    479c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	64 e0       	ldi	r22, 0x04	; 4
    47a4:	41 e0       	ldi	r20, 0x01	; 1
    47a6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,LOW);
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	65 e0       	ldi	r22, 0x05	; 5
    47ae:	40 e0       	ldi	r20, 0x00	; 0
    47b0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	67 e0       	ldi	r22, 0x07	; 7
    47b8:	41 e0       	ldi	r20, 0x01	; 1
    47ba:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	66 e0       	ldi	r22, 0x06	; 6
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    47c8:	40 c2       	rjmp	.+1152   	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 3 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	60 e0       	ldi	r22, 0x00	; 0
    47ce:	41 e0       	ldi	r20, 0x01	; 1
    47d0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	61 e0       	ldi	r22, 0x01	; 1
    47d8:	41 e0       	ldi	r20, 0x01	; 1
    47da:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	62 e0       	ldi	r22, 0x02	; 2
    47e2:	41 e0       	ldi	r20, 0x01	; 1
    47e4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	63 e0       	ldi	r22, 0x03	; 3
    47ec:	41 e0       	ldi	r20, 0x01	; 1
    47ee:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	64 e0       	ldi	r22, 0x04	; 4
    47f6:	40 e0       	ldi	r20, 0x00	; 0
    47f8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,LOW);
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	65 e0       	ldi	r22, 0x05	; 5
    4800:	40 e0       	ldi	r20, 0x00	; 0
    4802:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	67 e0       	ldi	r22, 0x07	; 7
    480a:	41 e0       	ldi	r20, 0x01	; 1
    480c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	66 e0       	ldi	r22, 0x06	; 6
    4814:	40 e0       	ldi	r20, 0x00	; 0
    4816:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    481a:	17 c2       	rjmp	.+1070   	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 4 :
				DIO_SetPinValue(PORT_a,PIN_a,LOW);
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	60 e0       	ldi	r22, 0x00	; 0
    4820:	40 e0       	ldi	r20, 0x00	; 0
    4822:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	61 e0       	ldi	r22, 0x01	; 1
    482a:	41 e0       	ldi	r20, 0x01	; 1
    482c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4830:	80 e0       	ldi	r24, 0x00	; 0
    4832:	62 e0       	ldi	r22, 0x02	; 2
    4834:	41 e0       	ldi	r20, 0x01	; 1
    4836:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,LOW);
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	63 e0       	ldi	r22, 0x03	; 3
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	64 e0       	ldi	r22, 0x04	; 4
    4848:	40 e0       	ldi	r20, 0x00	; 0
    484a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	65 e0       	ldi	r22, 0x05	; 5
    4852:	41 e0       	ldi	r20, 0x01	; 1
    4854:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	67 e0       	ldi	r22, 0x07	; 7
    485c:	41 e0       	ldi	r20, 0x01	; 1
    485e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	66 e0       	ldi	r22, 0x06	; 6
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    486c:	ee c1       	rjmp	.+988    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 5 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    486e:	80 e0       	ldi	r24, 0x00	; 0
    4870:	60 e0       	ldi	r22, 0x00	; 0
    4872:	41 e0       	ldi	r20, 0x01	; 1
    4874:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    4878:	80 e0       	ldi	r24, 0x00	; 0
    487a:	61 e0       	ldi	r22, 0x01	; 1
    487c:	40 e0       	ldi	r20, 0x00	; 0
    487e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	62 e0       	ldi	r22, 0x02	; 2
    4886:	41 e0       	ldi	r20, 0x01	; 1
    4888:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	63 e0       	ldi	r22, 0x03	; 3
    4890:	41 e0       	ldi	r20, 0x01	; 1
    4892:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	64 e0       	ldi	r22, 0x04	; 4
    489a:	40 e0       	ldi	r20, 0x00	; 0
    489c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	65 e0       	ldi	r22, 0x05	; 5
    48a4:	41 e0       	ldi	r20, 0x01	; 1
    48a6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	67 e0       	ldi	r22, 0x07	; 7
    48ae:	41 e0       	ldi	r20, 0x01	; 1
    48b0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	66 e0       	ldi	r22, 0x06	; 6
    48b8:	40 e0       	ldi	r20, 0x00	; 0
    48ba:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    48be:	c5 c1       	rjmp	.+906    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 6 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	60 e0       	ldi	r22, 0x00	; 0
    48c4:	41 e0       	ldi	r20, 0x01	; 1
    48c6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	61 e0       	ldi	r22, 0x01	; 1
    48ce:	40 e0       	ldi	r20, 0x00	; 0
    48d0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	62 e0       	ldi	r22, 0x02	; 2
    48d8:	41 e0       	ldi	r20, 0x01	; 1
    48da:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	63 e0       	ldi	r22, 0x03	; 3
    48e2:	41 e0       	ldi	r20, 0x01	; 1
    48e4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	64 e0       	ldi	r22, 0x04	; 4
    48ec:	41 e0       	ldi	r20, 0x01	; 1
    48ee:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	65 e0       	ldi	r22, 0x05	; 5
    48f6:	41 e0       	ldi	r20, 0x01	; 1
    48f8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	67 e0       	ldi	r22, 0x07	; 7
    4900:	41 e0       	ldi	r20, 0x01	; 1
    4902:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	66 e0       	ldi	r22, 0x06	; 6
    490a:	40 e0       	ldi	r20, 0x00	; 0
    490c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4910:	9c c1       	rjmp	.+824    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 7 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	60 e0       	ldi	r22, 0x00	; 0
    4916:	41 e0       	ldi	r20, 0x01	; 1
    4918:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	61 e0       	ldi	r22, 0x01	; 1
    4920:	41 e0       	ldi	r20, 0x01	; 1
    4922:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	62 e0       	ldi	r22, 0x02	; 2
    492a:	41 e0       	ldi	r20, 0x01	; 1
    492c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,LOW);
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	63 e0       	ldi	r22, 0x03	; 3
    4934:	40 e0       	ldi	r20, 0x00	; 0
    4936:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	64 e0       	ldi	r22, 0x04	; 4
    493e:	40 e0       	ldi	r20, 0x00	; 0
    4940:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,LOW);
    4944:	80 e0       	ldi	r24, 0x00	; 0
    4946:	65 e0       	ldi	r22, 0x05	; 5
    4948:	40 e0       	ldi	r20, 0x00	; 0
    494a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,LOW);
    494e:	80 e0       	ldi	r24, 0x00	; 0
    4950:	67 e0       	ldi	r22, 0x07	; 7
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	66 e0       	ldi	r22, 0x06	; 6
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4962:	73 c1       	rjmp	.+742    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 8 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	60 e0       	ldi	r22, 0x00	; 0
    4968:	41 e0       	ldi	r20, 0x01	; 1
    496a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	61 e0       	ldi	r22, 0x01	; 1
    4972:	41 e0       	ldi	r20, 0x01	; 1
    4974:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	62 e0       	ldi	r22, 0x02	; 2
    497c:	41 e0       	ldi	r20, 0x01	; 1
    497e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	63 e0       	ldi	r22, 0x03	; 3
    4986:	41 e0       	ldi	r20, 0x01	; 1
    4988:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	64 e0       	ldi	r22, 0x04	; 4
    4990:	41 e0       	ldi	r20, 0x01	; 1
    4992:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	65 e0       	ldi	r22, 0x05	; 5
    499a:	41 e0       	ldi	r20, 0x01	; 1
    499c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	67 e0       	ldi	r22, 0x07	; 7
    49a4:	41 e0       	ldi	r20, 0x01	; 1
    49a6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    49aa:	80 e0       	ldi	r24, 0x00	; 0
    49ac:	66 e0       	ldi	r22, 0x06	; 6
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    49b4:	4a c1       	rjmp	.+660    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 9 :
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	60 e0       	ldi	r22, 0x00	; 0
    49ba:	41 e0       	ldi	r20, 0x01	; 1
    49bc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	61 e0       	ldi	r22, 0x01	; 1
    49c4:	41 e0       	ldi	r20, 0x01	; 1
    49c6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	62 e0       	ldi	r22, 0x02	; 2
    49ce:	41 e0       	ldi	r20, 0x01	; 1
    49d0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	63 e0       	ldi	r22, 0x03	; 3
    49d8:	41 e0       	ldi	r20, 0x01	; 1
    49da:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	64 e0       	ldi	r22, 0x04	; 4
    49e2:	40 e0       	ldi	r20, 0x00	; 0
    49e4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	65 e0       	ldi	r22, 0x05	; 5
    49ec:	41 e0       	ldi	r20, 0x01	; 1
    49ee:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	67 e0       	ldi	r22, 0x07	; 7
    49f6:	41 e0       	ldi	r20, 0x01	; 1
    49f8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    49fc:	80 e0       	ldi	r24, 0x00	; 0
    49fe:	66 e0       	ldi	r22, 0x06	; 6
    4a00:	40 e0       	ldi	r20, 0x00	; 0
    4a02:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4a06:	21 c1       	rjmp	.+578    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 10 ://A
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	41 e0       	ldi	r20, 0x01	; 1
    4a0e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	61 e0       	ldi	r22, 0x01	; 1
    4a16:	41 e0       	ldi	r20, 0x01	; 1
    4a18:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	62 e0       	ldi	r22, 0x02	; 2
    4a20:	41 e0       	ldi	r20, 0x01	; 1
    4a22:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,LOW);
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	63 e0       	ldi	r22, 0x03	; 3
    4a2a:	40 e0       	ldi	r20, 0x00	; 0
    4a2c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
			    DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	64 e0       	ldi	r22, 0x04	; 4
    4a34:	41 e0       	ldi	r20, 0x01	; 1
    4a36:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	65 e0       	ldi	r22, 0x05	; 5
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4a44:	80 e0       	ldi	r24, 0x00	; 0
    4a46:	67 e0       	ldi	r22, 0x07	; 7
    4a48:	41 e0       	ldi	r20, 0x01	; 1
    4a4a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	66 e0       	ldi	r22, 0x06	; 6
    4a52:	40 e0       	ldi	r20, 0x00	; 0
    4a54:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4a58:	f8 c0       	rjmp	.+496    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 11 ://B
				DIO_SetPinValue(PORT_a,PIN_a,LOW);
    4a5a:	80 e0       	ldi	r24, 0x00	; 0
    4a5c:	60 e0       	ldi	r22, 0x00	; 0
    4a5e:	40 e0       	ldi	r20, 0x00	; 0
    4a60:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	61 e0       	ldi	r22, 0x01	; 1
    4a68:	40 e0       	ldi	r20, 0x00	; 0
    4a6a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	62 e0       	ldi	r22, 0x02	; 2
    4a72:	41 e0       	ldi	r20, 0x01	; 1
    4a74:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	63 e0       	ldi	r22, 0x03	; 3
    4a7c:	41 e0       	ldi	r20, 0x01	; 1
    4a7e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	64 e0       	ldi	r22, 0x04	; 4
    4a86:	41 e0       	ldi	r20, 0x01	; 1
    4a88:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4a8c:	80 e0       	ldi	r24, 0x00	; 0
    4a8e:	65 e0       	ldi	r22, 0x05	; 5
    4a90:	41 e0       	ldi	r20, 0x01	; 1
    4a92:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4a96:	80 e0       	ldi	r24, 0x00	; 0
    4a98:	67 e0       	ldi	r22, 0x07	; 7
    4a9a:	41 e0       	ldi	r20, 0x01	; 1
    4a9c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	66 e0       	ldi	r22, 0x06	; 6
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4aaa:	cf c0       	rjmp	.+414    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 12 ://C
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	60 e0       	ldi	r22, 0x00	; 0
    4ab0:	41 e0       	ldi	r20, 0x01	; 1
    4ab2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	61 e0       	ldi	r22, 0x01	; 1
    4aba:	40 e0       	ldi	r20, 0x00	; 0
    4abc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,LOW);
    4ac0:	80 e0       	ldi	r24, 0x00	; 0
    4ac2:	62 e0       	ldi	r22, 0x02	; 2
    4ac4:	40 e0       	ldi	r20, 0x00	; 0
    4ac6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	63 e0       	ldi	r22, 0x03	; 3
    4ace:	41 e0       	ldi	r20, 0x01	; 1
    4ad0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	64 e0       	ldi	r22, 0x04	; 4
    4ad8:	41 e0       	ldi	r20, 0x01	; 1
    4ada:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	65 e0       	ldi	r22, 0x05	; 5
    4ae2:	41 e0       	ldi	r20, 0x01	; 1
    4ae4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,LOW);
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	67 e0       	ldi	r22, 0x07	; 7
    4aec:	40 e0       	ldi	r20, 0x00	; 0
    4aee:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	66 e0       	ldi	r22, 0x06	; 6
    4af6:	40 e0       	ldi	r20, 0x00	; 0
    4af8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4afc:	a6 c0       	rjmp	.+332    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 13 ://D
				DIO_SetPinValue(PORT_a,PIN_a,LOW);
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	60 e0       	ldi	r22, 0x00	; 0
    4b02:	40 e0       	ldi	r20, 0x00	; 0
    4b04:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,HIGH);
    4b08:	80 e0       	ldi	r24, 0x00	; 0
    4b0a:	61 e0       	ldi	r22, 0x01	; 1
    4b0c:	41 e0       	ldi	r20, 0x01	; 1
    4b0e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,HIGH);
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	62 e0       	ldi	r22, 0x02	; 2
    4b16:	41 e0       	ldi	r20, 0x01	; 1
    4b18:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    4b1c:	80 e0       	ldi	r24, 0x00	; 0
    4b1e:	63 e0       	ldi	r22, 0x03	; 3
    4b20:	41 e0       	ldi	r20, 0x01	; 1
    4b22:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    4b26:	80 e0       	ldi	r24, 0x00	; 0
    4b28:	64 e0       	ldi	r22, 0x04	; 4
    4b2a:	41 e0       	ldi	r20, 0x01	; 1
    4b2c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,LOW);
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	65 e0       	ldi	r22, 0x05	; 5
    4b34:	40 e0       	ldi	r20, 0x00	; 0
    4b36:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	67 e0       	ldi	r22, 0x07	; 7
    4b3e:	41 e0       	ldi	r20, 0x01	; 1
    4b40:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	66 e0       	ldi	r22, 0x06	; 6
    4b48:	40 e0       	ldi	r20, 0x00	; 0
    4b4a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4b4e:	7d c0       	rjmp	.+250    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 14 ://E
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	41 e0       	ldi	r20, 0x01	; 1
    4b56:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	61 e0       	ldi	r22, 0x01	; 1
    4b5e:	40 e0       	ldi	r20, 0x00	; 0
    4b60:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,LOW);
    4b64:	80 e0       	ldi	r24, 0x00	; 0
    4b66:	62 e0       	ldi	r22, 0x02	; 2
    4b68:	40 e0       	ldi	r20, 0x00	; 0
    4b6a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,HIGH);
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	63 e0       	ldi	r22, 0x03	; 3
    4b72:	41 e0       	ldi	r20, 0x01	; 1
    4b74:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	64 e0       	ldi	r22, 0x04	; 4
    4b7c:	41 e0       	ldi	r20, 0x01	; 1
    4b7e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	65 e0       	ldi	r22, 0x05	; 5
    4b86:	41 e0       	ldi	r20, 0x01	; 1
    4b88:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4b8c:	80 e0       	ldi	r24, 0x00	; 0
    4b8e:	67 e0       	ldi	r22, 0x07	; 7
    4b90:	41 e0       	ldi	r20, 0x01	; 1
    4b92:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4b96:	80 e0       	ldi	r24, 0x00	; 0
    4b98:	66 e0       	ldi	r22, 0x06	; 6
    4b9a:	40 e0       	ldi	r20, 0x00	; 0
    4b9c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4ba0:	54 c0       	rjmp	.+168    	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 15 ://F
				DIO_SetPinValue(PORT_a,PIN_a,HIGH);
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	60 e0       	ldi	r22, 0x00	; 0
    4ba6:	41 e0       	ldi	r20, 0x01	; 1
    4ba8:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	61 e0       	ldi	r22, 0x01	; 1
    4bb0:	40 e0       	ldi	r20, 0x00	; 0
    4bb2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,LOW);
    4bb6:	80 e0       	ldi	r24, 0x00	; 0
    4bb8:	62 e0       	ldi	r22, 0x02	; 2
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,LOW);
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	63 e0       	ldi	r22, 0x03	; 3
    4bc4:	40 e0       	ldi	r20, 0x00	; 0
    4bc6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,HIGH);
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	64 e0       	ldi	r22, 0x04	; 4
    4bce:	41 e0       	ldi	r20, 0x01	; 1
    4bd0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,HIGH);
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	65 e0       	ldi	r22, 0x05	; 5
    4bd8:	41 e0       	ldi	r20, 0x01	; 1
    4bda:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,HIGH);
    4bde:	80 e0       	ldi	r24, 0x00	; 0
    4be0:	67 e0       	ldi	r22, 0x07	; 7
    4be2:	41 e0       	ldi	r20, 0x01	; 1
    4be4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	66 e0       	ldi	r22, 0x06	; 6
    4bec:	40 e0       	ldi	r20, 0x00	; 0
    4bee:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4bf2:	2b c0       	rjmp	.+86     	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			case 100:
				DIO_SetPinValue(PORT_a,PIN_a,LOW);
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	60 e0       	ldi	r22, 0x00	; 0
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_b,PIN_b,LOW);
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	61 e0       	ldi	r22, 0x01	; 1
    4c02:	40 e0       	ldi	r20, 0x00	; 0
    4c04:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_c,PIN_c,LOW);
    4c08:	80 e0       	ldi	r24, 0x00	; 0
    4c0a:	62 e0       	ldi	r22, 0x02	; 2
    4c0c:	40 e0       	ldi	r20, 0x00	; 0
    4c0e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_d,PIN_d,LOW);
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	63 e0       	ldi	r22, 0x03	; 3
    4c16:	40 e0       	ldi	r20, 0x00	; 0
    4c18:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_e,PIN_e,LOW);
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	64 e0       	ldi	r22, 0x04	; 4
    4c20:	40 e0       	ldi	r20, 0x00	; 0
    4c22:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_f,PIN_f,LOW);
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	65 e0       	ldi	r22, 0x05	; 5
    4c2a:	40 e0       	ldi	r20, 0x00	; 0
    4c2c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_g,PIN_g,LOW);
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	67 e0       	ldi	r22, 0x07	; 7
    4c34:	40 e0       	ldi	r20, 0x00	; 0
    4c36:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
				DIO_SetPinValue(PORT_dp,PIN_dp,LOW);
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	66 e0       	ldi	r22, 0x06	; 6
    4c3e:	40 e0       	ldi	r20, 0x00	; 0
    4c40:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <DIO_SetPinValue>
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <SevenSeg_Display+0x676>
				break;
			default :
				counter = 100;
    4c46:	84 e6       	ldi	r24, 0x64	; 100
    4c48:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
}
    4c4a:	0f 90       	pop	r0
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	cf 91       	pop	r28
    4c52:	df 91       	pop	r29
    4c54:	08 95       	ret

00004c56 <TIM0_Init>:
static void (*Gptr1) (void);
static void (*Gptr2) (void);

/*TIMER0 FUNCTIONS*/
void TIM0_Init (void) 	//Where u make a delay for x ms and call a certain ISR after the delay is finished
{
    4c56:	df 93       	push	r29
    4c58:	cf 93       	push	r28
    4c5a:	cd b7       	in	r28, 0x3d	; 61
    4c5c:	de b7       	in	r29, 0x3e	; 62
	switch(Timer0_Mode)
	{
	case Normal :
		/*Compare Output Mode Selection*/
		CLRBIT(TCCR0,4);
    4c5e:	a3 e5       	ldi	r26, 0x53	; 83
    4c60:	b0 e0       	ldi	r27, 0x00	; 0
    4c62:	e3 e5       	ldi	r30, 0x53	; 83
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	80 81       	ld	r24, Z
    4c68:	8f 7e       	andi	r24, 0xEF	; 239
    4c6a:	8c 93       	st	X, r24
		CLRBIT(TCCR0,5);
    4c6c:	a3 e5       	ldi	r26, 0x53	; 83
    4c6e:	b0 e0       	ldi	r27, 0x00	; 0
    4c70:	e3 e5       	ldi	r30, 0x53	; 83
    4c72:	f0 e0       	ldi	r31, 0x00	; 0
    4c74:	80 81       	ld	r24, Z
    4c76:	8f 7d       	andi	r24, 0xDF	; 223
    4c78:	8c 93       	st	X, r24
		/*Normal Mode Selection*/
		CLRBIT(TCCR0,3);	//WGM01
    4c7a:	a3 e5       	ldi	r26, 0x53	; 83
    4c7c:	b0 e0       	ldi	r27, 0x00	; 0
    4c7e:	e3 e5       	ldi	r30, 0x53	; 83
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	80 81       	ld	r24, Z
    4c84:	87 7f       	andi	r24, 0xF7	; 247
    4c86:	8c 93       	st	X, r24
		CLRBIT(TCCR0,6);	//WGM00
    4c88:	a3 e5       	ldi	r26, 0x53	; 83
    4c8a:	b0 e0       	ldi	r27, 0x00	; 0
    4c8c:	e3 e5       	ldi	r30, 0x53	; 83
    4c8e:	f0 e0       	ldi	r31, 0x00	; 0
    4c90:	80 81       	ld	r24, Z
    4c92:	8f 7b       	andi	r24, 0xBF	; 191
    4c94:	8c 93       	st	X, r24
			SETBIT(TCCR0,0);	//CS00
			CLRBIT(TCCR0,1);	//CS01
			CLRBIT(TCCR0,2);	//CS02
			break;
		case Prescaler_8 :
			CLRBIT(TCCR0,0);	//CS00
    4c96:	a3 e5       	ldi	r26, 0x53	; 83
    4c98:	b0 e0       	ldi	r27, 0x00	; 0
    4c9a:	e3 e5       	ldi	r30, 0x53	; 83
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	80 81       	ld	r24, Z
    4ca0:	8e 7f       	andi	r24, 0xFE	; 254
    4ca2:	8c 93       	st	X, r24
			SETBIT(TCCR0,1);	//CS01
    4ca4:	a3 e5       	ldi	r26, 0x53	; 83
    4ca6:	b0 e0       	ldi	r27, 0x00	; 0
    4ca8:	e3 e5       	ldi	r30, 0x53	; 83
    4caa:	f0 e0       	ldi	r31, 0x00	; 0
    4cac:	80 81       	ld	r24, Z
    4cae:	82 60       	ori	r24, 0x02	; 2
    4cb0:	8c 93       	st	X, r24
			CLRBIT(TCCR0,2);	//CS02
    4cb2:	a3 e5       	ldi	r26, 0x53	; 83
    4cb4:	b0 e0       	ldi	r27, 0x00	; 0
    4cb6:	e3 e5       	ldi	r30, 0x53	; 83
    4cb8:	f0 e0       	ldi	r31, 0x00	; 0
    4cba:	80 81       	ld	r24, Z
    4cbc:	8b 7f       	andi	r24, 0xFB	; 251
    4cbe:	8c 93       	st	X, r24
		default :
			break;
		}

		/*Over Flow Flag Setup*/
		SETBIT(TIMSK,0);		//TOIE0(Overflow Interrupt Enable)
    4cc0:	a9 e5       	ldi	r26, 0x59	; 89
    4cc2:	b0 e0       	ldi	r27, 0x00	; 0
    4cc4:	e9 e5       	ldi	r30, 0x59	; 89
    4cc6:	f0 e0       	ldi	r31, 0x00	; 0
    4cc8:	80 81       	ld	r24, Z
    4cca:	81 60       	ori	r24, 0x01	; 1
    4ccc:	8c 93       	st	X, r24
		SETBIT(SREG,7);
    4cce:	af e5       	ldi	r26, 0x5F	; 95
    4cd0:	b0 e0       	ldi	r27, 0x00	; 0
    4cd2:	ef e5       	ldi	r30, 0x5F	; 95
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	80 81       	ld	r24, Z
    4cd8:	80 68       	ori	r24, 0x80	; 128
    4cda:	8c 93       	st	X, r24
		break;
	default :
		break;

	}
}
    4cdc:	cf 91       	pop	r28
    4cde:	df 91       	pop	r29
    4ce0:	08 95       	ret

00004ce2 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    4ce2:	1f 92       	push	r1
    4ce4:	0f 92       	push	r0
    4ce6:	0f b6       	in	r0, 0x3f	; 63
    4ce8:	0f 92       	push	r0
    4cea:	11 24       	eor	r1, r1
    4cec:	2f 93       	push	r18
    4cee:	3f 93       	push	r19
    4cf0:	4f 93       	push	r20
    4cf2:	5f 93       	push	r21
    4cf4:	6f 93       	push	r22
    4cf6:	7f 93       	push	r23
    4cf8:	8f 93       	push	r24
    4cfa:	9f 93       	push	r25
    4cfc:	af 93       	push	r26
    4cfe:	bf 93       	push	r27
    4d00:	ef 93       	push	r30
    4d02:	ff 93       	push	r31
    4d04:	df 93       	push	r29
    4d06:	cf 93       	push	r28
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
	Gptr0();
    4d0c:	e0 91 6b 02 	lds	r30, 0x026B
    4d10:	f0 91 6c 02 	lds	r31, 0x026C
    4d14:	09 95       	icall
}
    4d16:	cf 91       	pop	r28
    4d18:	df 91       	pop	r29
    4d1a:	ff 91       	pop	r31
    4d1c:	ef 91       	pop	r30
    4d1e:	bf 91       	pop	r27
    4d20:	af 91       	pop	r26
    4d22:	9f 91       	pop	r25
    4d24:	8f 91       	pop	r24
    4d26:	7f 91       	pop	r23
    4d28:	6f 91       	pop	r22
    4d2a:	5f 91       	pop	r21
    4d2c:	4f 91       	pop	r20
    4d2e:	3f 91       	pop	r19
    4d30:	2f 91       	pop	r18
    4d32:	0f 90       	pop	r0
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	0f 90       	pop	r0
    4d38:	1f 90       	pop	r1
    4d3a:	18 95       	reti

00004d3c <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    4d3c:	1f 92       	push	r1
    4d3e:	0f 92       	push	r0
    4d40:	0f b6       	in	r0, 0x3f	; 63
    4d42:	0f 92       	push	r0
    4d44:	11 24       	eor	r1, r1
    4d46:	2f 93       	push	r18
    4d48:	3f 93       	push	r19
    4d4a:	4f 93       	push	r20
    4d4c:	5f 93       	push	r21
    4d4e:	6f 93       	push	r22
    4d50:	7f 93       	push	r23
    4d52:	8f 93       	push	r24
    4d54:	9f 93       	push	r25
    4d56:	af 93       	push	r26
    4d58:	bf 93       	push	r27
    4d5a:	ef 93       	push	r30
    4d5c:	ff 93       	push	r31
    4d5e:	df 93       	push	r29
    4d60:	cf 93       	push	r28
    4d62:	cd b7       	in	r28, 0x3d	; 61
    4d64:	de b7       	in	r29, 0x3e	; 62
	Gptr0();
    4d66:	e0 91 6b 02 	lds	r30, 0x026B
    4d6a:	f0 91 6c 02 	lds	r31, 0x026C
    4d6e:	09 95       	icall
}
    4d70:	cf 91       	pop	r28
    4d72:	df 91       	pop	r29
    4d74:	ff 91       	pop	r31
    4d76:	ef 91       	pop	r30
    4d78:	bf 91       	pop	r27
    4d7a:	af 91       	pop	r26
    4d7c:	9f 91       	pop	r25
    4d7e:	8f 91       	pop	r24
    4d80:	7f 91       	pop	r23
    4d82:	6f 91       	pop	r22
    4d84:	5f 91       	pop	r21
    4d86:	4f 91       	pop	r20
    4d88:	3f 91       	pop	r19
    4d8a:	2f 91       	pop	r18
    4d8c:	0f 90       	pop	r0
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	0f 90       	pop	r0
    4d92:	1f 90       	pop	r1
    4d94:	18 95       	reti

00004d96 <TIM0_Start>:
void TIM0_Start(void)
{
    4d96:	df 93       	push	r29
    4d98:	cf 93       	push	r28
    4d9a:	cd b7       	in	r28, 0x3d	; 61
    4d9c:	de b7       	in	r29, 0x3e	; 62

}
    4d9e:	cf 91       	pop	r28
    4da0:	df 91       	pop	r29
    4da2:	08 95       	ret

00004da4 <TIM0_Stop>:
void TIM0_Stop (void)
{
    4da4:	df 93       	push	r29
    4da6:	cf 93       	push	r28
    4da8:	cd b7       	in	r28, 0x3d	; 61
    4daa:	de b7       	in	r29, 0x3e	; 62
	CLRBIT(TCCR0,0);	//CS00
    4dac:	a3 e5       	ldi	r26, 0x53	; 83
    4dae:	b0 e0       	ldi	r27, 0x00	; 0
    4db0:	e3 e5       	ldi	r30, 0x53	; 83
    4db2:	f0 e0       	ldi	r31, 0x00	; 0
    4db4:	80 81       	ld	r24, Z
    4db6:	8e 7f       	andi	r24, 0xFE	; 254
    4db8:	8c 93       	st	X, r24
	CLRBIT(TCCR0,1);	//CS01
    4dba:	a3 e5       	ldi	r26, 0x53	; 83
    4dbc:	b0 e0       	ldi	r27, 0x00	; 0
    4dbe:	e3 e5       	ldi	r30, 0x53	; 83
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	80 81       	ld	r24, Z
    4dc4:	8d 7f       	andi	r24, 0xFD	; 253
    4dc6:	8c 93       	st	X, r24
	CLRBIT(TCCR0,2);	//CS02
    4dc8:	a3 e5       	ldi	r26, 0x53	; 83
    4dca:	b0 e0       	ldi	r27, 0x00	; 0
    4dcc:	e3 e5       	ldi	r30, 0x53	; 83
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	80 81       	ld	r24, Z
    4dd2:	8b 7f       	andi	r24, 0xFB	; 251
    4dd4:	8c 93       	st	X, r24
}
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	08 95       	ret

00004ddc <TIM0_SetISR>:
void TIM0_SetISR(void (*ptr0) (void))
{
    4ddc:	df 93       	push	r29
    4dde:	cf 93       	push	r28
    4de0:	00 d0       	rcall	.+0      	; 0x4de2 <TIM0_SetISR+0x6>
    4de2:	cd b7       	in	r28, 0x3d	; 61
    4de4:	de b7       	in	r29, 0x3e	; 62
    4de6:	9a 83       	std	Y+2, r25	; 0x02
    4de8:	89 83       	std	Y+1, r24	; 0x01
	Gptr0=ptr0;
    4dea:	89 81       	ldd	r24, Y+1	; 0x01
    4dec:	9a 81       	ldd	r25, Y+2	; 0x02
    4dee:	90 93 6c 02 	sts	0x026C, r25
    4df2:	80 93 6b 02 	sts	0x026B, r24
}
    4df6:	0f 90       	pop	r0
    4df8:	0f 90       	pop	r0
    4dfa:	cf 91       	pop	r28
    4dfc:	df 91       	pop	r29
    4dfe:	08 95       	ret

00004e00 <TIM1_Init>:

/*TIMER1 FUNCTIONS*/
void TIM1_Init (void)
{
    4e00:	df 93       	push	r29
    4e02:	cf 93       	push	r28
    4e04:	cd b7       	in	r28, 0x3d	; 61
    4e06:	de b7       	in	r29, 0x3e	; 62

}
    4e08:	cf 91       	pop	r28
    4e0a:	df 91       	pop	r29
    4e0c:	08 95       	ret

00004e0e <TIM1_Start>:

void TIM1_Start(void)
{
    4e0e:	df 93       	push	r29
    4e10:	cf 93       	push	r28
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62

}
    4e16:	cf 91       	pop	r28
    4e18:	df 91       	pop	r29
    4e1a:	08 95       	ret

00004e1c <TIM1_Stop>:
void TIM1_Stop (void)
{
    4e1c:	df 93       	push	r29
    4e1e:	cf 93       	push	r28
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62

}
    4e24:	cf 91       	pop	r28
    4e26:	df 91       	pop	r29
    4e28:	08 95       	ret

00004e2a <TIM1_SetISR>:
void TIM1_SetISR(void (*ptr1) (void))
{
    4e2a:	df 93       	push	r29
    4e2c:	cf 93       	push	r28
    4e2e:	00 d0       	rcall	.+0      	; 0x4e30 <TIM1_SetISR+0x6>
    4e30:	cd b7       	in	r28, 0x3d	; 61
    4e32:	de b7       	in	r29, 0x3e	; 62
    4e34:	9a 83       	std	Y+2, r25	; 0x02
    4e36:	89 83       	std	Y+1, r24	; 0x01
	Gptr1=ptr1;
    4e38:	89 81       	ldd	r24, Y+1	; 0x01
    4e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e3c:	90 93 6e 02 	sts	0x026E, r25
    4e40:	80 93 6d 02 	sts	0x026D, r24
}
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	cf 91       	pop	r28
    4e4a:	df 91       	pop	r29
    4e4c:	08 95       	ret

00004e4e <TIM2_Init>:
/*TIMER2 FUNCTIONS*/
void TIM2_Init (void)
{
    4e4e:	df 93       	push	r29
    4e50:	cf 93       	push	r28
    4e52:	cd b7       	in	r28, 0x3d	; 61
    4e54:	de b7       	in	r29, 0x3e	; 62

}
    4e56:	cf 91       	pop	r28
    4e58:	df 91       	pop	r29
    4e5a:	08 95       	ret

00004e5c <__vector_5>:
ISR(TIMER2_OVF_vect)
{
    4e5c:	1f 92       	push	r1
    4e5e:	0f 92       	push	r0
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	0f 92       	push	r0
    4e64:	11 24       	eor	r1, r1
    4e66:	2f 93       	push	r18
    4e68:	3f 93       	push	r19
    4e6a:	4f 93       	push	r20
    4e6c:	5f 93       	push	r21
    4e6e:	6f 93       	push	r22
    4e70:	7f 93       	push	r23
    4e72:	8f 93       	push	r24
    4e74:	9f 93       	push	r25
    4e76:	af 93       	push	r26
    4e78:	bf 93       	push	r27
    4e7a:	ef 93       	push	r30
    4e7c:	ff 93       	push	r31
    4e7e:	df 93       	push	r29
    4e80:	cf 93       	push	r28
    4e82:	cd b7       	in	r28, 0x3d	; 61
    4e84:	de b7       	in	r29, 0x3e	; 62
	Gptr2();
    4e86:	e0 91 6f 02 	lds	r30, 0x026F
    4e8a:	f0 91 70 02 	lds	r31, 0x0270
    4e8e:	09 95       	icall
}
    4e90:	cf 91       	pop	r28
    4e92:	df 91       	pop	r29
    4e94:	ff 91       	pop	r31
    4e96:	ef 91       	pop	r30
    4e98:	bf 91       	pop	r27
    4e9a:	af 91       	pop	r26
    4e9c:	9f 91       	pop	r25
    4e9e:	8f 91       	pop	r24
    4ea0:	7f 91       	pop	r23
    4ea2:	6f 91       	pop	r22
    4ea4:	5f 91       	pop	r21
    4ea6:	4f 91       	pop	r20
    4ea8:	3f 91       	pop	r19
    4eaa:	2f 91       	pop	r18
    4eac:	0f 90       	pop	r0
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	0f 90       	pop	r0
    4eb2:	1f 90       	pop	r1
    4eb4:	18 95       	reti

00004eb6 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	2f 93       	push	r18
    4ec2:	3f 93       	push	r19
    4ec4:	4f 93       	push	r20
    4ec6:	5f 93       	push	r21
    4ec8:	6f 93       	push	r22
    4eca:	7f 93       	push	r23
    4ecc:	8f 93       	push	r24
    4ece:	9f 93       	push	r25
    4ed0:	af 93       	push	r26
    4ed2:	bf 93       	push	r27
    4ed4:	ef 93       	push	r30
    4ed6:	ff 93       	push	r31
    4ed8:	df 93       	push	r29
    4eda:	cf 93       	push	r28
    4edc:	cd b7       	in	r28, 0x3d	; 61
    4ede:	de b7       	in	r29, 0x3e	; 62
	Gptr2();
    4ee0:	e0 91 6f 02 	lds	r30, 0x026F
    4ee4:	f0 91 70 02 	lds	r31, 0x0270
    4ee8:	09 95       	icall
}
    4eea:	cf 91       	pop	r28
    4eec:	df 91       	pop	r29
    4eee:	ff 91       	pop	r31
    4ef0:	ef 91       	pop	r30
    4ef2:	bf 91       	pop	r27
    4ef4:	af 91       	pop	r26
    4ef6:	9f 91       	pop	r25
    4ef8:	8f 91       	pop	r24
    4efa:	7f 91       	pop	r23
    4efc:	6f 91       	pop	r22
    4efe:	5f 91       	pop	r21
    4f00:	4f 91       	pop	r20
    4f02:	3f 91       	pop	r19
    4f04:	2f 91       	pop	r18
    4f06:	0f 90       	pop	r0
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	0f 90       	pop	r0
    4f0c:	1f 90       	pop	r1
    4f0e:	18 95       	reti

00004f10 <TIM2_Start>:
void TIM2_Start(void)
{
    4f10:	df 93       	push	r29
    4f12:	cf 93       	push	r28
    4f14:	cd b7       	in	r28, 0x3d	; 61
    4f16:	de b7       	in	r29, 0x3e	; 62

}
    4f18:	cf 91       	pop	r28
    4f1a:	df 91       	pop	r29
    4f1c:	08 95       	ret

00004f1e <TIM2_Stop>:
void TIM2_Stop (void)
{
    4f1e:	df 93       	push	r29
    4f20:	cf 93       	push	r28
    4f22:	cd b7       	in	r28, 0x3d	; 61
    4f24:	de b7       	in	r29, 0x3e	; 62

}
    4f26:	cf 91       	pop	r28
    4f28:	df 91       	pop	r29
    4f2a:	08 95       	ret

00004f2c <TIM2_SetISR>:
void TIM2_SetISR(void (*ptr2) (void))
{
    4f2c:	df 93       	push	r29
    4f2e:	cf 93       	push	r28
    4f30:	00 d0       	rcall	.+0      	; 0x4f32 <TIM2_SetISR+0x6>
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	9a 83       	std	Y+2, r25	; 0x02
    4f38:	89 83       	std	Y+1, r24	; 0x01
	Gptr2=ptr2;
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
    4f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f3e:	90 93 70 02 	sts	0x0270, r25
    4f42:	80 93 6f 02 	sts	0x026F, r24
}
    4f46:	0f 90       	pop	r0
    4f48:	0f 90       	pop	r0
    4f4a:	cf 91       	pop	r28
    4f4c:	df 91       	pop	r29
    4f4e:	08 95       	ret

00004f50 <PWM0_Init>:
/****PMW FUNCTIONS******/



void PWM0_Init(void)
{
    4f50:	df 93       	push	r29
    4f52:	cf 93       	push	r28
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM Mode Selection*/
		SETBIT(TCCR0,3);	//WGM01
    4f58:	a3 e5       	ldi	r26, 0x53	; 83
    4f5a:	b0 e0       	ldi	r27, 0x00	; 0
    4f5c:	e3 e5       	ldi	r30, 0x53	; 83
    4f5e:	f0 e0       	ldi	r31, 0x00	; 0
    4f60:	80 81       	ld	r24, Z
    4f62:	88 60       	ori	r24, 0x08	; 8
    4f64:	8c 93       	st	X, r24
		SETBIT(TCCR0,6);	//WGM00
    4f66:	a3 e5       	ldi	r26, 0x53	; 83
    4f68:	b0 e0       	ldi	r27, 0x00	; 0
    4f6a:	e3 e5       	ldi	r30, 0x53	; 83
    4f6c:	f0 e0       	ldi	r31, 0x00	; 0
    4f6e:	80 81       	ld	r24, Z
    4f70:	80 64       	ori	r24, 0x40	; 64
    4f72:	8c 93       	st	X, r24

	/*Clock Source Select*/
	/*Current Prescalar/1024  .... freq.=3900Hz*/

		SETBIT(TCCR0,0);	//CS00
    4f74:	a3 e5       	ldi	r26, 0x53	; 83
    4f76:	b0 e0       	ldi	r27, 0x00	; 0
    4f78:	e3 e5       	ldi	r30, 0x53	; 83
    4f7a:	f0 e0       	ldi	r31, 0x00	; 0
    4f7c:	80 81       	ld	r24, Z
    4f7e:	81 60       	ori	r24, 0x01	; 1
    4f80:	8c 93       	st	X, r24
		CLRBIT(TCCR0,1);	//CS01
    4f82:	a3 e5       	ldi	r26, 0x53	; 83
    4f84:	b0 e0       	ldi	r27, 0x00	; 0
    4f86:	e3 e5       	ldi	r30, 0x53	; 83
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	80 81       	ld	r24, Z
    4f8c:	8d 7f       	andi	r24, 0xFD	; 253
    4f8e:	8c 93       	st	X, r24
		CLRBIT(TCCR0,2);	//CS02
    4f90:	a3 e5       	ldi	r26, 0x53	; 83
    4f92:	b0 e0       	ldi	r27, 0x00	; 0
    4f94:	e3 e5       	ldi	r30, 0x53	; 83
    4f96:	f0 e0       	ldi	r31, 0x00	; 0
    4f98:	80 81       	ld	r24, Z
    4f9a:	8b 7f       	andi	r24, 0xFB	; 251
    4f9c:	8c 93       	st	X, r24

	/*Compare Output Mode : Non Inverting */
		CLRBIT(TCCR0,4);	//COM0
    4f9e:	a3 e5       	ldi	r26, 0x53	; 83
    4fa0:	b0 e0       	ldi	r27, 0x00	; 0
    4fa2:	e3 e5       	ldi	r30, 0x53	; 83
    4fa4:	f0 e0       	ldi	r31, 0x00	; 0
    4fa6:	80 81       	ld	r24, Z
    4fa8:	8f 7e       	andi	r24, 0xEF	; 239
    4faa:	8c 93       	st	X, r24
		SETBIT(TCCR0,5);	//COM1
    4fac:	a3 e5       	ldi	r26, 0x53	; 83
    4fae:	b0 e0       	ldi	r27, 0x00	; 0
    4fb0:	e3 e5       	ldi	r30, 0x53	; 83
    4fb2:	f0 e0       	ldi	r31, 0x00	; 0
    4fb4:	80 81       	ld	r24, Z
    4fb6:	80 62       	ori	r24, 0x20	; 32
    4fb8:	8c 93       	st	X, r24


		DIO_SetPinDirection(PORT1,PIN3,OUTPUT);
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	63 e0       	ldi	r22, 0x03	; 3
    4fbe:	41 e0       	ldi	r20, 0x01	; 1
    4fc0:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_SetPinDirection>

}
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	08 95       	ret

00004fca <PWM0_DC>:
void PWM0_DC(U8 Duty_Cycle)
{
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	df 93       	push	r29
    4fd0:	cf 93       	push	r28
    4fd2:	0f 92       	push	r0
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62
    4fd8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (U8)(255*(Duty_Cycle/100.0)) ;
    4fda:	0c e5       	ldi	r16, 0x5C	; 92
    4fdc:	10 e0       	ldi	r17, 0x00	; 0
    4fde:	89 81       	ldd	r24, Y+1	; 0x01
    4fe0:	88 2f       	mov	r24, r24
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	aa 27       	eor	r26, r26
    4fe6:	97 fd       	sbrc	r25, 7
    4fe8:	a0 95       	com	r26
    4fea:	ba 2f       	mov	r27, r26
    4fec:	bc 01       	movw	r22, r24
    4fee:	cd 01       	movw	r24, r26
    4ff0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4ff4:	dc 01       	movw	r26, r24
    4ff6:	cb 01       	movw	r24, r22
    4ff8:	bc 01       	movw	r22, r24
    4ffa:	cd 01       	movw	r24, r26
    4ffc:	20 e0       	ldi	r18, 0x00	; 0
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	48 ec       	ldi	r20, 0xC8	; 200
    5002:	52 e4       	ldi	r21, 0x42	; 66
    5004:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	bc 01       	movw	r22, r24
    500e:	cd 01       	movw	r24, r26
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	4f e7       	ldi	r20, 0x7F	; 127
    5016:	53 e4       	ldi	r21, 0x43	; 67
    5018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	bc 01       	movw	r22, r24
    5022:	cd 01       	movw	r24, r26
    5024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	f8 01       	movw	r30, r16
    502e:	80 83       	st	Z, r24
}
    5030:	0f 90       	pop	r0
    5032:	cf 91       	pop	r28
    5034:	df 91       	pop	r29
    5036:	1f 91       	pop	r17
    5038:	0f 91       	pop	r16
    503a:	08 95       	ret

0000503c <PWM1_Init>:
void PWM1_Init(void)
{
    503c:	df 93       	push	r29
    503e:	cf 93       	push	r28
    5040:	cd b7       	in	r28, 0x3d	; 61
    5042:	de b7       	in	r29, 0x3e	; 62

}
    5044:	cf 91       	pop	r28
    5046:	df 91       	pop	r29
    5048:	08 95       	ret

0000504a <PWM1_DC>:
void PWM1_DC(U8 Duty_Cycle)
{
    504a:	df 93       	push	r29
    504c:	cf 93       	push	r28
    504e:	0f 92       	push	r0
    5050:	cd b7       	in	r28, 0x3d	; 61
    5052:	de b7       	in	r29, 0x3e	; 62
    5054:	89 83       	std	Y+1, r24	; 0x01

}
    5056:	0f 90       	pop	r0
    5058:	cf 91       	pop	r28
    505a:	df 91       	pop	r29
    505c:	08 95       	ret

0000505e <PWM2_Init>:

void PWM2_Init(void)
{
    505e:	df 93       	push	r29
    5060:	cf 93       	push	r28
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62

}
    5066:	cf 91       	pop	r28
    5068:	df 91       	pop	r29
    506a:	08 95       	ret

0000506c <PWM2_DC>:
void PWM2_DC(U8 Duty_Cycle)
{
    506c:	df 93       	push	r29
    506e:	cf 93       	push	r28
    5070:	0f 92       	push	r0
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
    5076:	89 83       	std	Y+1, r24	; 0x01

}
    5078:	0f 90       	pop	r0
    507a:	cf 91       	pop	r28
    507c:	df 91       	pop	r29
    507e:	08 95       	ret

00005080 <main>:




int main(void)
{
    5080:	df 93       	push	r29
    5082:	cf 93       	push	r28
    5084:	cd b7       	in	r28, 0x3d	; 61
    5086:	de b7       	in	r29, 0x3e	; 62
	/*
	 *INITIALIZE SAFE SOFTWARE
	  */
	LCD_Init();
    5088:	0e 94 16 1a 	call	0x342c	; 0x342c <LCD_Init>
	Keypad_Init();
    508c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <Keypad_Init>
	TIM0_Init();
    5090:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <TIM0_Init>
	Safe_Init();
    5094:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <Safe_Init>


	return 0 ;
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	90 e0       	ldi	r25, 0x00	; 0
}
    509c:	cf 91       	pop	r28
    509e:	df 91       	pop	r29
    50a0:	08 95       	ret

000050a2 <__divmodhi4>:
    50a2:	97 fb       	bst	r25, 7
    50a4:	09 2e       	mov	r0, r25
    50a6:	07 26       	eor	r0, r23
    50a8:	0a d0       	rcall	.+20     	; 0x50be <__divmodhi4_neg1>
    50aa:	77 fd       	sbrc	r23, 7
    50ac:	04 d0       	rcall	.+8      	; 0x50b6 <__divmodhi4_neg2>
    50ae:	0c d0       	rcall	.+24     	; 0x50c8 <__udivmodhi4>
    50b0:	06 d0       	rcall	.+12     	; 0x50be <__divmodhi4_neg1>
    50b2:	00 20       	and	r0, r0
    50b4:	1a f4       	brpl	.+6      	; 0x50bc <__divmodhi4_exit>

000050b6 <__divmodhi4_neg2>:
    50b6:	70 95       	com	r23
    50b8:	61 95       	neg	r22
    50ba:	7f 4f       	sbci	r23, 0xFF	; 255

000050bc <__divmodhi4_exit>:
    50bc:	08 95       	ret

000050be <__divmodhi4_neg1>:
    50be:	f6 f7       	brtc	.-4      	; 0x50bc <__divmodhi4_exit>
    50c0:	90 95       	com	r25
    50c2:	81 95       	neg	r24
    50c4:	9f 4f       	sbci	r25, 0xFF	; 255
    50c6:	08 95       	ret

000050c8 <__udivmodhi4>:
    50c8:	aa 1b       	sub	r26, r26
    50ca:	bb 1b       	sub	r27, r27
    50cc:	51 e1       	ldi	r21, 0x11	; 17
    50ce:	07 c0       	rjmp	.+14     	; 0x50de <__udivmodhi4_ep>

000050d0 <__udivmodhi4_loop>:
    50d0:	aa 1f       	adc	r26, r26
    50d2:	bb 1f       	adc	r27, r27
    50d4:	a6 17       	cp	r26, r22
    50d6:	b7 07       	cpc	r27, r23
    50d8:	10 f0       	brcs	.+4      	; 0x50de <__udivmodhi4_ep>
    50da:	a6 1b       	sub	r26, r22
    50dc:	b7 0b       	sbc	r27, r23

000050de <__udivmodhi4_ep>:
    50de:	88 1f       	adc	r24, r24
    50e0:	99 1f       	adc	r25, r25
    50e2:	5a 95       	dec	r21
    50e4:	a9 f7       	brne	.-22     	; 0x50d0 <__udivmodhi4_loop>
    50e6:	80 95       	com	r24
    50e8:	90 95       	com	r25
    50ea:	bc 01       	movw	r22, r24
    50ec:	cd 01       	movw	r24, r26
    50ee:	08 95       	ret

000050f0 <__prologue_saves__>:
    50f0:	2f 92       	push	r2
    50f2:	3f 92       	push	r3
    50f4:	4f 92       	push	r4
    50f6:	5f 92       	push	r5
    50f8:	6f 92       	push	r6
    50fa:	7f 92       	push	r7
    50fc:	8f 92       	push	r8
    50fe:	9f 92       	push	r9
    5100:	af 92       	push	r10
    5102:	bf 92       	push	r11
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	cd b7       	in	r28, 0x3d	; 61
    5116:	de b7       	in	r29, 0x3e	; 62
    5118:	ca 1b       	sub	r28, r26
    511a:	db 0b       	sbc	r29, r27
    511c:	0f b6       	in	r0, 0x3f	; 63
    511e:	f8 94       	cli
    5120:	de bf       	out	0x3e, r29	; 62
    5122:	0f be       	out	0x3f, r0	; 63
    5124:	cd bf       	out	0x3d, r28	; 61
    5126:	09 94       	ijmp

00005128 <__epilogue_restores__>:
    5128:	2a 88       	ldd	r2, Y+18	; 0x12
    512a:	39 88       	ldd	r3, Y+17	; 0x11
    512c:	48 88       	ldd	r4, Y+16	; 0x10
    512e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5130:	6e 84       	ldd	r6, Y+14	; 0x0e
    5132:	7d 84       	ldd	r7, Y+13	; 0x0d
    5134:	8c 84       	ldd	r8, Y+12	; 0x0c
    5136:	9b 84       	ldd	r9, Y+11	; 0x0b
    5138:	aa 84       	ldd	r10, Y+10	; 0x0a
    513a:	b9 84       	ldd	r11, Y+9	; 0x09
    513c:	c8 84       	ldd	r12, Y+8	; 0x08
    513e:	df 80       	ldd	r13, Y+7	; 0x07
    5140:	ee 80       	ldd	r14, Y+6	; 0x06
    5142:	fd 80       	ldd	r15, Y+5	; 0x05
    5144:	0c 81       	ldd	r16, Y+4	; 0x04
    5146:	1b 81       	ldd	r17, Y+3	; 0x03
    5148:	aa 81       	ldd	r26, Y+2	; 0x02
    514a:	b9 81       	ldd	r27, Y+1	; 0x01
    514c:	ce 0f       	add	r28, r30
    514e:	d1 1d       	adc	r29, r1
    5150:	0f b6       	in	r0, 0x3f	; 63
    5152:	f8 94       	cli
    5154:	de bf       	out	0x3e, r29	; 62
    5156:	0f be       	out	0x3f, r0	; 63
    5158:	cd bf       	out	0x3d, r28	; 61
    515a:	ed 01       	movw	r28, r26
    515c:	08 95       	ret

0000515e <strcmp>:
    515e:	fb 01       	movw	r30, r22
    5160:	dc 01       	movw	r26, r24
    5162:	8d 91       	ld	r24, X+
    5164:	01 90       	ld	r0, Z+
    5166:	80 19       	sub	r24, r0
    5168:	01 10       	cpse	r0, r1
    516a:	d9 f3       	breq	.-10     	; 0x5162 <strcmp+0x4>
    516c:	99 0b       	sbc	r25, r25
    516e:	08 95       	ret

00005170 <_exit>:
    5170:	f8 94       	cli

00005172 <__stop_program>:
    5172:	ff cf       	rjmp	.-2      	; 0x5172 <__stop_program>
